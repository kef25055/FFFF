import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as a,o as i}from"./app-QmopBhly.js";const n={};function s(r,e){return i(),l("div",null,e[0]||(e[0]=[a('<h1 id="mysql事务" tabindex="-1"><a class="header-anchor" href="#mysql事务"><span>MySQL事务</span></a></h1><h2 id="什么是事务" tabindex="-1"><a class="header-anchor" href="#什么是事务"><span>什么是事务？</span></a></h2><p>数据库中的事务是指对数据库执行的一批操作，在同一个事务当中，这些操作要么全部执行成功， 要么全部失败，不会存在部分成功的情况。</p><ul><li>事务是 一个原子操作，是一个最小执行单元，可以由一个或者多个SQL语句构成。</li><li>在同一个事务当中，所有SQL语句都执行成功时整个事务成功，有一个SQL语句执行失败则整个事务执行失败。</li></ul><h2 id="事务的四大特性acid" tabindex="-1"><a class="header-anchor" href="#事务的四大特性acid"><span>事务的四大特性ACID</span></a></h2><h3 id="原子性-atomicity" tabindex="-1"><a class="header-anchor" href="#原子性-atomicity"><span>原子性(Atomicity)</span></a></h3><p>事务是一个不可分割的工作单位，事务中的操作要么全部执行，要么全部不执行。 这确保了事务的完整性，防止了部分操作成功部分操作失败的情况。</p><ul><li>事务是一个完整的操作，事务的各元素是不可分的。</li><li>事务中的所有元素必须作为一个整体提交或回滚。</li><li>如果事务中的任何元素失败，则整个事务失败。</li></ul><h3 id="一致性-consistency" tabindex="-1"><a class="header-anchor" href="#一致性-consistency"><span>一致性(Consistency)</span></a></h3><p>事务前后数据的完整性必须保持一致。一个事务必须使数据库从一个一致性状态变成另一个一致性状态。 在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。</p><h3 id="隔离性-isolation" tabindex="-1"><a class="header-anchor" href="#隔离性-isolation"><span>隔离性(Isolation)</span></a></h3><p>在并发环境中，当不同的事务同时操作相同的数据时，事务之间的操作不会互相影响。</p><ul><li>对数据进行修改的所有并发事务是彼此隔离的，表面事务必须是独立的，不以任何方式依赖或影响其他事务。</li><li>修改数据的事务可以在另一个使用相同数据的事务开始之前或结束之后访问这些数据。</li><li>并发访问数据库时，一个用户的事务不被其他事务干扰，并发事务的数据库之间是独立的。</li><li><strong>隔离级别</strong>： <ul><li>未提交读：READ-UNCOMMITTED</li><li>提交读：READ-COMMITTED</li><li>可重复读：REPEATABLE-READ</li><li>串行化：SERIALIZABLE</li></ul></li></ul><h3 id="持久性-durability" tabindex="-1"><a class="header-anchor" href="#持久性-durability"><span>持久性(Durability)</span></a></h3><p>事务一旦提交，它对数据库中数据的更改就是永久性的，即使系统发生故障也不会丢失。</p><h2 id="并发事务问题" tabindex="-1"><a class="header-anchor" href="#并发事务问题"><span>并发事务问题</span></a></h2><p>并发事务是指在数据库系统中，多个事务同时对数据库进行读写和修改的过程。</p><p>对于同时允许的多个事务（多线程并发），当这些事务访问数据库中的相同数据时， 如果没有采取必要的隔离机制就hi导致各种并发问题（线程安全问题 、共享内存问题）。</p><h3 id="脏写-更新丢失" tabindex="-1"><a class="header-anchor" href="#脏写-更新丢失"><span>脏写/更新丢失</span></a></h3><p>一个事务<strong>修改了另一个事务已经修改但还没有提交的数据</strong>，会导致数据不一致和丢失更新的问题。</p><blockquote><p>第一类更新丢失：A，B 事务同时操作一个数据，A 更改完成还没提交，此时 B 更改失败回滚，会将 A 更新的数据也回滚。（事务撤销造成的撤销丢失）</p><p>第二类更新丢失：A，B 事务同时操作一个数据，A 更改完成还没提交，此时 B 更改并提交，覆盖了 A 更改的数据。（事务提交造成的覆盖丢失）</p></blockquote><h3 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读"><span>脏读</span></a></h3><p>一个事务读到了另一个事务<strong>还未提交的数据</strong>。</p><blockquote><p>A，B 事务同时操作一个数据，A 事务修改了某条数据但还未提交，此时B事务访问了该条数据读到的就是 A 修改过后的数据。 若 A 事务回滚，则 B 事务读到的就是脏数据，造成了数据不一致。</p></blockquote><h3 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读"><span>不可重复读</span></a></h3><p>一个事务读到了另一个事务<strong>已经提交的更新数据</strong>，引起事务中多次查询结果不一致。</p><blockquote><p>A，B 事务同时操作一个数据，A 先查询某条数据，在事务未结束时 B 事务对同一数据修改并提交， 此后 A 再次查询该条数据，两次查询的结果不同。</p></blockquote><h3 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读"><span>幻读</span></a></h3><p>一个事务按相同查询条件重新读取以前检索过的数据，却发现其他事务<strong>插入</strong>了满足查询条件的<strong>新数据</strong>。</p><blockquote><p>事务 A 在操作一堆数据的时候，事务 B 插入了一条新数据，事务 A 再次查询时，发现多了一条数据，像是幻觉。</p></blockquote><h2 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别"><span>事务隔离级别</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>事务隔离级别越高，数据约安全，但是性能越差。</p></div><h3 id="未提交读" tabindex="-1"><a class="header-anchor" href="#未提交读"><span>未提交读</span></a></h3><p>允许脏读，即允许一个事务看到其他事务未提交的修改。 这种隔离级别最低，性能最高，但一致性最差。</p><h3 id="提交读" tabindex="-1"><a class="header-anchor" href="#提交读"><span>提交读</span></a></h3><p>只允许一个事务看到其他事务已经提交的修改。 这种隔离级别可以防止脏读，但不能防止可重复读和幻读。</p><h3 id="可重复读-mysql默认" tabindex="-1"><a class="header-anchor" href="#可重复读-mysql默认"><span>可重复读(MySQL默认)</span></a></h3><p>确保如果一个事务中执行多次相同的 select 语句得到的都是相同的结果。 这种隔离级别可以防止脏读和不可重复读，但不能完全防止幻读。</p><h3 id="串行化" tabindex="-1"><a class="header-anchor" href="#串行化"><span>串行化</span></a></h3><p>将事务完全隔离，使得它们按顺序执行。 这种隔离级别最高，一致性最好，但性能最差。</p>',40)]))}const h=t(n,[["render",s],["__file","MySQL事务.html.vue"]]),p=JSON.parse('{"path":"/blog/learning/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%BA%8B%E5%8A%A1.html","title":"MySQL事务","lang":"zh-CN","frontmatter":{"title":"MySQL事务","categories":["数据库"],"tags":["MySQL","事务"],"order":1,"description":"MySQL事务 什么是事务？ 数据库中的事务是指对数据库执行的一批操作，在同一个事务当中，这些操作要么全部执行成功， 要么全部失败，不会存在部分成功的情况。 事务是 一个原子操作，是一个最小执行单元，可以由一个或者多个SQL语句构成。 在同一个事务当中，所有SQL语句都执行成功时整个事务成功，有一个SQL语句执行失败则整个事务执行失败。 事务的四大特性...","head":[["meta",{"property":"og:url","content":"https://github.com/kef25055/FFFF/blog/learning/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL%E4%BA%8B%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"小鸡很方"}],["meta",{"property":"og:title","content":"MySQL事务"}],["meta",{"property":"og:description","content":"MySQL事务 什么是事务？ 数据库中的事务是指对数据库执行的一批操作，在同一个事务当中，这些操作要么全部执行成功， 要么全部失败，不会存在部分成功的情况。 事务是 一个原子操作，是一个最小执行单元，可以由一个或者多个SQL语句构成。 在同一个事务当中，所有SQL语句都执行成功时整个事务成功，有一个SQL语句执行失败则整个事务执行失败。 事务的四大特性..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-07T11:39:35.000Z"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:tag","content":"事务"}],["meta",{"property":"article:modified_time","content":"2025-04-07T11:39:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MySQL事务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-07T11:39:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小鸡很方\\",\\"url\\":\\"https://github.com/kef25055\\"}]}"]]},"headers":[{"level":2,"title":"什么是事务？","slug":"什么是事务","link":"#什么是事务","children":[]},{"level":2,"title":"事务的四大特性ACID","slug":"事务的四大特性acid","link":"#事务的四大特性acid","children":[{"level":3,"title":"原子性(Atomicity)","slug":"原子性-atomicity","link":"#原子性-atomicity","children":[]},{"level":3,"title":"一致性(Consistency)","slug":"一致性-consistency","link":"#一致性-consistency","children":[]},{"level":3,"title":"隔离性(Isolation)","slug":"隔离性-isolation","link":"#隔离性-isolation","children":[]},{"level":3,"title":"持久性(Durability)","slug":"持久性-durability","link":"#持久性-durability","children":[]}]},{"level":2,"title":"并发事务问题","slug":"并发事务问题","link":"#并发事务问题","children":[{"level":3,"title":"脏写/更新丢失","slug":"脏写-更新丢失","link":"#脏写-更新丢失","children":[]},{"level":3,"title":"脏读","slug":"脏读","link":"#脏读","children":[]},{"level":3,"title":"不可重复读","slug":"不可重复读","link":"#不可重复读","children":[]},{"level":3,"title":"幻读","slug":"幻读","link":"#幻读","children":[]}]},{"level":2,"title":"事务隔离级别","slug":"事务隔离级别","link":"#事务隔离级别","children":[{"level":3,"title":"未提交读","slug":"未提交读","link":"#未提交读","children":[]},{"level":3,"title":"提交读","slug":"提交读","link":"#提交读","children":[]},{"level":3,"title":"可重复读(MySQL默认)","slug":"可重复读-mysql默认","link":"#可重复读-mysql默认","children":[]},{"level":3,"title":"串行化","slug":"串行化","link":"#串行化","children":[]}]}],"git":{"createdTime":1744025975000,"updatedTime":1744025975000,"contributors":[{"name":"小鸡很方","email":"fang-kk@qq.com","commits":1}]},"readingTime":{"minutes":4.55,"words":1364},"filePathRelative":"blog/learning/数据库/MySQL事务.md","localizedDate":"2025年4月7日","excerpt":"\\n<h2>什么是事务？</h2>\\n<p>数据库中的事务是指对数据库执行的一批操作，在同一个事务当中，这些操作要么全部执行成功，\\n要么全部失败，不会存在部分成功的情况。</p>\\n<ul>\\n<li>事务是 一个原子操作，是一个最小执行单元，可以由一个或者多个SQL语句构成。</li>\\n<li>在同一个事务当中，所有SQL语句都执行成功时整个事务成功，有一个SQL语句执行失败则整个事务执行失败。</li>\\n</ul>\\n<h2>事务的四大特性ACID</h2>\\n<h3>原子性(Atomicity)</h3>\\n<p>事务是一个不可分割的工作单位，事务中的操作要么全部执行，要么全部不执行。\\n这确保了事务的完整性，防止了部分操作成功部分操作失败的情况。</p>","autoDesc":true}');export{h as comp,p as data};
