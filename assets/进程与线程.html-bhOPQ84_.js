import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as n,o as l}from"./app-FqXpC6xN.js";const s={};function r(i,t){return l(),e("div",null,t[0]||(t[0]=[n('<h1 id="进程与线程" tabindex="-1"><a class="header-anchor" href="#进程与线程"><span>进程与线程</span></a></h1><h2 id="一、什么是进程-process" tabindex="-1"><a class="header-anchor" href="#一、什么是进程-process"><span>一、什么是进程(Process)</span></a></h2><h3 id="✅定义" tabindex="-1"><a class="header-anchor" href="#✅定义"><span>✅定义</span></a></h3><blockquote><p>进程是操作系统<strong>资源分配</strong>的最小单位，是一个正在运行的程序实例。</p></blockquote><p>一个程序在执行时，操作系统会为它分配专属的资源（内存、文件描述符、CPU 时间等），这个资源集合 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span> 执行状态就组成了一个进程。</p><h3 id="✅组成结构" tabindex="-1"><a class="header-anchor" href="#✅组成结构"><span>✅组成结构</span></a></h3><p>一个进程通常包括：</p><table><thead><tr><th>组成部分</th><th>描述</th></tr></thead><tbody><tr><td>程序代码</td><td>可执行指令</td></tr><tr><td>数据段</td><td>全局变量、静态变量等</td></tr><tr><td>堆(Heap)</td><td>动态分配内存(如 <code>malloc</code>/<code>new</code>)</td></tr><tr><td>栈(Stack)</td><td>函数调用、局部变量、返回地址等</td></tr><tr><td>PCB(进程控制块)</td><td>操作系统内保存该进程的元信息</td></tr></tbody></table><h3 id="✅进程的生命周期-状态图" tabindex="-1"><a class="header-anchor" href="#✅进程的生命周期-状态图"><span>✅进程的生命周期（状态图）</span></a></h3><figure><img src="https://github.com/kef25055/Typoraimg/blob/main/blog/learning/操作系统/1.png?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>新建</td><td>正在创建中的进程</td></tr><tr><td>就绪</td><td>等待被调度运行</td></tr><tr><td>执行</td><td>正在CPU上执行</td></tr><tr><td>阻塞</td><td>等待事件（如IO、信号）</td></tr><tr><td>终止</td><td>执行完成或被杀死</td></tr></tbody></table><h2 id="二、什么是线程-thread" tabindex="-1"><a class="header-anchor" href="#二、什么是线程-thread"><span>二、什么是线程(Thread)</span></a></h2><h3 id="✅定义-1" tabindex="-1"><a class="header-anchor" href="#✅定义-1"><span>✅定义</span></a></h3><blockquote><p>线程是<strong>系统调度</strong>的最小单位，是程序的一个执行流。</p></blockquote><p>一个线程属于某个进程。多个线程共享进程的资源，但每个线程也有自己的执行状态。也称为<strong>轻量级进程（LWP: Lightweight Process）</strong>。</p><h3 id="✅每个线程独有的资源" tabindex="-1"><a class="header-anchor" href="#✅每个线程独有的资源"><span>✅每个线程独有的资源</span></a></h3><ul><li>程序计数器(PC)</li><li>寄存器</li><li>堆栈(Stack)</li></ul><h3 id="✅多个线程共享的资源" tabindex="-1"><a class="header-anchor" href="#✅多个线程共享的资源"><span>✅多个线程共享的资源</span></a></h3><ul><li>代码段</li><li>数据段</li><li>堆</li><li>文件描述符等</li></ul><h2 id="三、进程-vs-线程对比" tabindex="-1"><a class="header-anchor" href="#三、进程-vs-线程对比"><span>三、进程 vs 线程对比</span></a></h2><table><thead><tr><th></th><th>进程</th><th>线程</th></tr></thead><tbody><tr><td>基本概念</td><td>独立的运行单位，资源分配和拥有的基本单位</td><td>程序执行的基本单位，进程中的执行单位</td></tr><tr><td>内存空间</td><td>拥有独立的内存空间</td><td>共享进程的内存空间</td></tr><tr><td>系统开销</td><td>创建/切换开销较大</td><td>创建/切换开销较小</td></tr><tr><td>通信方式</td><td>进程间通信较复杂，需要借助操作系统</td><td>同一进程内通信非常简单，可以直接读写进程数据段</td></tr><tr><td>稳定性</td><td>稳定性高，一个进程崩溃不影响其他进程</td><td>稳定性低，一个线程崩溃可能影响整个进程</td></tr></tbody></table><h3 id="为什么操作系统需要-线程" tabindex="-1"><a class="header-anchor" href="#为什么操作系统需要-线程"><span>为什么操作系统需要“线程”？</span></a></h3><ul><li><strong>提高并发性</strong>：线程可以在多核 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>P</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">CPU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span> 上并行执行，提高系统效率。</li><li><strong>资源利用率高</strong>：多个线程共享资源，减少冗余。</li><li><strong>响应更快</strong>：比如点击按钮后，界面不卡顿，因为有专门的线程处理用户输入。</li></ul><h2 id="四、进程与线程的调度机制" tabindex="-1"><a class="header-anchor" href="#四、进程与线程的调度机制"><span>四、进程与线程的调度机制</span></a></h2><p><strong>操作系统中，调度是关键。它决定哪个任务被 CPU 执行。</strong></p><h3 id="_1-时间片轮转调度-round-robin" tabindex="-1"><a class="header-anchor" href="#_1-时间片轮转调度-round-robin"><span>1.时间片轮转调度(Round-Robin)</span></a></h3><ul><li>每个进程/线程获得一段时间</li><li>时间到就切换</li></ul><h3 id="_2-抢占式调度" tabindex="-1"><a class="header-anchor" href="#_2-抢占式调度"><span>2.抢占式调度</span></a></h3><ul><li>高优先级任务会中断低优先级任务</li></ul><h3 id="_3-非抢占式调度" tabindex="-1"><a class="header-anchor" href="#_3-非抢占式调度"><span>3.非抢占式调度</span></a></h3><ul><li>直到任务完成/放弃控制权才切换</li></ul><h3 id="_4-多级反馈队列调度-mlfq" tabindex="-1"><a class="header-anchor" href="#_4-多级反馈队列调度-mlfq"><span>4.多级反馈队列调度(MLFQ)</span></a></h3><ul><li>根据行为调整优先级，响应快又能防饿死</li></ul><h2 id="五、线程模型与实现方式" tabindex="-1"><a class="header-anchor" href="#五、线程模型与实现方式"><span>五、线程模型与实现方式</span></a></h2><h3 id="_1-用户级线程-user-level-thread" tabindex="-1"><a class="header-anchor" href="#_1-用户级线程-user-level-thread"><span>1.用户级线程(User-Level Thread)</span></a></h3><ul><li>线程由用户库管理（非操作系统）</li><li>切换快，不依赖内核</li><li>缺点：一个线程阻塞，整个进程阻塞</li></ul><h3 id="_2-内核级线程-kernel-level-thread" tabindex="-1"><a class="header-anchor" href="#_2-内核级线程-kernel-level-thread"><span>2.内核级线程(Kernel-Level Thread)</span></a></h3><ul><li>线程由操作系统内核调度</li><li>真正的并行性（适配多核）</li><li>切换慢，开销大</li></ul><h3 id="_3-混合模型-hybrid-model" tabindex="-1"><a class="header-anchor" href="#_3-混合模型-hybrid-model"><span>3.混合模型(Hybrid Model)</span></a></h3><ul><li>常见于现代系统，如Linux/NPTL</li><li>用户管理线程池，内核调度轻量线程</li></ul><h2 id="六、进程间通信-ipc" tabindex="-1"><a class="header-anchor" href="#六、进程间通信-ipc"><span>六、进程间通信(IPC)</span></a></h2><p>由于进程是<strong>独立内存空间</strong>，需要借助<strong>操作系统机制</strong>来通信。</p><h4 id="常见ipc方式如下" tabindex="-1"><a class="header-anchor" href="#常见ipc方式如下"><span>常见IPC方式如下：</span></a></h4><table><thead><tr><th>方式</th><th>特点</th><th>举例用途</th></tr></thead><tbody><tr><td>管道(Pipe)</td><td>父子进程通信，单向</td><td>shell管道</td></tr><tr><td>命名管道(FIFO)</td><td>不相关进程通信，路径命名</td><td>系统服务通信</td></tr><tr><td>消息队列</td><td>操作系统维护消息缓冲区</td><td>多任务控制中心</td></tr><tr><td>信号量(Semaphore)</td><td>同步或互斥控制</td><td>控制访问共享资源</td></tr><tr><td>共享内存</td><td>内存共享，最快，但需同步手段</td><td>视频共享、数据库缓存</td></tr><tr><td>套接字(Socket)</td><td>网络/本地通信通用，最灵活</td><td>客户端-服务端模型</td></tr><tr><td>信号(Signal)</td><td>异步事件通知</td><td>kill、闹钟</td></tr></tbody></table><h2 id="七、进程与线程的世纪应用" tabindex="-1"><a class="header-anchor" href="#七、进程与线程的世纪应用"><span>七、进程与线程的世纪应用</span></a></h2><table><thead><tr><th>场景</th><th>使用方式</th></tr></thead><tbody><tr><td>Web服务器</td><td>多线程响应请求</td></tr><tr><td>浏览器</td><td>每个标签页一个进程</td></tr><tr><td>视频播放器</td><td>解码线程 + 播放线程 + 渲染线程</td></tr><tr><td>操作系统自身</td><td>守护进程(Process) + 内核线程(Thread)</td></tr><tr><td>数据库系统</td><td>线程池处理查询请求</td></tr></tbody></table><h2 id="八、线程-进程可能遇到的问题" tabindex="-1"><a class="header-anchor" href="#八、线程-进程可能遇到的问题"><span>八、线程/进程可能遇到的问题</span></a></h2><h3 id="_1-竞态条件-race-condition" tabindex="-1"><a class="header-anchor" href="#_1-竞态条件-race-condition"><span>1.竞态条件(Race Condition)</span></a></h3><ul><li>多线程同时访问数据，未加锁导致数据混乱</li></ul><h3 id="_2-死锁-deadlock" tabindex="-1"><a class="header-anchor" href="#_2-死锁-deadlock"><span>2.死锁(Deadlock)</span></a></h3><ul><li>线程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 等线程 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 的资源，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 又等 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>，互相卡死</li></ul><h3 id="_3-活锁-饥饿" tabindex="-1"><a class="header-anchor" href="#_3-活锁-饥饿"><span>3.活锁/饥饿</span></a></h3><ul><li>一直被抢占或让出，永远得不到执行机会</li></ul><h3 id="_4-创建过多线程" tabindex="-1"><a class="header-anchor" href="#_4-创建过多线程"><span>4.创建过多线程</span></a></h3><ul><li>比如每个连接都开线程，系统资源耗尽</li></ul>',55)]))}const o=a(s,[["render",r],["__file","进程与线程.html.vue"]]),c=JSON.parse('{"path":"/blog/learning/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.html","title":"进程与线程","lang":"zh-CN","frontmatter":{"title":"进程与线程","categories":["操作系统"],"tags":["进程","线程"],"order":1,"description":"进程与线程 一、什么是进程(Process) ✅定义 进程是操作系统资源分配的最小单位，是一个正在运行的程序实例。 一个程序在执行时，操作系统会为它分配专属的资源（内存、文件描述符、CPU 时间等），这个资源集合 + 执行状态就组成了一个进程。 ✅组成结构 一个进程通常包括： ✅进程的生命周期（状态图） 二、什么是线程(Thread) ✅定义 线程是系...","head":[["meta",{"property":"og:url","content":"https://github.com/kef25055/FFFF/blog/learning/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"小鸡很方"}],["meta",{"property":"og:title","content":"进程与线程"}],["meta",{"property":"og:description","content":"进程与线程 一、什么是进程(Process) ✅定义 进程是操作系统资源分配的最小单位，是一个正在运行的程序实例。 一个程序在执行时，操作系统会为它分配专属的资源（内存、文件描述符、CPU 时间等），这个资源集合 + 执行状态就组成了一个进程。 ✅组成结构 一个进程通常包括： ✅进程的生命周期（状态图） 二、什么是线程(Thread) ✅定义 线程是系..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/kef25055/Typoraimg/blob/main/blog/learning/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.png?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-05T05:15:03.000Z"}],["meta",{"property":"article:tag","content":"进程"}],["meta",{"property":"article:tag","content":"线程"}],["meta",{"property":"article:modified_time","content":"2025-04-05T05:15:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进程与线程\\",\\"image\\":[\\"https://github.com/kef25055/Typoraimg/blob/main/blog/learning/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.png?raw=true\\"],\\"dateModified\\":\\"2025-04-05T05:15:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小鸡很方\\",\\"url\\":\\"https://github.com/kef25055\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是进程(Process)","slug":"一、什么是进程-process","link":"#一、什么是进程-process","children":[{"level":3,"title":"✅定义","slug":"✅定义","link":"#✅定义","children":[]},{"level":3,"title":"✅组成结构","slug":"✅组成结构","link":"#✅组成结构","children":[]},{"level":3,"title":"✅进程的生命周期（状态图）","slug":"✅进程的生命周期-状态图","link":"#✅进程的生命周期-状态图","children":[]}]},{"level":2,"title":"二、什么是线程(Thread)","slug":"二、什么是线程-thread","link":"#二、什么是线程-thread","children":[{"level":3,"title":"✅定义","slug":"✅定义-1","link":"#✅定义-1","children":[]},{"level":3,"title":"✅每个线程独有的资源","slug":"✅每个线程独有的资源","link":"#✅每个线程独有的资源","children":[]},{"level":3,"title":"✅多个线程共享的资源","slug":"✅多个线程共享的资源","link":"#✅多个线程共享的资源","children":[]}]},{"level":2,"title":"三、进程 vs 线程对比","slug":"三、进程-vs-线程对比","link":"#三、进程-vs-线程对比","children":[{"level":3,"title":"为什么操作系统需要“线程”？","slug":"为什么操作系统需要-线程","link":"#为什么操作系统需要-线程","children":[]}]},{"level":2,"title":"四、进程与线程的调度机制","slug":"四、进程与线程的调度机制","link":"#四、进程与线程的调度机制","children":[{"level":3,"title":"1.时间片轮转调度(Round-Robin)","slug":"_1-时间片轮转调度-round-robin","link":"#_1-时间片轮转调度-round-robin","children":[]},{"level":3,"title":"2.抢占式调度","slug":"_2-抢占式调度","link":"#_2-抢占式调度","children":[]},{"level":3,"title":"3.非抢占式调度","slug":"_3-非抢占式调度","link":"#_3-非抢占式调度","children":[]},{"level":3,"title":"4.多级反馈队列调度(MLFQ)","slug":"_4-多级反馈队列调度-mlfq","link":"#_4-多级反馈队列调度-mlfq","children":[]}]},{"level":2,"title":"五、线程模型与实现方式","slug":"五、线程模型与实现方式","link":"#五、线程模型与实现方式","children":[{"level":3,"title":"1.用户级线程(User-Level Thread)","slug":"_1-用户级线程-user-level-thread","link":"#_1-用户级线程-user-level-thread","children":[]},{"level":3,"title":"2.内核级线程(Kernel-Level Thread)","slug":"_2-内核级线程-kernel-level-thread","link":"#_2-内核级线程-kernel-level-thread","children":[]},{"level":3,"title":"3.混合模型(Hybrid Model)","slug":"_3-混合模型-hybrid-model","link":"#_3-混合模型-hybrid-model","children":[]}]},{"level":2,"title":"六、进程间通信(IPC)","slug":"六、进程间通信-ipc","link":"#六、进程间通信-ipc","children":[]},{"level":2,"title":"七、进程与线程的世纪应用","slug":"七、进程与线程的世纪应用","link":"#七、进程与线程的世纪应用","children":[]},{"level":2,"title":"八、线程/进程可能遇到的问题","slug":"八、线程-进程可能遇到的问题","link":"#八、线程-进程可能遇到的问题","children":[{"level":3,"title":"1.竞态条件(Race Condition)","slug":"_1-竞态条件-race-condition","link":"#_1-竞态条件-race-condition","children":[]},{"level":3,"title":"2.死锁(Deadlock)","slug":"_2-死锁-deadlock","link":"#_2-死锁-deadlock","children":[]},{"level":3,"title":"3.活锁/饥饿","slug":"_3-活锁-饥饿","link":"#_3-活锁-饥饿","children":[]},{"level":3,"title":"4.创建过多线程","slug":"_4-创建过多线程","link":"#_4-创建过多线程","children":[]}]}],"git":{"createdTime":1743760679000,"updatedTime":1743830103000,"contributors":[{"name":"小鸡很方","email":"fang-kk@qq.com","commits":2}]},"readingTime":{"minutes":4.27,"words":1281},"filePathRelative":"blog/learning/操作系统/进程与线程.md","localizedDate":"2025年4月4日","excerpt":"\\n<h2>一、什么是进程(Process)</h2>\\n<h3>✅定义</h3>\\n<blockquote>\\n<p>进程是操作系统<strong>资源分配</strong>的最小单位，是一个正在运行的程序实例。</p>\\n</blockquote>\\n<p>一个程序在执行时，操作系统会为它分配专属的资源（内存、文件描述符、CPU 时间等），这个资源集合 <span v-pre=\\"\\" class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mo>+</mo></mrow><annotation encoding=\\"application/x-tex\\">+</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height:0.6667em;vertical-align:-0.0833em;\\"></span><span class=\\"mord\\">+</span></span></span></span> 执行状态就组成了一个进程。</p>","autoDesc":true}');export{o as comp,c as data};
