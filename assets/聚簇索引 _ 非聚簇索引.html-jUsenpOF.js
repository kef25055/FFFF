import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as a,o as i}from"./app-DVfwtg1t.js";const t={};function r(o,e){return i(),n("div",null,e[0]||(e[0]=[a('<h1 id="聚簇索引-非聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引-非聚簇索引"><span>聚簇索引 &amp; 非聚簇索引</span></a></h1><h2 id="聚簇索引" tabindex="-1"><a class="header-anchor" href="#聚簇索引"><span>聚簇索引</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><ul><li>聚簇索引是指数据表中的数据按照索引的顺序排列，索引的叶子节点储存的不仅是索引列的值，还存储整行数据。</li><li>每张表只能有一个聚簇索引，因为数据物理上只能有一种排列顺序。</li></ul><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h3><ul><li>在 InnoDB 中，主键索引就是聚簇索引，InnoDB 会自动将主键列作为聚簇索引。</li><li>如果没有定义主键，InnoDB 会尝试使用一个唯一的非空索引作为聚簇索引，如果表中没有主键或者唯一非空索引，InnoDB 会自动隐式生成一个 <code>row_id</code> 作为聚簇索引。</li></ul><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h3><ul><li>聚簇索引的叶子节点存储的是完整的数据。因此通过聚簇索引进行查询时，可以直接从索引中找到需要的数据，不需要额外查找步骤。</li><li>由于数据和索引一起存储，按主键查询非常高效，查询过程就是遍历聚簇索引找到数据的过程。</li></ul><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li>范围查找：由于数据储存在索引的叶子节点中，查询非常快，特别是范围查询效率高，因为数据物理上按顺序存储。</li><li>查询效率高，避免二次查找：因为聚簇索引中包含完整数据，某些查询只需要使用聚簇索引就能完成，避免二次查找。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li>插入和更新代价高：由于数据按照索引顺序存储，插入新数据时可能需要调整数据存储位置来维护顺序，因此插入效率比非聚簇索引低。</li><li>大字段影响性能：如果表中包含大字段，它们存储在叶子节点中会导致索引体积变大、性能下降。</li></ul><h2 id="非聚簇索引" tabindex="-1"><a class="header-anchor" href="#非聚簇索引"><span>非聚簇索引</span></a></h2><h3 id="定义-1" tabindex="-1"><a class="header-anchor" href="#定义-1"><span>定义</span></a></h3><ul><li>非聚簇索引是指索引和数据时分开存储的。非聚簇索引的叶子节点存储的是索引列的值和指向实际数据的指针（行号或主键）。</li><li>一张表可以有多个非聚簇索引，每个索引都有自己的存储顺序。</li></ul><h3 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点</span></a></h3><ul><li>非主键索引在 InnoDB 中就是非聚簇索引，这些索引的叶子节点存储的是索引列的值以及对应的主键值，而不是直接存储数据。</li></ul><h3 id="工作原理-1" tabindex="-1"><a class="header-anchor" href="#工作原理-1"><span>工作原理</span></a></h3><ul><li>非聚簇索引的叶子节点存储的时索引列的值和指向数据的指针。在 InnoDB 中，这个指针就是该行对应的主键值。 因此在使用非聚簇索引时，MySQL 需要先通过非聚簇索引找到主键值，在通过主键值回到聚簇索引找到实际数据（回表）。</li></ul><h3 id="优点-1" tabindex="-1"><a class="header-anchor" href="#优点-1"><span>优点</span></a></h3><ul><li>对于特定列的查询查找速度快：非聚簇索引可以加速对索引列的查找，尤其是对经常作为查询条件的列建立非聚簇索引，可以大大提高查询性能。</li><li>灵活性高：一张表可以有多个非聚簇索引，可以加速不同类型的查询。</li></ul><h3 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1"><span>缺点</span></a></h3><ul><li>查询效率低，需要回表：非聚簇索引查询时需要通过索引找到主键，再去聚簇索引查找实际数据。这个过程比直接使用聚簇索引慢。</li><li>额外存储：非聚簇索引需要额外创建索引树，占用更多磁盘空间。</li></ul>',23)]))}const c=l(t,[["render",r],["__file","聚簇索引 _ 非聚簇索引.html.vue"]]),d=JSON.parse('{"path":"/blog/learning/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%20_%20%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95.html","title":"聚簇索引 & 非聚簇索引","lang":"zh-CN","frontmatter":{"title":"聚簇索引 & 非聚簇索引","categories":["数据库"],"tags":["索引"],"order":3,"description":"聚簇索引 & 非聚簇索引 聚簇索引 定义 聚簇索引是指数据表中的数据按照索引的顺序排列，索引的叶子节点储存的不仅是索引列的值，还存储整行数据。 每张表只能有一个聚簇索引，因为数据物理上只能有一种排列顺序。 特点 在 InnoDB 中，主键索引就是聚簇索引，InnoDB 会自动将主键列作为聚簇索引。 如果没有定义主键，InnoDB 会尝试使用一个唯一的非...","head":[["meta",{"property":"og:url","content":"https://github.com/kef25055/FFFF/blog/learning/%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%20_%20%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95.html"}],["meta",{"property":"og:site_name","content":"小鸡很方"}],["meta",{"property":"og:title","content":"聚簇索引 & 非聚簇索引"}],["meta",{"property":"og:description","content":"聚簇索引 & 非聚簇索引 聚簇索引 定义 聚簇索引是指数据表中的数据按照索引的顺序排列，索引的叶子节点储存的不仅是索引列的值，还存储整行数据。 每张表只能有一个聚簇索引，因为数据物理上只能有一种排列顺序。 特点 在 InnoDB 中，主键索引就是聚簇索引，InnoDB 会自动将主键列作为聚簇索引。 如果没有定义主键，InnoDB 会尝试使用一个唯一的非..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-08T02:03:17.000Z"}],["meta",{"property":"article:tag","content":"索引"}],["meta",{"property":"article:modified_time","content":"2025-04-08T02:03:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"聚簇索引 & 非聚簇索引\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-08T02:03:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小鸡很方\\",\\"url\\":\\"https://github.com/kef25055\\"}]}"]]},"headers":[{"level":2,"title":"聚簇索引","slug":"聚簇索引","link":"#聚簇索引","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"非聚簇索引","slug":"非聚簇索引","link":"#非聚簇索引","children":[{"level":3,"title":"定义","slug":"定义-1","link":"#定义-1","children":[]},{"level":3,"title":"特点","slug":"特点-1","link":"#特点-1","children":[]},{"level":3,"title":"工作原理","slug":"工作原理-1","link":"#工作原理-1","children":[]},{"level":3,"title":"优点","slug":"优点-1","link":"#优点-1","children":[]},{"level":3,"title":"缺点","slug":"缺点-1","link":"#缺点-1","children":[]}]}],"git":{"createdTime":1744077797000,"updatedTime":1744077797000,"contributors":[{"name":"小鸡很方","email":"fang-kk@qq.com","commits":1}]},"readingTime":{"minutes":2.98,"words":893},"filePathRelative":"blog/learning/数据库/聚簇索引 & 非聚簇索引.md","localizedDate":"2025年4月8日","excerpt":"\\n<h2>聚簇索引</h2>\\n<h3>定义</h3>\\n<ul>\\n<li>聚簇索引是指数据表中的数据按照索引的顺序排列，索引的叶子节点储存的不仅是索引列的值，还存储整行数据。</li>\\n<li>每张表只能有一个聚簇索引，因为数据物理上只能有一种排列顺序。</li>\\n</ul>\\n<h3>特点</h3>\\n<ul>\\n<li>在 InnoDB 中，主键索引就是聚簇索引，InnoDB 会自动将主键列作为聚簇索引。</li>\\n<li>如果没有定义主键，InnoDB 会尝试使用一个唯一的非空索引作为聚簇索引，如果表中没有主键或者唯一非空索引，InnoDB 会自动隐式生成一个 <code>row_id</code> 作为聚簇索引。</li>\\n</ul>","autoDesc":true}');export{c as comp,d as data};
