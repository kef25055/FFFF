const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":215,\"nextId\":215,\"documentIds\":{\"0\":\"3\",\"1\":\"4\",\"2\":\"5\",\"3\":\"6\",\"4\":\"7\",\"5\":\"8\",\"6\":\"8#📌准备工作\",\"7\":\"8#🔥下载node-js\",\"8\":\"8#🔥添加两个文件夹\",\"9\":\"8#🔥环境变量\",\"10\":\"8#🔥修改缓存目录和全局目录\",\"11\":\"8#📌搭建项目\",\"12\":\"8#🔥初始化项目\",\"13\":\"8#🔥安装依赖\",\"14\":\"8#📌部署到github\",\"15\":\"8#🔥新建仓库\",\"16\":\"8#🔥推送代码到github\",\"17\":\"8#🔥使用-github-pages-发布站点\",\"18\":\"9\",\"19\":\"10\",\"20\":\"10#一、操作系统中的进程与线程\",\"21\":\"10#二、为什么使用多线程\",\"22\":\"10#_1-单线程的局限\",\"23\":\"10#_2-多线程的优势\",\"24\":\"10#三、c-中的多线程\",\"25\":\"10#🎯std-thread-常用函数\",\"26\":\"10#_1-std-thread-默认构造函数\",\"27\":\"10#_2-std-thread-fn-f-args-args-创建线程\",\"28\":\"11\",\"29\":\"11#📌std-auto-ptr-已废弃\",\"30\":\"11#基本原理\",\"31\":\"11#模拟实现\",\"32\":\"11#📌std-unique-ptr\",\"33\":\"11#基本原理-1\",\"34\":\"11#模拟实现-1\",\"35\":\"11#📌std-shared-ptr\",\"36\":\"11#基本原理-2\",\"37\":\"11#模拟实现-2\",\"38\":\"11#std-shared-ptr的循环引用问题\",\"39\":\"11#解决方法-使用-std-weak-ptr\",\"40\":\"11#📌std-weak-ptr\",\"41\":\"11#基本原理-3\",\"42\":\"12\",\"43\":\"13\",\"44\":\"13#一、什么是进程-process\",\"45\":\"13#✅定义\",\"46\":\"13#✅组成结构\",\"47\":\"13#✅进程的生命周期-状态图\",\"48\":\"13#二、什么是线程-thread\",\"49\":\"13#✅定义-1\",\"50\":\"13#✅每个线程独有的资源\",\"51\":\"13#✅多个线程共享的资源\",\"52\":\"13#三、进程-vs-线程对比\",\"53\":\"13#为什么操作系统需要-线程\",\"54\":\"13#四、进程与线程的调度机制\",\"55\":\"13#_1-时间片轮转调度-round-robin\",\"56\":\"13#_2-抢占式调度\",\"57\":\"13#_3-非抢占式调度\",\"58\":\"13#_4-多级反馈队列调度-mlfq\",\"59\":\"13#五、线程模型与实现方式\",\"60\":\"13#_1-用户级线程-user-level-thread\",\"61\":\"13#_2-内核级线程-kernel-level-thread\",\"62\":\"13#_3-混合模型-hybrid-model\",\"63\":\"13#六、进程间通信-ipc\",\"64\":\"13#常见ipc方式如下\",\"65\":\"13#七、进程与线程的世纪应用\",\"66\":\"13#八、线程-进程可能遇到的问题\",\"67\":\"13#_1-竞态条件-race-condition\",\"68\":\"13#_2-死锁-deadlock\",\"69\":\"13#_3-活锁-饥饿\",\"70\":\"13#_4-创建过多线程\",\"71\":\"14\",\"72\":\"14#mvcc\",\"73\":\"14#undo-log-多版本链\",\"74\":\"14#readview\",\"75\":\"15\",\"76\":\"15#什么是事务\",\"77\":\"15#事务的四大特性acid\",\"78\":\"15#原子性-atomicity\",\"79\":\"15#一致性-consistency\",\"80\":\"15#隔离性-isolation\",\"81\":\"15#持久性-durability\",\"82\":\"15#并发事务问题\",\"83\":\"15#脏写-更新丢失\",\"84\":\"15#脏读\",\"85\":\"15#不可重复读\",\"86\":\"15#幻读\",\"87\":\"15#事务隔离级别\",\"88\":\"15#未提交读\",\"89\":\"15#提交读\",\"90\":\"15#可重复读-mysql默认\",\"91\":\"15#串行化\",\"92\":\"16\",\"93\":\"17\",\"94\":\"17#概念\",\"95\":\"17#优势\",\"96\":\"17#空间和性能优化\",\"97\":\"17#覆盖索引\",\"98\":\"17#筛选效率\",\"99\":\"17#注意事项\",\"100\":\"17#最左匹配原则\",\"101\":\"17#避免范围查询中断\",\"102\":\"18\",\"103\":\"18#聚簇索引\",\"104\":\"18#定义\",\"105\":\"18#特点\",\"106\":\"18#工作原理\",\"107\":\"18#优点\",\"108\":\"18#缺点\",\"109\":\"18#非聚簇索引\",\"110\":\"18#定义-1\",\"111\":\"18#特点-1\",\"112\":\"18#工作原理-1\",\"113\":\"18#优点-1\",\"114\":\"18#缺点-1\",\"115\":\"19\",\"116\":\"19#简要题面\",\"117\":\"19#题面\",\"118\":\"19#输入描述\",\"119\":\"19#输出描述\",\"120\":\"19#输入输出样例\",\"121\":\"19#输入-1\",\"122\":\"19#输出-1\",\"123\":\"19#说明-提示\",\"124\":\"19#解法\",\"125\":\"19#定义状态\",\"126\":\"19#转移方程\",\"127\":\"19#参考程序\",\"128\":\"20\",\"129\":\"21\",\"130\":\"21#简要题面\",\"131\":\"21#题面\",\"132\":\"21#输入描述\",\"133\":\"21#输出描述\",\"134\":\"21#输入输出样例\",\"135\":\"21#输入-1\",\"136\":\"21#输出-1\",\"137\":\"21#说明-提示\",\"138\":\"21#解法\",\"139\":\"21#参考程序\",\"140\":\"22\",\"141\":\"22#简要题面\",\"142\":\"22#题面\",\"143\":\"22#输入描述\",\"144\":\"22#输出描述\",\"145\":\"22#输入输出样例\",\"146\":\"22#输入-1\",\"147\":\"22#输出-1\",\"148\":\"22#输入-2\",\"149\":\"22#输出-2\",\"150\":\"22#说明-提示\",\"151\":\"22#解法\",\"152\":\"22#参考程序\",\"153\":\"23\",\"154\":\"23#简要题面\",\"155\":\"23#题面\",\"156\":\"23#输入描述\",\"157\":\"23#输出描述\",\"158\":\"23#输入输出样例\",\"159\":\"23#输入-1\",\"160\":\"23#输出-1\",\"161\":\"23#说明-提示\",\"162\":\"23#解法\",\"163\":\"23#参考程序\",\"164\":\"24\",\"165\":\"24#简要题面\",\"166\":\"24#题面\",\"167\":\"24#输入描述\",\"168\":\"24#输出描述\",\"169\":\"24#输入输出样例\",\"170\":\"24#输入-1\",\"171\":\"24#输出-1\",\"172\":\"24#说明-提示\",\"173\":\"24#解法\",\"174\":\"24#参考程序\",\"175\":\"25\",\"176\":\"25#_1-股神小易\",\"177\":\"25#题面\",\"178\":\"25#解法\",\"179\":\"25#参考程序\",\"180\":\"25#_2-2048\",\"181\":\"25#题面-1\",\"182\":\"25#解法-1\",\"183\":\"25#参考程序-1\",\"184\":\"25#_3-星际探险\",\"185\":\"25#题面-2\",\"186\":\"25#解法-2\",\"187\":\"25#参考程序-2\",\"188\":\"26\",\"189\":\"27\",\"190\":\"27#📌安装所需软件\",\"191\":\"27#🔥anacoda3\",\"192\":\"27#🔥pycharm\",\"193\":\"27#📌安装环境\",\"194\":\"27#🔥cuda\",\"195\":\"27#🔥cudnn\",\"196\":\"27#📌安装环境-1\",\"197\":\"27#🔥创建虚拟环境\",\"198\":\"27#🔥安装pytorch-gpu版\",\"199\":\"27#🔥安装ultralytics库\",\"200\":\"27#📌源码及使用环境\",\"201\":\"27#🔥下载yolo11源码\",\"202\":\"27#🔥pycharm导入环境\",\"203\":\"27#📌验证环境\",\"204\":\"27#🔥numpy版本问题\",\"205\":\"28\",\"206\":\"28#📌数据集\",\"207\":\"28#🔥免费数据集网站-——-roboflow\",\"208\":\"28#🔥导入数据集\",\"209\":\"28#📌模型训练\",\"210\":\"28#🔥训练代码\",\"211\":\"28#🔥测试代码\",\"212\":\"29\",\"213\":\"30\",\"214\":\"31\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,1],\"1\":[1,1],\"2\":[1,1],\"3\":[1,1],\"4\":[1,1],\"5\":[1],\"6\":[1],\"7\":[2,3],\"8\":[1,6],\"9\":[1,28],\"10\":[1,16],\"11\":[1],\"12\":[1,41],\"13\":[1,111],\"14\":[1],\"15\":[1,14],\"16\":[1,44],\"17\":[4,14],\"18\":[1,1],\"19\":[1],\"20\":[2,3],\"21\":[3,7],\"22\":[2,7],\"23\":[2,11],\"24\":[2,8],\"25\":[2,56],\"26\":[2,9],\"27\":[2],\"28\":[1,13],\"29\":[5],\"30\":[1,34],\"31\":[1,28],\"32\":[3],\"33\":[1,24],\"34\":[1,28],\"35\":[3],\"36\":[1,31],\"37\":[1,36],\"38\":[3,41],\"39\":[2,12],\"40\":[3],\"41\":[1,57],\"42\":[1,1],\"43\":[1],\"44\":[4],\"45\":[1,12],\"46\":[1,22],\"47\":[3,14],\"48\":[4],\"49\":[1,10],\"50\":[1,6],\"51\":[1,4],\"52\":[4,24],\"53\":[3,13],\"54\":[2,6],\"55\":[5,3],\"56\":[2,1],\"57\":[2,2],\"58\":[4,2],\"59\":[2],\"60\":[6,7],\"61\":[6,5],\"62\":[5,5],\"63\":[4,3],\"64\":[2,38],\"65\":[2,18],\"66\":[3],\"67\":[5,2],\"68\":[4,7],\"69\":[3,2],\"70\":[2,2],\"71\":[1],\"72\":[1,22],\"73\":[3,15],\"74\":[1,82],\"75\":[1],\"76\":[2,12],\"77\":[1],\"78\":[3,11],\"79\":[3,5],\"80\":[3,20],\"81\":[3,4],\"82\":[1,9],\"83\":[2,18],\"84\":[1,13],\"85\":[1,12],\"86\":[1,11],\"87\":[1,5],\"88\":[1,6],\"89\":[1,4],\"90\":[3,6],\"91\":[1,6],\"92\":[1,1],\"93\":[1],\"94\":[1,13],\"95\":[1],\"96\":[1,10],\"97\":[1,19],\"98\":[1,4],\"99\":[1,15],\"100\":[1,7],\"101\":[1,25],\"102\":[2],\"103\":[1],\"104\":[1,6],\"105\":[1,13],\"106\":[1,8],\"107\":[1,10],\"108\":[1,9],\"109\":[1],\"110\":[1,6],\"111\":[1,6],\"112\":[1,11],\"113\":[1,8],\"114\":[1,9],\"115\":[1],\"116\":[1,3],\"117\":[1,28],\"118\":[1,7],\"119\":[1,4],\"120\":[1],\"121\":[2,2],\"122\":[2,1],\"123\":[2],\"124\":[1],\"125\":[1,10],\"126\":[1,31],\"127\":[1,60],\"128\":[1,1],\"129\":[1],\"130\":[1,1],\"131\":[1,24],\"132\":[1,4],\"133\":[1,5],\"134\":[1],\"135\":[2,1],\"136\":[2,1],\"137\":[2],\"138\":[1,29],\"139\":[1,45],\"140\":[1],\"141\":[1,3],\"142\":[1,25],\"143\":[1,5],\"144\":[1,3],\"145\":[1],\"146\":[2,5],\"147\":[2,1],\"148\":[2,4],\"149\":[2,3],\"150\":[2,3],\"151\":[1,57],\"152\":[1,93],\"153\":[1],\"154\":[1],\"155\":[1,25],\"156\":[1,4],\"157\":[1,2],\"158\":[1],\"159\":[2,5],\"160\":[2,2],\"161\":[2],\"162\":[1],\"163\":[1,38],\"164\":[1],\"165\":[1],\"166\":[1,17],\"167\":[1,12],\"168\":[1,12],\"169\":[1],\"170\":[2,3],\"171\":[2,4],\"172\":[2],\"173\":[1],\"174\":[1,29],\"175\":[1],\"176\":[2],\"177\":[1,7],\"178\":[1,4],\"179\":[1,45],\"180\":[2],\"181\":[1,1],\"182\":[1,9],\"183\":[1,75],\"184\":[2],\"185\":[1,10],\"186\":[1,2],\"187\":[1,56],\"188\":[1,1],\"189\":[1,2],\"190\":[1],\"191\":[1,23],\"192\":[1,7],\"193\":[1],\"194\":[1,33],\"195\":[1,20],\"196\":[1],\"197\":[1,12],\"198\":[3,27],\"199\":[1,5],\"200\":[1],\"201\":[1,6],\"202\":[1,3],\"203\":[1,35],\"204\":[1,20],\"205\":[1],\"206\":[1],\"207\":[2,8],\"208\":[1,26],\"209\":[1],\"210\":[1,87],\"211\":[1,45],\"212\":[1,3],\"213\":[2],\"214\":[1]},\"averageFieldLength\":[1.5581395348837206,15.484355452199424],\"storedFields\":{\"0\":{\"h\":\"友链\",\"t\":[\"小鸡的朋友们✨\"]},\"1\":{\"h\":\"文档\",\"t\":[\"欢迎来到小鸡的个人文档✨\"]},\"2\":{\"h\":\"笔记\",\"t\":[\"欢迎来到小鸡的学习笔记✨\"]},\"3\":{\"h\":\"题解\",\"t\":[\"欢迎来到小鸡的题解专题✨\"]},\"4\":{\"h\":\"项目\",\"t\":[\"欢迎来到小鸡的项目笔记✨\"]},\"5\":{\"h\":\"使用VuePress搭建个人博客\"},\"6\":{\"h\":\"📌准备工作\"},\"7\":{\"h\":\"🔥下载Node.js\",\"t\":[\"下载地址：node.js\"]},\"8\":{\"h\":\"🔥添加两个文件夹\",\"t\":[\"在安装路径的根目录下新建 node_cache 和 node_global 文件夹\"]},\"9\":{\"h\":\"🔥环境变量\",\"t\":[\"在系统变量里新建 NODE_HOME ,变量值为刚刚的安装路径 D:\\\\Nodejs\",\"在系统变量的 path 中添加:\",\"%NODE_HOME%\",\"%NODE_HOME%node_cache\",\"%NODE_HOME%node_global\",\"将用户变量的 path 中默认的 C:\\\\User\\\\35025\\\\AppDate\\\\Roaming\\\\npm 改为 node_global 的路径 D:\\\\Nodejs\\\\node_global\",\"在 cmd 窗口输入 node -v 和 npm -v ,能够正确显示版本号说明安装成功\"]},\"10\":{\"h\":\"🔥修改缓存目录和全局目录\",\"t\":[\"用管理员模式打开 cmd 窗口执行以下指令\",\"设置缓存到 node_cache 文件夹：\",\"npm config set cache \\\"D:\\\\Nodejs\\\\node_cache\\\"\",\"设置全局模块的安装路径到 node_global 文件夹：\",\"npm config set prefix \\\"D:\\\\Nodejs\\\\node_global\\\"\"]},\"11\":{\"h\":\"📌搭建项目\"},\"12\":{\"h\":\"🔥初始化项目\",\"t\":[\"使用 vuepress-theme-hope 主题提供的脚手架工具创建项目\",\"用管理员模式打开 cmd 窗口\",\"切换到想要放置项目的路径\",\"例如要切换到 E:\\\\Project ，执行 e: 切换到 E 盘，执行 cd Project 进入 Project 目录\",\"执行以下命令：\",\"npm init vuepress-theme-hope blogs\",\"这里的 blogs 是你项目所在的文件夹名称，可以换\",\"选择一些默认的配置：\",\"选择包管理器 npm\",\"设置协议 MIT\",\"项目需要用到多语言么 NO\",\"你想要创建什么类型的项目 docs\",\"是否需要一个自动部署文档到 GitHub Pages 的工作流 YES\",\"选择你想使用的源 当前源\"]},\"13\":{\"h\":\"🔥安装依赖\",\"t\":[\"由于一个个安装容易导致依赖冲突，所以直接一步到位\",\"打开刚刚下载下来的 blogs 文件夹，修改 src 目录下的 package.json 文件为以下内容\",\"{ \\\"name\\\": \\\"vuepress-theme-hope-template\\\", \\\"description\\\": \\\"A project of vuepress-theme-hope\\\", \\\"version\\\": \\\"2.0.0\\\", \\\"license\\\": \\\"MIT\\\", \\\"type\\\": \\\"module\\\", \\\"scripts\\\": { \\\"docs:build\\\": \\\"vuepress-vite build src\\\", \\\"docs:clean-dev\\\": \\\"vuepress-vite dev src --clean-cache\\\", \\\"docs:dev\\\": \\\"vuepress-vite dev src\\\", \\\"docs:update-package\\\": \\\"npx vp-update\\\" }, \\\"devDependencies\\\": { \\\"@types/katex\\\": \\\"0.16.7\\\", \\\"@vue/repl\\\": \\\"4.4.2\\\", \\\"@vuepress/bundler-vite\\\": \\\"2.0.0-rc.15\\\", \\\"@vuepress/bundler-webpack\\\": \\\"2.0.0-rc.15\\\", \\\"@vuepress/helper\\\": \\\"2.0.0-rc.47\\\", \\\"@vuepress/plugin-feed\\\": \\\"2.0.0-rc.47\\\", \\\"@vuepress/plugin-revealjs\\\": \\\"2.0.0-rc.48\\\", \\\"@vueuse/core\\\": \\\"11.1.0\\\", \\\"@waline/client\\\": \\\"^3.3.2\\\", \\\"artplayer\\\": \\\"5.1.7\\\", \\\"echarts-wordcloud\\\": \\\"2.1.0\\\", \\\"flowchart.ts\\\": \\\"3.0.1\\\", \\\"katex\\\": \\\"0.16.11\\\", \\\"kotlin-playground\\\": \\\"1.30.0\\\", \\\"markmap-lib\\\": \\\"0.17.0\\\", \\\"markmap-toolbar\\\": \\\"0.17.0\\\", \\\"markmap-view\\\": \\\"0.17.0\\\", \\\"mermaid\\\": \\\"11.2.1\\\", \\\"sandpack-vue3\\\": \\\"3.1.11\\\", \\\"sass-embedded\\\": \\\"1.79.3\\\", \\\"sass-loader\\\": \\\"16.0.2\\\", \\\"vue\\\": \\\"3.5.8\\\", \\\"vuepress\\\": \\\"2.0.0-rc.15\\\", \\\"vuepress-plugin-components\\\": \\\"2.0.0-rc.54\\\", \\\"vuepress-plugin-md-enhance\\\": \\\"2.0.0-rc.54\\\", \\\"vuepress-plugin-search-pro\\\": \\\"^2.0.0-rc.54\\\", \\\"vuepress-shared\\\": \\\"2.0.0-rc.54\\\", \\\"vuepress-theme-hope\\\": \\\"2.0.0-rc.56\\\" } }\",\"\\\"devDependencies\\\" 里面的内容不要改，直接复制粘贴就好\",\"用管理员模式在项目根目录执行以下命令，等待自动下载：\",\"npm install\",\"下载完成后执行以下命令即可在本地打开博客：\",\"npm run docs:dev\",\"执行过程中出现 vuepress-theme-hope: ✖ @vuepress/plugin-redirect is not installed! 的报错是正常的，不需要管，也不要下载这个插件\"]},\"14\":{\"h\":\"📌部署到Github\"},\"15\":{\"h\":\"🔥新建仓库\",\"t\":[\"如果使用的仓库名与用户名不相同，需要修改 src 目录下 config.ts 文件中的 base 路径信息为：\",\"base: \\\"/你的仓库名/\\\",\",\"新建仓库的时候不要创建 README.md 文件\"]},\"16\":{\"h\":\"🔥推送代码到Github\",\"t\":[\"首先测试一下，当前能不能正确的静态部署\",\"npm run docs:build\",\"初始化 Git 仓库\",\"git init\",\"连接到远程仓库\",\"git remote add origin 你的仓库地址\",\"将当前目录下的所有更改（包括新增、修改或删除的文件）添加到暂存区，准备进行下一次提交\",\"git add .\",\"如果出现有关CRLF、LF之类换行符的报错，执行以下命令之一：\",\"git config --global core.autocrlf true\",\"git add --renormalize .\",\"将当前暂存区中的更改提交到本地 Git 仓库\",\"git commit -m \\\"提交信息\\\"\",\"将本地 Git 仓库中的更改推送到远程仓库\",\"git push origin main\",\"这里的 main 是本地分支名称，如果本地分支不是 main 自行修改，本地分支名称可以在这里查看：\"]},\"17\":{\"h\":\"🔥使用 Github Pages 发布站点\",\"t\":[\"上一步完成推送后，应该会自动生成 gh-pages 分支，前往 GitHub 仓库的设置页面，选择 gh-pages 作为 GitHub Pages 的源。\",\"等待自动部署完成后在当前页面即可访问站点。\"]},\"18\":{\"h\":\"C++\",\"t\":[\"以下是小鸡的C++学习笔记\"]},\"19\":{\"h\":\"多线程编程\"},\"20\":{\"h\":\"一、操作系统中的进程与线程\",\"t\":[\"在另一篇里介绍过了\",\"点击查看👇\",\"操作系统中的进程与线程\"]},\"21\":{\"h\":\"二、为什么使用多线程？\",\"t\":[\"多线程是一种允许程序并发执行多个任务的技术。相比多进程，它更加轻质量，可以提高程序在多核 CPU 上的执行效率。\"]},\"22\":{\"h\":\"1.单线程的局限\",\"t\":[\"执行任务被阻塞（如读取文件、等待网络）\",\"无法利用多核 CPU\",\"响应慢、效率低\"]},\"23\":{\"h\":\"2.多线程的优势\",\"t\":[\"任务并发执行，响应更快\",\"提高 CPU 使用率\",\"解耦复杂逻辑（界面、计算、IO 分离）\"]},\"24\":{\"h\":\"三、C++中的多线程\",\"t\":[\"在 C++11 之后，标准库引入了 std::thread 类来进行多线程编程。\"]},\"25\":{\"h\":\"🎯 常用函数\",\"t\":[\"函数\",\"类别\",\"功能简介\",\"std::thread()\",\"构造函数\",\"默认构造，不启动任何线程\",\"std::thread(Fn&& f, Args&&... args)\",\"构造函数\",\"创建线程并异步执行函数 f(args...)\",\"~thread()\",\"析构函数\",\"销毁线程对象，若线程仍可 joinable 未处理，会调用 std::terminate()\",\"join()\",\"成员函数\",\"阻塞当前线程，直到该线程执行完毕并回收资源\",\"detach()\",\"成员函数\",\"将线程与 std::thread 对象分离，后台运行，不可再 join()\",\"joinable()\",\"成员函数\",\"检查线程是否处于可 join 状态\",\"get_id()\",\"成员函数\",\"获取线程的唯一 ID，用于调试或标识线程\",\"thread(thread&& other)\",\"移动构造\",\"移动构造函数，将线程所有权从 other 转移\",\"operator=(thread&& other)\",\"移动赋值\",\"移动赋值操作，同样实现线程对象所有权转移\",\"std::thread::hardware_concurrency()\",\"静态函数\",\"返回系统建议的并发线程数（即 CPU 核心数，结果可能为 0）\"]},\"26\":{\"h\":\"1. 默认构造函数\",\"t\":[\"std::thread t; // 创建一个不绑定任何任务的空线程对象\",\"📌作用：构造一个空的 thread 对象，可以后续再赋值移动进其他线程。\"]},\"27\":{\"h\":\"2. 创建线程\"},\"28\":{\"h\":\"智能指针\",\"t\":[\"C++ 智能指针是用于自动管理动态资源（主要是堆内存）的对象，能够有效防止资源泄漏和重复释放问题。 常见的智能指针包括 auto_ptr、unique_ptr、shared_ptr 和 weak_ptr 。\"]},\"29\":{\"h\":\"📌std::auto_ptr（已废弃）\"},\"30\":{\"h\":\"基本原理\",\"t\":[\"auto_ptr 通过管理权转移的方式避免资源重复释放： 在拷贝时将资源的所有权从一个对象转移给另一个对象，原来的对象指针被置为 nullptr， 确保资源仅被释放一次。\",\"如下例所示，ap1 的所有权被转移给 ap2，ap1 变为 nullptr：\",\"int main() { std::auto_ptr<int> ap1(new int(1)); std::auto_ptr<int> ap2(ap1); *ap2 = 10; //*ap1 = 20; // error ，ap1 已经为 nullptr return 0; }\",\"然而，这种隐式的资源转移容易导致悬空指针或程序崩溃，很多公司已禁止使用。 C++11 后 auto_ptr 被 unique_ptr 所取代。\"]},\"31\":{\"h\":\"模拟实现\",\"t\":[\"namespace ff { template<class T> class auto_ptr { public: auto_ptr(T* ptr = nullptr) :m_ptr(ptr) {} ~auto_ptr() { if (m_ptr != nullptr) { std::cout << \\\"delete: \\\" << m_ptr << std::endl; delete m_ptr; m_ptr = nullptr; } } auto_ptr(auto_ptr<T>& ap) :m_ptr(ap.m_ptr) { ap.m_ptr = nullptr; } auto_ptr<T>& operator=(auto_ptr<T>& ap) { if (this != &ap) { delete m_ptr; m_ptr = ap.m_ptr; ap.m_ptr = nullptr; } return *this; } T& operator*() { return *m_ptr; } T* operator->() { return &m_ptr; } private: T* m_ptr; }; }\"]},\"32\":{\"h\":\"📌std::unique_ptr\"},\"33\":{\"h\":\"基本原理\",\"t\":[\"unique_ptr 通过禁止拷贝的方式确保资源的唯一拥有权，从而防止重复释放。如下例：\",\"int main() { std::unique_ptr<int> up1 = std::make_unique<int>(0); //std::unique_ptr<int> up2(up1); // 编译错误 return 0; }\",\"但防拷贝其实也不是一个很好的办法，因为总有一些场景需要进行拷贝。 如果想要共享资源，就需要用到 shared_ptr 了。\"]},\"34\":{\"h\":\"模拟实现\",\"t\":[\"namespace ff { template<class T> class unique_ptr { public: unique_ptr(T* ptr = nullptr) :m_ptr(ptr) {} ~unique_ptr() { if (m_ptr != nullptr) { std::cout << \\\"delete: \\\" << m_ptr << std::endl; delete m_ptr; m_ptr = nullptr; } } T& operator*() { return *m_ptr; } T* operator->() { return &m_ptr; } // 禁止拷贝构造与赋值 unique_ptr(unique_ptr<T>& up) = delete; unique_ptr<T>& operator=(unique_ptr<T>& up) = delete; private: T* m_ptr; }; }\"]},\"35\":{\"h\":\"📌std::shared_ptr\"},\"36\":{\"h\":\"基本原理\",\"t\":[\"shared_ptr 采用引用计数机制管理资源：\",\"每块资源关联一个引用计数，记录当前有多少个 shared_ptr 实例共享该资源；\",\"拷贝时引用计数 +1，析构或重新赋值时 -1；\",\"当引用计数降为 0，资源自动释放。\",\"int main() { std::shared_ptr<int> sp1 = std::make_shared<int>(1); { std::shared_ptr<int> sp2(sp1); std::cout << sp1.use_count() << std::endl; // 输出2 } std::cout << sp1.use_count() << std::endl; // 输出1 return 0; }\"]},\"37\":{\"h\":\"模拟实现\",\"t\":[\"namespace ff { template<class T> class shared_ptr { public: shared_ptr(T* ptr = nullptr) : m_ptr(ptr) , m_count(new int(1)) {} ~shared_ptr() { if (--(*m_count) == 0) { if (m_ptr != nullptr) { std::cout << \\\"delete: \\\" << m_ptr << std::endl; delete m_ptr; m_ptr = nullptr; } delete m_count; m_count = nullptr; } } shared_ptr(shared_ptr<T>& sp) : m_ptr(sp.m_ptr) , m_count(sp.m_count) { (*m_count)++; } shared_ptr<T>& operator=(shared_ptr<T>& sp) { if (m_ptr != sp.m_ptr) { if (--(*m_count) == 0) { if (m_ptr != nullptr) { std::cout << \\\"delete:\\\" << m_ptr << std::endl; delete m_ptr; delete m_count; } } m_ptr = sp.m_ptr; m_count = sp.m_count; (*m_count)++; } return *this; } int use_count() { return *m_count; } T& operator*() { return *m_ptr; } T* operator->() { return &m_ptr; } private: T* m_ptr; int* m_count; }; }\"]},\"38\":{\"h\":\"std::shared_ptr的循环引用问题\",\"t\":[\"在某些场景中，多个 shared_ptr 对象可能会相互引用，从而形成循环引用，导致引用计数无法归零，资源泄露。\",\"例如双向链表节点：\",\"struct Point { std::shared_ptr<Point> m_prev; std::shared_ptr<Point> m_next; int m_value; Point(int value) : m_value(value) , m_prev(nullptr) , m_next(nullptr) {} ~Point() { std::cout << \\\"delete: \\\" << m_value << std::endl; } }; int main() { std::shared_ptr<Point> sp1 = std::make_shared<Point>(1); std::shared_ptr<Point> sp2 = std::make_shared<Point>(2); sp1->m_next = sp2; sp2->m_prev = sp1; return 0; }\",\"上述代码中，sp1 和 sp2 相互引用，导致它们的引用计数始终不为 0，程序结束时资源也不会被释放。\"]},\"39\":{\"h\":\"解决方法：使用\",\"t\":[\"std::weak_ptr 是一种不拥有资源的智能指针，可以打破循环引用链。 在设计结构中，建议将一方（通常是“父”指针）改为 weak_ptr。\"]},\"40\":{\"h\":\"📌std::weak_ptr\"},\"41\":{\"h\":\"基本原理\",\"t\":[\"weak_ptr 是为了解决 shared_ptr 的循环引用问题而引入的辅助智能指针，它不拥有资源的所有权，不会影响引用计数。\",\"通过 weak_ptr 观察一个由 shared_ptr 管理的对象，可以在需要时临时提升为 shared_ptr 使用， 如果资源已释放，提升会失败，避免了悬空指针和资源泄露。\",\"使用 lock() 方法可以将 weak_ptr 升级为 shared_ptr，如下所示：\",\"int main() { std::shared_ptr<int> sp = std::make_shared<int>(10); std::weak_ptr<int> wp = sp; if (auto temp = wp.lock()) // 成功提升为 std::shared_ptr { std::cout << *temp << std::endl; } else { std::cout << \\\"资源已释放。\\\" << std::endl; } return 0; }\",\"在解决循环引用时，可以将一方的 shared_ptr 替换为 weak_ptr， 如下改写双向链表的例子：\",\"struct Point { std::weak_ptr<Point> m_prev; // 弱引用，不影响引用计数 std::shared_ptr<Point> m_next; int m_value; Point(int value) : m_value(value) , m_prev{} , m_next(nullptr) {} ~Point() { std::cout << \\\"delete: \\\" << m_value << std::endl; } };\"]},\"42\":{\"h\":\"操作系统\",\"t\":[\"以下是小鸡的操作系统学习笔记\"]},\"43\":{\"h\":\"进程与线程\"},\"44\":{\"h\":\"一、什么是进程(Process)\"},\"45\":{\"h\":\"✅定义\",\"t\":[\"进程是操作系统资源分配的最小单位，是一个正在运行的程序实例。\",\"一个程序在执行时，操作系统会为它分配专属的资源（内存、文件描述符、CPU 时间等），这个资源集合 + 执行状态就组成了一个进程。\"]},\"46\":{\"h\":\"✅组成结构\",\"t\":[\"一个进程通常包括：\",\"组成部分\",\"描述\",\"程序代码\",\"可执行指令\",\"数据段\",\"全局变量、静态变量等\",\"堆(Heap)\",\"动态分配内存(如 malloc/new)\",\"栈(Stack)\",\"函数调用、局部变量、返回地址等\",\"PCB(进程控制块)\",\"操作系统内保存该进程的元信息\"]},\"47\":{\"h\":\"✅进程的生命周期（状态图）\",\"t\":[\"状态\",\"描述\",\"新建\",\"正在创建中的进程\",\"就绪\",\"等待被调度运行\",\"执行\",\"正在CPU上执行\",\"阻塞\",\"等待事件（如IO、信号）\",\"终止\",\"执行完成或被杀死\"]},\"48\":{\"h\":\"二、什么是线程(Thread)\"},\"49\":{\"h\":\"✅定义\",\"t\":[\"线程是系统调度的最小单位，是程序的一个执行流。\",\"一个线程属于某个进程。多个线程共享进程的资源，但每个线程也有自己的执行状态。也称为轻量级进程（LWP: Lightweight Process）。\"]},\"50\":{\"h\":\"✅每个线程独有的资源\",\"t\":[\"程序计数器(PC)\",\"寄存器\",\"堆栈(Stack)\"]},\"51\":{\"h\":\"✅多个线程共享的资源\",\"t\":[\"代码段\",\"数据段\",\"堆\",\"文件描述符等\"]},\"52\":{\"h\":\"三、进程 vs 线程对比\",\"t\":[\"进程\",\"线程\",\"基本概念\",\"独立的运行单位，资源分配和拥有的基本单位\",\"程序执行的基本单位，进程中的执行单位\",\"内存空间\",\"拥有独立的内存空间\",\"共享进程的内存空间\",\"系统开销\",\"创建/切换开销较大\",\"创建/切换开销较小\",\"通信方式\",\"进程间通信较复杂，需要借助操作系统\",\"同一进程内通信非常简单，可以直接读写进程数据段\",\"稳定性\",\"稳定性高，一个进程崩溃不影响其他进程\",\"稳定性低，一个线程崩溃可能影响整个进程\"]},\"53\":{\"h\":\"为什么操作系统需要“线程”？\",\"t\":[\"提高并发性：线程可以在多核 CPU 上并行执行，提高系统效率。\",\"资源利用率高：多个线程共享资源，减少冗余。\",\"响应更快：比如点击按钮后，界面不卡顿，因为有专门的线程处理用户输入。\"]},\"54\":{\"h\":\"四、进程与线程的调度机制\",\"t\":[\"操作系统中，调度是关键。它决定哪个任务被 CPU 执行。\"]},\"55\":{\"h\":\"1.时间片轮转调度(Round-Robin)\",\"t\":[\"每个进程/线程获得一段时间\",\"时间到就切换\"]},\"56\":{\"h\":\"2.抢占式调度\",\"t\":[\"高优先级任务会中断低优先级任务\"]},\"57\":{\"h\":\"3.非抢占式调度\",\"t\":[\"直到任务完成/放弃控制权才切换\"]},\"58\":{\"h\":\"4.多级反馈队列调度(MLFQ)\",\"t\":[\"根据行为调整优先级，响应快又能防饿死\"]},\"59\":{\"h\":\"五、线程模型与实现方式\"},\"60\":{\"h\":\"1.用户级线程(User-Level Thread)\",\"t\":[\"线程由用户库管理（非操作系统）\",\"切换快，不依赖内核\",\"缺点：一个线程阻塞，整个进程阻塞\"]},\"61\":{\"h\":\"2.内核级线程(Kernel-Level Thread)\",\"t\":[\"线程由操作系统内核调度\",\"真正的并行性（适配多核）\",\"切换慢，开销大\"]},\"62\":{\"h\":\"3.混合模型(Hybrid Model)\",\"t\":[\"常见于现代系统，如Linux/NPTL\",\"用户管理线程池，内核调度轻量线程\"]},\"63\":{\"h\":\"六、进程间通信(IPC)\",\"t\":[\"由于进程是独立内存空间，需要借助操作系统机制来通信。\"]},\"64\":{\"h\":\"常见IPC方式如下：\",\"t\":[\"方式\",\"特点\",\"举例用途\",\"管道(Pipe)\",\"父子进程通信，单向\",\"shell管道\",\"命名管道(FIFO)\",\"不相关进程通信，路径命名\",\"系统服务通信\",\"消息队列\",\"操作系统维护消息缓冲区\",\"多任务控制中心\",\"信号量(Semaphore)\",\"同步或互斥控制\",\"控制访问共享资源\",\"共享内存\",\"内存共享，最快，但需同步手段\",\"视频共享、数据库缓存\",\"套接字(Socket)\",\"网络/本地通信通用，最灵活\",\"客户端-服务端模型\",\"信号(Signal)\",\"异步事件通知\",\"kill、闹钟\"]},\"65\":{\"h\":\"七、进程与线程的世纪应用\",\"t\":[\"场景\",\"使用方式\",\"Web服务器\",\"多线程响应请求\",\"浏览器\",\"每个标签页一个进程\",\"视频播放器\",\"解码线程 + 播放线程 + 渲染线程\",\"操作系统自身\",\"守护进程(Process) + 内核线程(Thread)\",\"数据库系统\",\"线程池处理查询请求\"]},\"66\":{\"h\":\"八、线程/进程可能遇到的问题\"},\"67\":{\"h\":\"1.竞态条件(Race Condition)\",\"t\":[\"多线程同时访问数据，未加锁导致数据混乱\"]},\"68\":{\"h\":\"2.死锁(Deadlock)\",\"t\":[\"线程 A 等线程 B 的资源，B 又等 A，互相卡死\"]},\"69\":{\"h\":\"3.活锁/饥饿\",\"t\":[\"一直被抢占或让出，永远得不到执行机会\"]},\"70\":{\"h\":\"4.创建过多线程\",\"t\":[\"比如每个连接都开线程，系统资源耗尽\"]},\"71\":{\"h\":\"MySQL中的可重复读如何实现\"},\"72\":{\"h\":\"MVCC\",\"t\":[\"MVCC，多版本并发控制，用于实现读已提交和可重复读隔离级别。\",\"MVCC 的核心就是 Undo log 多版本链 + ReadView， \\\"MV\\\" 就是通过 Undo log 来保存数据的历史版本，实现多版本的管理， \\\"CC\\\" 是通过 ReadView 来实现管理，通过 ReadView 原则来决定数据是否显示。 同时针对不同的隔离级别，ReadView 的生成策略不同，也就实现了不同的隔离级别。\"]},\"73\":{\"h\":\"Undo log 多版本链\",\"t\":[\"每条数据都有两个隐藏字段：\",\"trx_id:事务 id，记录最近一次更新这条数据的事务 id\",\"roll_pointer:回滚指针，指向之前生成的 undo log\",\"每一条数据都有多个版本，版本之间通过 undo log 链条进行连接。\"]},\"74\":{\"h\":\"ReadView\",\"t\":[\"ReadView 是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistant read view， 用于支持 RC(Read Committed 读提交) 和 RR(Repeatable Read 可重复读) 隔离级别的实现。\",\"ReadView 简单理解就是对数据在某个时刻的状态记录下来。之后获取某时刻的数据就是还原记录的状态，是不会变的。\",\"ReadView 中比较重要的字段有 4 个：\",\"m_ids：用来表示 MySQL 中哪些事务正在执行，但是没有提交。\",\"min_trx_id：就是 m_ids 里最小的值。\",\"max_trx_id：下一个要生成的事务 id 值，也就是最大事务 id。\",\"creator_trx_id：当前事务 id。\",\"当一个事务第一次执行查询 sql 时，会生成一致性视图 read-view（快照）， 查询时从 undo log 中最新的一条记录开始跟 read-view 做对比。 如果不符合比较规则，就根据回滚指针回滚到上一条记录继续比较，直到得到符合条件的查询结果。\",\"ReadView 判断记录某个版本是否可见的规则如下：\",\"如果当前记录的事务 id 落在左侧部分，表示这个版本已经是已提交的事务生成的，可读。\",\"如果当前记录的事务 id 落在右侧部分，表示这个版本是由将来启动的事务生成的，不可读。\",\"如果当前记录的事务 id 落在中间部分，则分为两种情况： \",\"若当前记录的事务 id 在未提交事务的数组中，则此条记录不可读。\",\"若当前记录的事务 id 不在未提交事务的数组中，则此条记录可读。\",\"RC 和 RR 隔离级别都是由 MVCC 实现，区别在于：\",\"RC 隔离级别中，read-view 是每次执行 select 语句时都生成一个\",\"RR 隔离级别中，read-view 是在第一次执行 select 语句时生成一个，同一事务中后面的所有 select 语句都复用这个 read-view\"]},\"75\":{\"h\":\"MySQL事务\"},\"76\":{\"h\":\"什么是事务？\",\"t\":[\"数据库中的事务是指对数据库执行的一批操作，在同一个事务当中，这些操作要么全部执行成功， 要么全部失败，不会存在部分成功的情况。\",\"事务是 一个原子操作，是一个最小执行单元，可以由一个或者多个SQL语句构成。\",\"在同一个事务当中，所有SQL语句都执行成功时整个事务成功，有一个SQL语句执行失败则整个事务执行失败。\"]},\"77\":{\"h\":\"事务的四大特性ACID\"},\"78\":{\"h\":\"原子性(Atomicity)\",\"t\":[\"事务是一个不可分割的工作单位，事务中的操作要么全部执行，要么全部不执行。 这确保了事务的完整性，防止了部分操作成功部分操作失败的情况。\",\"事务是一个完整的操作，事务的各元素是不可分的。\",\"事务中的所有元素必须作为一个整体提交或回滚。\",\"如果事务中的任何元素失败，则整个事务失败。\"]},\"79\":{\"h\":\"一致性(Consistency)\",\"t\":[\"事务前后数据的完整性必须保持一致。一个事务必须使数据库从一个一致性状态变成另一个一致性状态。 在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。\"]},\"80\":{\"h\":\"隔离性(Isolation)\",\"t\":[\"在并发环境中，当不同的事务同时操作相同的数据时，事务之间的操作不会互相影响。\",\"对数据进行修改的所有并发事务是彼此隔离的，表面事务必须是独立的，不以任何方式依赖或影响其他事务。\",\"修改数据的事务可以在另一个使用相同数据的事务开始之前或结束之后访问这些数据。\",\"并发访问数据库时，一个用户的事务不被其他事务干扰，并发事务的数据库之间是独立的。\",\"隔离级别： \",\"未提交读：READ-UNCOMMITTED\",\"提交读：READ-COMMITTED\",\"可重复读：REPEATABLE-READ\",\"串行化：SERIALIZABLE\"]},\"81\":{\"h\":\"持久性(Durability)\",\"t\":[\"事务一旦提交，它对数据库中数据的更改就是永久性的，即使系统发生故障也不会丢失。\"]},\"82\":{\"h\":\"并发事务问题\",\"t\":[\"并发事务是指在数据库系统中，多个事务同时对数据库进行读写和修改的过程。\",\"对于同时允许的多个事务（多线程并发），当这些事务访问数据库中的相同数据时， 如果没有采取必要的隔离机制就会导致各种并发问题（线程安全问题 、共享内存问题）。\"]},\"83\":{\"h\":\"脏写/更新丢失\",\"t\":[\"一个事务修改了另一个事务已经修改但还没有提交的数据，会导致数据不一致和丢失更新的问题。\",\"第一类更新丢失：A，B 事务同时操作一个数据，A 更改完成还没提交，此时 B 更改失败回滚，会将 A 更新的数据也回滚。（事务撤销造成的撤销丢失）\",\"第二类更新丢失：A，B 事务同时操作一个数据，A 更改完成还没提交，此时 B 更改并提交，覆盖了 A 更改的数据。（事务提交造成的覆盖丢失）\"]},\"84\":{\"h\":\"脏读\",\"t\":[\"一个事务读到了另一个事务还未提交的数据。\",\"A，B 事务同时操作一个数据，A 事务修改了某条数据但还未提交，此时B事务访问了该条数据读到的就是 A 修改过后的数据。 若 A 事务回滚，则 B 事务读到的就是脏数据，造成了数据不一致。\"]},\"85\":{\"h\":\"不可重复读\",\"t\":[\"一个事务读到了另一个事务已经提交的更新数据，引起事务中多次查询结果不一致。\",\"A，B 事务同时操作一个数据，A 先查询某条数据，在事务未结束时 B 事务对同一数据修改并提交， 此后 A 再次查询该条数据，两次查询的结果不同。\"]},\"86\":{\"h\":\"幻读\",\"t\":[\"一个事务按相同查询条件重新读取以前检索过的数据，却发现其他事务插入了满足查询条件的新数据。\",\"事务 A 在操作一堆数据的时候，事务 B 插入了一条新数据，事务 A 再次查询时，发现多了一条数据，像是幻觉。\"]},\"87\":{\"h\":\"事务隔离级别\",\"t\":[\"提示\",\"事务隔离级别越高，数据越安全，但是性能越差。\"]},\"88\":{\"h\":\"未提交读\",\"t\":[\"允许脏读，即允许一个事务看到其他事务未提交的修改。 这种隔离级别最低，性能最高，但一致性最差。\"]},\"89\":{\"h\":\"提交读\",\"t\":[\"只允许一个事务看到其他事务已经提交的修改。 这种隔离级别可以防止脏读，但不能防止可重复读和幻读。\"]},\"90\":{\"h\":\"可重复读(MySQL默认)\",\"t\":[\"确保如果一个事务中执行多次相同的 select 语句得到的都是相同的结果。 这种隔离级别可以防止脏读和不可重复读，但不能完全防止幻读。\"]},\"91\":{\"h\":\"串行化\",\"t\":[\"将事务完全隔离，使得它们按顺序执行。 这种隔离级别最高，一致性最好，但性能最差。\"]},\"92\":{\"h\":\"数据库\",\"t\":[\"以下是小鸡的数据库学习笔记\"]},\"93\":{\"h\":\"联合索引\"},\"94\":{\"h\":\"概念\",\"t\":[\"联合索引，也称为复合索引或组合索引，是在数据库中对多个字段同时建立的索引。 这种索引考虑了字段间的顺序，例如索引 (a,b,c) 和索引 (a,c,b) 是两个不同的联合索引。 联合索引的优势在于它可以通过一个索引实现多个字段的索引效果，从而节省存储空间并提高查询效率。\"]},\"95\":{\"h\":\"优势\"},\"96\":{\"h\":\"空间和性能优化\",\"t\":[\"创建一个联合索引 (a,b,c) 相当于同时创建了索引 a，索引 (a,b) 和索引 (a,b,c)。 这样一个索引就能起到多个索引的作用，减少了写操作和磁盘空间的开销。\"]},\"97\":{\"h\":\"覆盖索引\",\"t\":[\"如果查询语句中的选择列完全由联合索引覆盖，比如：\",\"select a,b,c from table where a='xxx' and b='xxx';\",\"MySQL可以直接通过遍历索引获取数据，无需回表，大大减少了随机 IO 操作。\"]},\"98\":{\"h\":\"筛选效率\",\"t\":[\"联合索引可以使得通过索引筛选出来的数据更少，更精确的缩小结果集的范围，从而提高查询效率。\"]},\"99\":{\"h\":\"注意事项\",\"t\":[\"假如我们对 (a,b) 段建立索引，如下图所示：\",\"数据首先按照 a 来排序，在 a 相等的情况下才会按照 b 排序。因此我们可以看到 a 是有序的，而 b 是一种全局无序局部有序的状态。\"]},\"100\":{\"h\":\"最左匹配原则\",\"t\":[\"在使用联合索引时，MySQL 会首先匹配最左边的字段。 如果查询条件中跳过了最左边的字段，索引可能不会被有效利用，因为后面的字段全局无序。\"]},\"101\":{\"h\":\"避免范围查询中断\",\"t\":[\"MySQL 在使用联合索引时，会一直向右匹配直到遇到范围查询（如 >、< 等），这会导致索引的后续部分无法被利用。\",\"当查询 a > 1 and b = 2 时，a 字段能用到索引，b 字段用不到索引。 因为 a 的值此时是一个范围，不是固定的，在这个范围内 b 值不是有序的，因此b字段用不上索引。\"]},\"102\":{\"h\":\"聚簇索引 & 非聚簇索引\"},\"103\":{\"h\":\"聚簇索引\"},\"104\":{\"h\":\"定义\",\"t\":[\"聚簇索引是指数据表中的数据按照索引的顺序排列，索引的叶子节点储存的不仅是索引列的值，还存储整行数据。\",\"每张表只能有一个聚簇索引，因为数据物理上只能有一种排列顺序。\"]},\"105\":{\"h\":\"特点\",\"t\":[\"在 InnoDB 中，主键索引就是聚簇索引，InnoDB 会自动将主键列作为聚簇索引。\",\"如果没有定义主键，InnoDB 会尝试使用一个唯一的非空索引作为聚簇索引，如果表中没有主键或者唯一非空索引，InnoDB 会自动隐式生成一个 row_id 作为聚簇索引。\"]},\"106\":{\"h\":\"工作原理\",\"t\":[\"聚簇索引的叶子节点存储的是完整的数据。因此通过聚簇索引进行查询时，可以直接从索引中找到需要的数据，不需要额外查找步骤。\",\"由于数据和索引一起存储，按主键查询非常高效，查询过程就是遍历聚簇索引找到数据的过程。\"]},\"107\":{\"h\":\"优点\",\"t\":[\"范围查找：由于数据储存在索引的叶子节点中，查询非常快，特别是范围查询效率高，因为数据物理上按顺序存储。\",\"查询效率高，避免二次查找：因为聚簇索引中包含完整数据，某些查询只需要使用聚簇索引就能完成，避免二次查找。\"]},\"108\":{\"h\":\"缺点\",\"t\":[\"插入和更新代价高：由于数据按照索引顺序存储，插入新数据时可能需要调整数据存储位置来维护顺序，因此插入效率比非聚簇索引低。\",\"大字段影响性能：如果表中包含大字段，它们存储在叶子节点中会导致索引体积变大、性能下降。\"]},\"109\":{\"h\":\"非聚簇索引\"},\"110\":{\"h\":\"定义\",\"t\":[\"非聚簇索引是指索引和数据时分开存储的。非聚簇索引的叶子节点存储的是索引列的值和指向实际数据的指针（行号或主键）。\",\"一张表可以有多个非聚簇索引，每个索引都有自己的存储顺序。\"]},\"111\":{\"h\":\"特点\",\"t\":[\"非主键索引在 InnoDB 中就是非聚簇索引，这些索引的叶子节点存储的是索引列的值以及对应的主键值，而不是直接存储数据。\"]},\"112\":{\"h\":\"工作原理\",\"t\":[\"非聚簇索引的叶子节点存储的时索引列的值和指向数据的指针。在 InnoDB 中，这个指针就是该行对应的主键值。 因此在使用非聚簇索引时，MySQL 需要先通过非聚簇索引找到主键值，在通过主键值回到聚簇索引找到实际数据（回表）。\"]},\"113\":{\"h\":\"优点\",\"t\":[\"对于特定列的查询查找速度快：非聚簇索引可以加速对索引列的查找，尤其是对经常作为查询条件的列建立非聚簇索引，可以大大提高查询性能。\",\"灵活性高：一张表可以有多个非聚簇索引，可以加速不同类型的查询。\"]},\"114\":{\"h\":\"缺点\",\"t\":[\"查询效率低，需要回表：非聚簇索引查询时需要通过索引找到主键，再去聚簇索引查找实际数据。这个过程比直接使用聚簇索引慢。\",\"额外存储：非聚簇索引需要额外创建索引树，占用更多磁盘空间。\"]},\"115\":{\"h\":\"CPCS\"},\"116\":{\"h\":\"简要题面\",\"t\":[\"给定两个串a，b，求a串中有几个子序列是b串\"]},\"117\":{\"h\":\"题面\",\"t\":[\"在被成功破解上一个宝箱密码后，小鸡大惊失色，连夜更换了密码的生成规则，并重新将宝箱锁好，信心十足地摆在了所有参赛者面前。\",\"这一次，解锁线索更加复杂——宝箱表面刻着两串小写字母 a 和 b，并附言：“若你能算清 a 中有多少子序列等于 b，我便甘拜下风！”\",\"现在，宝箱的最终命运掌握在你手中！\",\"注：子序列是指通过从原始序列中删除某些元素（可能一个、多个或不删除）但不改变剩余元素的相对位置所形成的新序列，例如 sacpc 通过删除元素 a 可以得到子序列 scpc 。\"]},\"118\":{\"h\":\"输入描述\",\"t\":[\"第一行一个字符串 a(1≤∣a∣≤105)\",\"第二行一个字符串 b(1≤∣b∣≤103)\"]},\"119\":{\"h\":\"输出描述\",\"t\":[\"一行一个数字表示答案\",\"由于答案可能过大，请对998244353 ****取模\"]},\"120\":{\"h\":\"输入输出样例\"},\"121\":{\"h\":\"输入 #1\",\"t\":[\"scppcsscpspccsp scpc\"]},\"122\":{\"h\":\"输出 #1\",\"t\":[\"28\"]},\"123\":{\"h\":\"说明/提示\"},\"124\":{\"h\":\"解法\"},\"125\":{\"h\":\"\",\"t\":[\"令 dp[i] 表示 a 处理到当前字符时，以 b[i] 结尾的匹配子序列个数。\"]},\"126\":{\"h\":\"\",\"t\":[\"维护 dp 数组，其中 dp[j] 代表当前在 a 中匹配 b 的第 j 个字符的子序列数量。\",\"遍历 a 中的每个字符 a[i]： \",\"如果 a[i] == b[j]，则 dp[j] 可以由 dp[j-1] 贡献而来，即 dp[j] += dp[j-1]。\",\"若 a[i] 恰好等于 b[0]，则 dp[0] 自增，即 dp[0] += 1。\",\"采用倒序更新 dp[j]，避免更新 dp[j] 时影响 dp[j-1] 的值。\"]},\"127\":{\"h\":\"参考程序\",\"t\":[\"#include<bits/stdc++.h> using namespace std; typedef long long ll; const ll mod=998244353; ll dp[1005]; vector<int>vec[30]; int main(){ ios::sync_with_stdio(0),cin.tie(0),cout.tie(0); string a,b; cin>>a>>b; for(int i=1;i<b.size();i++){ vec[b[i]-'a'].push_back(i); } for(int i=0;i<='z'-'a';i++){ sort(vec[i].begin(),vec[i].end(),greater<int>()); } for(int i=0;i<a.size();i++){ for(auto j:vec[a[i]-'a']){ dp[j]=(dp[j-1]+dp[j])%mod; } if(a[i]==b[0]) dp[0]=(dp[0]+1)%mod; } cout<<dp[b.size()-1]<<'\\\\n'; return 0; }\"]},\"128\":{\"h\":\"中南民族大学程序设计竞赛\",\"t\":[\"这里放一些校赛自己出的题目\"]},\"129\":{\"h\":\"SCPC\"},\"130\":{\"h\":\"简要题面\",\"t\":[\"字符串中有多少子序列是scpc\"]},\"131\":{\"h\":\"题面\",\"t\":[\"中南民族大学第七届程序设计竞赛火热进行中！当你正专注解题时，意外在小鸡留下的神秘宝箱前驻足。小鸡自信地认为无人能破解密码，竟将解锁线索大大方方刻在了宝箱表面！\",\"锈迹斑驳的箱体上篆刻着一串神秘的小写字母字符串，而你敏锐地发现：这个字符串中所有能组合成 scpc 的子序列数量，正是开启这个宝箱的关键密码！\",\"那么，聪明的你可以打开小鸡的宝箱吗？\",\"注：子序列是指通过从原始序列中删除某些元素（可能一个、多个或不删除）但不改变剩余元素的相对位置所形成的新序列，例如 sacpc 通过删除元素 a 可以得到子序列 scpc 。\"]},\"132\":{\"h\":\"输入描述\",\"t\":[\"一行一个字符串 s(1≤∣s∣≤107)\"]},\"133\":{\"h\":\"输出描述\",\"t\":[\"一行一个数字表示答案\",\"由于答案可能过大，请对 998244353 取模\"]},\"134\":{\"h\":\"输入输出样例\"},\"135\":{\"h\":\"输入 #1\",\"t\":[\"scppcsscpspccsp\"]},\"136\":{\"h\":\"输出 #1\",\"t\":[\"28\"]},\"137\":{\"h\":\"说明/提示\"},\"138\":{\"h\":\"解法\",\"t\":[\"用动态规划来维护子序列的计数。我们用 dp[i] 表示形成前 i 个字符的部分子序列数量，其中：\",\"dp[1] 统计 s 的数量\",\"dp[2] 统计 sc 的数量\",\"dp[3] 统计 scp 的数量\",\"dp[4] 统计 scpc 的数量（最终答案）\",\"遍历字符串时，我们根据不同的字符进行如下转移：\",\"遇到 's'： \",\"dp[1] += 1，即统计 s 的出现次数\",\"遇到 'c'： \",\"dp[4] += dp[3]，即 scpc 的个数增加 scp 的个数\",\"dp[2] += dp[1]，即 sc 的个数增加 s 的个数\",\"遇到 'p'： \",\"dp[3] += dp[2]，即 scp 的个数增加 sc 的个数\"]},\"139\":{\"h\":\"参考程序\",\"t\":[\"#include<bits/stdc++.h> using namespace std; typedef long long ll; const ll mod=998244353; ll dp[5]; int main(){ string s; cin>>s; s=\\\" \\\"+s; for(int i=1;i<s.length();i++){ if(s[i]=='s'){ dp[1]=(dp[1]+1)%mod; } else if(s[i]=='c'){ dp[4]=(dp[4]+dp[3])%mod; dp[2]=(dp[1]+dp[2])%mod; } else if(s[i]=='p'){ dp[3]=(dp[2]+dp[3])%mod; } } cout<<dp[4]<<'\\\\n'; return 0; }\"]},\"140\":{\"h\":\"小鸡计算器\"},\"141\":{\"h\":\"简要题面\",\"t\":[\"给定一个包含+ - * / ( ) 的表达式，输出运算结果\"]},\"142\":{\"h\":\"题面\",\"t\":[\"被聪明的参赛者们打开了第一个宝箱后，小鸡发誓要夺回属于她的一切！\",\"她翻开珍藏的魔法书，虔诚地召唤出伟大的神明。神明被她的执着打动，赐予了一个能够帮助她找回丢失宝藏的神奇法宝。不过，这个法宝被施加了层层禁制，需要逐一解开才能激活。\",\"此刻，法宝周围浮现出一串串神秘的数字算式。小鸡明白，只有正确解出所有的算式，才能彻底激活法宝，最终找回失落的宝藏。然而，长时间没有动脑筋的小鸡，已经对这些数字感到力不从心。于是，她决定寻求善良的你的帮助，助她一臂之力，破解谜题，激活法宝，找回属于她的宝藏！\"]},\"143\":{\"h\":\"输入描述\",\"t\":[\"一行一个包含 + - * / ( ) 的表达式，保证表达式合法并且数字不含负数。\"]},\"144\":{\"h\":\"输出描述\",\"t\":[\"一行一个数字表示表达式的值\",\"若结果不为整数，请用最简分数表示\"]},\"145\":{\"h\":\"输入输出样例\"},\"146\":{\"h\":\"输入 #1\",\"t\":[\"6*5/2-(3+8)\"]},\"147\":{\"h\":\"输出 #1\",\"t\":[\"4\"]},\"148\":{\"h\":\"输入 #2\",\"t\":[\"3/(2-8)\"]},\"149\":{\"h\":\"输出 #2\",\"t\":[\"-1/2\"]},\"150\":{\"h\":\"说明/提示\",\"t\":[\"题目只保证初始表达式中不含负数，计算过程中可能出现负数。\"]},\"151\":{\"h\":\"解法\",\"t\":[\"计算表达式时，我们维护两个栈：\",\"数值栈 num：存储当前的数值（分数形式 pair<分子, 分母>）。\",\"运算符栈 op：存储当前的操作符 + - * / 和括号 ()。\",\"计算规则：\",\"遇到数字：解析完整数字后，将其压入 num 栈，默认分母为 1（整数）。\",\"遇到运算符 + - * /： \",\"若运算符栈 op非空，并且栈顶运算符的优先级不低于当前运算符，则先计算栈顶运算，直到遇到低优先级的运算符或 (。\",\"之后再将当前运算符入栈。\",\"遇到 (：直接入 op 栈。\",\"遇到 )： \",\"依次执行 op 栈中的运算，直到匹配到 (，然后弹出 (。\",\"处理剩余的运算：遍历结束后，栈中可能仍有运算符，需要依次弹出执行，直到 op 为空。\",\"由于 * / 可能会产生分数，需要实现分数的四则运算，并保证最简分数表示：\",\"加法：\",\"ba​+dc​=b×da×d+b×c​\",\"减法： ba​−dc​=b×da×d−b×c​\",\"乘法： ba​×dc​=b×da×c​\",\"除法： ba​÷dc​=b×ca×d​\",\"计算后需求 最大公因数（gcd），将分数化为最简形式。\"]},\"152\":{\"h\":\"参考程序\",\"t\":[\"#include<bits/stdc++.h> using namespace std; typedef long long ll; stack<pair<ll,ll>> num; stack<char> op; map<char,int> mp; pair<ll,ll> mul(pair<ll,ll> a,pair<ll,ll> b){ ll fz=a.first*b.first; ll fm=a.second*b.second; ll gcd=__gcd(fz,fm); fz/=gcd; fm/=gcd; return {fz,fm}; } pair<ll,ll> div(pair<ll,ll> a,pair<ll,ll> b){ ll fz=a.first*b.second; ll fm=a.second*b.first; ll gcd=__gcd(fz,fm); fz/=gcd; fm/=gcd; return {fz,fm}; } pair<ll,ll> add(pair<ll,ll> a,pair<ll,ll> b){ ll fz=a.first*b.second+a.second*b.first; ll fm=a.second*b.second; ll gcd=__gcd(fz,fm); fz/=gcd; fm/=gcd; return {fz,fm}; } pair<ll,ll> sub(pair<ll,ll> a,pair<ll,ll> b){ ll fz=a.first*b.second-a.second*b.first; ll fm=a.second*b.second; ll gcd=__gcd(fz,fm); fz/=gcd; fm/=gcd; return {fz,fm}; } int main(){ ios::sync_with_stdio(0),cin.tie(0),cout.tie(0); ll temp=0; mp['(']=mp[')']=0; mp['+']=mp['-']=1; mp['*']=mp['/']=2; string s; cin>>s; for(int i=0;i<s.length();i++){ if(s[i]>='0'&&s[i]<='9'){ temp*=10; temp+=s[i]-'0'; } else{ if(i>0&&s[i-1]>='0'&&s[i-1]<='9'){ num.push({temp,1}); temp=0; } if(s[i]=='(') op.push(s[i]); else if(s[i]==')'){ while(op.top()!='('){ pair<ll,ll> a=num.top(); num.pop(); pair<ll,ll> b=num.top(); num.pop(); if(op.top()=='*') num.push(mul(b,a)); else if(op.top()=='/') num.push(div(b,a)); else if(op.top()=='+') num.push(add(b,a)); else num.push(sub(b,a)); op.pop(); } op.pop(); } else{ while(!op.empty()&&(mp[op.top()]>=mp[s[i]])){ pair<ll,ll> a=num.top(); num.pop(); pair<ll,ll> b=num.top(); num.pop(); if(op.top()=='*') num.push(mul(b,a)); else if(op.top()=='/') num.push(div(b,a)); else if(op.top()=='+') num.push(add(b,a)); else num.push(sub(b,a)); op.pop(); } op.push(s[i]); } } } if(s[s.length()-1]>='0'&&s[s.length()-1]<='9') num.push({temp,1}); while(!op.empty()){ pair<ll,ll> a=num.top(); num.pop(); pair<ll,ll> b=num.top(); num.pop(); if(op.top()=='*') num.push(mul(b,a)); else if(op.top()=='/') num.push(div(b,a)); else if(op.top()=='+') num.push(add(b,a)); else num.push(sub(b,a)); op.pop(); } pair<ll,ll> ans=num.top(); if(ans.second<0){ ans.first=-ans.first; ans.second=-ans.second; } if(ans.second==1) cout<<ans.first<<'\\\\n'; else cout<<ans.first<<'/'<<ans.second<<'\\\\n'; return 0; }\"]},\"153\":{\"h\":\"我不想当组长\"},\"154\":{\"h\":\"简要题面\"},\"155\":{\"h\":\"题面\",\"t\":[\"众所周知，老师们都热衷于分组学习，这一天芳芳来到了一个有n位同学的新班级，每位同学都有一个独一无二的序号，从1到n，毫无意外，这个班的老师也要求分组学习。\",\"每个人都想和自己最好的朋友在同一个小组，善良的老师愿意满足每个人的小心愿，所以老师让每一位同学把自己最好的朋友的序号写在纸上按顺序交给她。分完组后老师发现没有人愿意当小组长，于是决定让每一组序号最小的同学担任小组长。\",\"这一天，老师照常的走进教室，拿出她的小组长名单准备了解每一组的学习情况，但她突然发现名单不见了。老师在包里翻找了半天，最后只找到了写着每一位同学最好的朋友序号的小纸条，幸运的是纸条的顺序还没有被打乱，最上方的纸条是1号同学写的，最下方的纸条是n号同学写的。\",\"为了不让同学们发现老师弄丢了小组长名单，她需要在上课之前根据纸条上的信息找到所有的小组长，你可以帮帮她吗？\"]},\"156\":{\"h\":\"输入描述\",\"t\":[\"第一行输入n，表示学生人数\",\"接下来n行每行一个数字，表示每位同学最好的朋友的序号\"]},\"157\":{\"h\":\"输出描述\",\"t\":[\"按序号从小到大输出所有小组长的序号，每行一个序号\"]},\"158\":{\"h\":\"输入输出样例\"},\"159\":{\"h\":\"输入 #1\",\"t\":[\"5 5 3 2 1 4\"]},\"160\":{\"h\":\"输出 #1\",\"t\":[\"1 2\"]},\"161\":{\"h\":\"说明/提示\"},\"162\":{\"h\":\"解法\"},\"163\":{\"h\":\"参考程序\",\"t\":[\"#include<bits/stdc++.h> using namespace std; int fa[100005]; int find(int x){ if(x!=fa[x]) return fa[x]=find(fa[x]); return x; } int main(){ int n; cin>>n; for(int i=1;i<=n;i++){ fa[i]=i; } for(int i=1;i<=n;i++){ int temp; cin>>temp; int ni=find(i),nt=find(temp); if(ni!=nt){ if(ni<nt) fa[nt]=ni; else fa[ni]=nt; } } for(int i=1;i<=n;i++){ if(i==find(i)) cout<<i<<'\\\\n'; } return 0; }\"]},\"164\":{\"h\":\"最后的才是最好的\"},\"165\":{\"h\":\"简要题面\"},\"166\":{\"h\":\"题面\",\"t\":[\"小连和小张都是芳芳的好队友，这一天芳芳旅游回来给他们俩带了n个特产让他们自己分。为了有趣，小连和小张规定了一种分配方式：轮流拿取特产，每人每次最多拿m个特产，不可以不拿。他们都认为最后的特产才是最好的，所以他们都会想方设法拿到最后一个特产，公平起见，由芳芳给出x的数值，小连和小张猜拳决定拿取顺序，获胜的人先拿。\",\"芳芳想知道谁拿到了最后一个特产，但是她不想等待漫长的分配过程，所以聪明的你可以告诉她吗？\"]},\"167\":{\"h\":\"输入描述\",\"t\":[\"一行输入三个整数n,m,w(1<=n<=10^18,1<=m<=n,0<=w<=1)，n表示特产数量，m表示每人每次最多可以拿取的数量，w表示猜拳的结果，1表示小连获胜，0表示小张获胜。\"]},\"168\":{\"h\":\"输出描述\",\"t\":[\"小张拿到最后一个特产则输出一行 Zhang get it!\",\"小连拿到最后一个特产则输出一行 Lian get it!\",\"无法确定则输出一行 I don't know!\"]},\"169\":{\"h\":\"输入输出样例\"},\"170\":{\"h\":\"输入 #1\",\"t\":[\"10 3 1\"]},\"171\":{\"h\":\"输出 #1\",\"t\":[\"Lian get it!\"]},\"172\":{\"h\":\"说明/提示\"},\"173\":{\"h\":\"解法\"},\"174\":{\"h\":\"参考程序\",\"t\":[\"#include<bits/stdc++.h> using namespace std; typedef long long ll; int main(){ ll n,m; bool w; cin>>n>>m>>w; if(n%(m+1)==1){ if(w==1) cout<<\\\"Zhang get it!\\\\n\\\"; else cout<<\\\"Lian get it!\\\\n\\\"; } else{ if(w==1) cout<<\\\"Lian get it!\\\\n\\\"; else cout<<\\\"Zhang get it!\\\\n\\\"; } return 0; }\"]},\"175\":{\"h\":\"20250322网易互娱游戏研发\"},\"176\":{\"h\":\"1. 股神小易\"},\"177\":{\"h\":\"题面\",\"t\":[\"n 天 m 支股票，求最大收益，输出每天买卖情况。\"]},\"178\":{\"h\":\"解法\",\"t\":[\"贪心，每天选择一支收益最大的全买，第二天全部卖出。\"]},\"179\":{\"h\":\"参考程序\",\"t\":[\"#include<bits/stdc++.h> using namespace std; double a[30][20005]; int ans[30][3]; int main(){ int n,m; double k; cin>>n>>m>>k; for(int i=1;i<=n;i++){ for(int j=1;j<=m;j++){ cin>>a[i][j]; } } for(int i=2;i<=n;i++){ double tmp=1; for(int j=1;j<=m;j++){ if(a[i][j]/a[i-1][j]>tmp){ ans[i-1][2]=j; ans[i][1]=j; tmp=a[i][j]/a[i-1][j]; } } k*=tmp; } printf(\\\"%.4lf\\\\n\\\",k); for(int i=1;i<=n;i++){ cout<<ans[i][1]-1<<' '<<ans[i][2]-1<<'\\\\n'; } return 0; }\"]},\"180\":{\"h\":\"2. 2048\"},\"181\":{\"h\":\"题面\",\"t\":[\"模拟2048游戏的运行结果\"]},\"182\":{\"h\":\"解法\",\"t\":[\"直接模拟即可，需要注意以下情况：\",\"三个相同数字合并时 1 1 1 0 需要合并成 2 1 0 0\",\"2 2 4 0 只会合并成 4 4 0 0\"]},\"183\":{\"h\":\"参考程序\",\"t\":[\"#include<bits/stdc++.h> using namespace std; typedef long long ll; ll a[40][40]; int v[40][40]; int op[50]; int main(){ int t; cin>>t; while(t--){ int c; cin>>c; for(int i=1;i<=c;i++){ cin>>op[i]; } int m,n; cin>>m>>n; for(int i=1;i<=m;i++){ for(int j=1;j<=n;j++){ cin>>a[i][j]; } } for(int k=1;k<=c;k++){ for(int i=1;i<=m;i++){ for(int j=1;j<=n;j++){ v[i][j]=0; } } if(op[k]==0){ for(int j=1;j<=n;j++){ for(int i=1;i<=m;i++){ if(a[i][j]==0) continue; for(int ii=i;ii>1;ii--){ if(a[ii][j]==a[ii-1][j]){ if(v[ii-1][j]) break; v[ii-1][j]=1; a[ii-1][j]*=2; a[ii][j]=0; break; } else if(a[ii-1][j]==0){ a[ii-1][j]=a[ii][j]; a[ii][j]=0; } else break; } } } } else if(op[k]==2){ for(int j=1;j<=n;j++){ for(int i=m;i>=1;i--){ if(a[i][j]==0) continue; for(int ii=i;ii<m;ii++){ if(a[ii][j]==a[ii+1][j]){ if(v[ii+1][j]) break; v[ii+1][j]=1; a[ii+1][j]*=2; a[ii][j]=0; break; } else if(a[ii+1][j]==0){ a[ii+1][j]=a[ii][j]; a[ii][j]=0; } else break; } } } } else if(op[k]==1){ for(int i=1;i<=m;i++){ for(int j=1;j<=n;j++){ if(a[i][j]==0) continue; for(int jj=j;jj>1;jj--){ if(a[i][jj]==a[i][jj-1]){ if(v[i][jj-1]) break; v[i][jj-1]=1; a[i][jj-1]*=2; a[i][jj]=0; break; } else if(a[i][jj-1]==0){ a[i][jj-1]=a[i][jj]; a[i][jj]=0; } else break; } } } } else{ for(int i=1;i<=m;i++){ for(int j=n;j>=1;j--){ if(a[i][j]==0) continue; for(int jj=j;jj<n;jj++){ if(a[i][jj]==a[i][jj+1]){ if(v[i][jj+1]) break; v[i][jj+1]=1; a[i][jj+1]*=2; a[i][jj]=0; break; } else if(a[i][jj+1]==0){ a[i][jj+1]=a[i][jj]; a[i][jj]=0; } else break; } } } } } for(int i=1;i<=m;i++){ for(int j=1;j<=n;j++){ cout<<a[i][j]<<' '; } cout<<'\\\\n'; } } return 0; }\"]},\"184\":{\"h\":\"3. 星际探险\"},\"185\":{\"h\":\"题面\",\"t\":[\"解四元一次方程 ?x + ?y + ?z + ?w = n\",\"变量范围0-2500\"]},\"186\":{\"h\":\"解法\",\"t\":[\"范围不大，跑三层循环剪枝一下就过了\"]},\"187\":{\"h\":\"参考程序\",\"t\":[\"#include<bits/stdc++.h> using namespace std; typedef long long ll; int main(){ ll x,y,z,w,n; cin>>x>>y>>z>>w>>n; int flag=0; ll tmp; for(int i=0;i<=2500;i++){ if(flag) break; tmp=n-i*x; if(w*2500+z*2500+y*2500<tmp) continue; if(tmp<0) break; for(int j=0;j<=2500;j++){ if(flag) break; tmp=n-i*x-j*y; if(w*2500+z*2500<tmp) continue; if(tmp<0) break; for(int k=0;k<=2500;k++){ tmp=n-i*x-j*y-k*z; if(w*2500<tmp) continue; if(tmp<0) break; if(w){ if(tmp%w==0){ cout<<i<<' '<<j<<' '<<k<<' '<<tmp/w<<'\\\\n'; flag=1; break; } } else{ if(tmp==0) cout<<i<<' '<<j<<' '<<k<<' '<<0<<'\\\\n'; flag=1; break; } } } } if(!flag) cout<<-1; return 0; }\"]},\"188\":{\"h\":\"笔试\",\"t\":[\"这里放一些做过的笔试题\"]},\"189\":{\"h\":\"YOLO11环境配置\",\"t\":[\"相关信息\",\"本教程适用于有独立显卡的电脑\"]},\"190\":{\"h\":\"📌安装所需软件\"},\"191\":{\"h\":\"🔥Anacoda3\",\"t\":[\"Anaconda3由于是国外网站下载较慢，推荐通过清华镜像源安装。\",\"选择带有 Anaconda3...Windows...exe 字样的进行下载。\",\"下载完成之后打开Anaconda3进行安装，一直点下一步，选 Just Me\",\"安装路径不建议安装到 C 盘，可以直接复制粘贴修改到 D:\\\\Anaconda3 ,也可以修改到其他路径，最好纯英文路径。\",\"点击下一步后，需要选择添加到环境变量，直接全选安装即可。\"]},\"192\":{\"h\":\"🔥Pycharm\",\"t\":[\"安装Pycharm可以直接去官网下载，速度较快。\",\"往下滑，下载免费的社区版就够用了\",\"下载完成后开始安装，一直点下一步，将安装路径换成C盘以外的其他文件夹\"]},\"193\":{\"h\":\"📌安装环境\"},\"194\":{\"h\":\"🔥CUDA\",\"t\":[\"提示\",\"下载CUDA前需要先查看显卡支持的CUDA版本最高是多少\",\"按下 win+R ，输入 cmd 打开命令行，输入 nvidia-smi 即可查看\",\"上图红框位置显示即为CUDA最高支持版本，本教程CUDA最高版本达到11.8即可，若没有达到则需要更新显卡驱动。\",\"重要\",\"PyTorch 官方目前主要支持 CUDA 12.1 和 CUDA 11.8，对于更高版本的支持可能较为有限，建议和本教程一致，直接安装 CUDA 11.8\",\"可以在官网挑选下载，也可以直接点此下载，选择精简安装即可\",\"安装完成后打开cmd，输入 nvcc -V,如下图所示即安装成功\"]},\"195\":{\"h\":\"🔥cuDNN\",\"t\":[\"进入cuDNN官网，选择与CUDA相匹配版本，下载Windows版本的压缩包文件。。\",\"将压缩包进行解压，解压后得到下图三个文件夹，全选复制进CUDA的文件夹中进行覆盖替换,替换完成后即cuDNN安装完成。\",\"按照本教程下载的CUDA文件夹默认在 C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v11.8 目录下。\"]},\"196\":{\"h\":\"📌安装环境\"},\"197\":{\"h\":\"🔥创建虚拟环境\",\"t\":[\"打开 Anaconda prompt,输入以下指令创建一个名为yolov11，python版本为3.10的虚拟环境。\",\"conda create -n yolov11 python=3.10\"]},\"198\":{\"h\":\"🔥安装pytorch（GPU版）\",\"t\":[\"打开 Anaconda prompt,输入以下指令进入yolov11环境\",\"conda activate yolov11\",\"输入下方命令即可安装pytorch,耐心等待安装完成（需要注意关闭加速软件否则会下载失败）\",\"pip install torch==2.0.0+cu118 torchvision==0.15.1+cu118 --extra-index-url https://download.pytorch.org/whl/cu118\"]},\"199\":{\"h\":\"🔥安装ultralytics库\",\"t\":[\"这个库包含了几乎全部运行yolov11所需的环境，输入以下命令后耐心等待即可\",\"pip install ultralytics\"]},\"200\":{\"h\":\"📌源码及使用环境\"},\"201\":{\"h\":\"🔥下载YOLO11源码\",\"t\":[\"进入源码地址进行下载。\",\"首先下载源代码压缩包并解压\",\"下滑找到yolo11n.pt，点击下载\",\"将下载的文件放到刚刚解压的源码根目录下\"]},\"202\":{\"h\":\"🔥Pycharm导入环境\",\"t\":[\"用Pycharm打开刚刚的项目源码，添加新的本地解释器\",\"按下图选择环境后点击确定即可\"]},\"203\":{\"h\":\"📌验证环境\",\"t\":[\"在源码根目录下新建 val.py 文件\",\"from ultralytics import YOLO if __name__ == '__main__': # 加载模型 model = YOLO(model=r'yolo11n.pt') # 进行推理 model.predict(source=r'ultralytics/assets/bus.jpg', # source是要推理的图片路径这里使用yolo自带的图片 save=True, # 是否在推理结束后保存结果 show=True, # 是否在推理结束后显示结果 project='runs/detect', # 结果的保存路径 )\",\"运行后输出如下图即环境正常。\"]},\"204\":{\"h\":\"🔥NumPy版本问题\",\"t\":[\"如果提示NumPy版本不兼容相关的错误\",\"打开 Anaconda prompt ,进入 yolov11 环境\",\"conda activate yolov11\",\"输入以下命令，安装1.23.5版本的NumPy\",\"pip install numpy==1.23.5\",\"使用以下命令可以查看当前的NumPy版本\",\"pip show numpy\"]},\"205\":{\"h\":\"使用YOLO11训练模型\"},\"206\":{\"h\":\"📌数据集\"},\"207\":{\"h\":\"🔥免费数据集网站 —— Roboflow\",\"t\":[\"进入Roboflow官网，注册登录后进入如下页面，点击下图所示位置\",\"进入当前页面搜索自己想要的数据集\",\"选择一个合适的数据集，点击图示位置进入下载\",\"选择yolov11格式的数据集\",\"下载zip格式的数据集\"]},\"208\":{\"h\":\"🔥导入数据集\",\"t\":[\"在项目根目录下新建一个文件夹用来存放导入的数据集，这里使用 dataset 作为存放所有数据集的路径，刚刚下载的数据集解压到 dataset 的 uno 路径下\",\"打开 data.yaml 文件并修改对应信息\",\"增加 path: E:/Download/ultralytics-main/ultralytics-main，路径为项目根目录\",\"train 、 val 、 test 缺省部分修改为存放该数据集的路径\",\"注释掉 roboflow: 以下内容\"]},\"209\":{\"h\":\"📌模型训练\"},\"210\":{\"h\":\"🔥训练代码\",\"t\":[\"在项目根目录下新建 train.py 文件\",\"from ultralytics import YOLO if __name__ == '__main__': model = YOLO('ultralytics/cfg/models/11/yolo11.yaml') model.load('runs/detect/train16/weights/best.pt') results = model.train( data='dataset/uno/data.yaml', epochs=100, imgsz=640, cache=False, batch=16, device='0', single_cls=False, amp=True )\",\"各参数信息\",\"model.load() ：加载预训练模型，这里加载是的上一次训练了100轮的模型，如果不需要可以去掉\",\"data ：数据集配置文件的路径\",\"epochs ：训练轮数\",\"imgsz ：输入图像的尺寸，一般指定为 640*640 像素\",\"cache ：表示是否缓存数据，将数据缓存到内存中可以加速训练，但占用更多内存\",\"batch ：批处理大小，根据自己电脑性能设置\",\"device ：训练使用的设备，'0' 表示使用第一个 GPU（若为 'cpu' 则表示使用 CPU）\",\"single_cls ：是否为单类别检测，False 表示多类别检测，True 表示单类别检测\",\"amp ：是否启用自动混合精度训练（Automatic Mixed Precision），True 表示启用 AMP，有助于加速训练并节省显存\",\"还有一些参数没有列出来，可以自行搜索\",\"直接运行代码，等待训练完成，默认训练结果会保存在 runs/detect 路径下\"]},\"211\":{\"h\":\"🔥测试代码\",\"t\":[\"在项目根目录下新建 test.py 文件\",\"from ultralytics import YOLO if __name__ == '__main__': # 加载模型 model = YOLO(model=r'runs/detect/train17/weights/best.pt') #加载刚刚训练完的模型 # 进行推理 model.predict(source=r'dataset/uno/test/images/IMG_20241104_120135_jpg.rf.1aa0dc9a8d69f838ea9e725080b5d2b8.jpg', # source是要推理的图片路径这里使用数据集提供的图片 save=True, # 是否在推理结束后保存结果 show=True, # 是否在推理结束后显示结果 project='runs/detect', # 结果的保存路径 )\",\"直接运行代码，进入 runs/detect 文件夹查看训练结果\"]},\"212\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"213\":{\"h\":\"Vue Press\"},\"214\":{\"h\":\"YOLO11\"}},\"dirtCount\":0,\"index\":[[\"还有一些参数没有列出来\",{\"1\":{\"210\":1}}],[\"还存储整行数据\",{\"1\":{\"104\":1}}],[\"有助于加速训练并节省显存\",{\"1\":{\"210\":1}}],[\"有一个sql语句执行失败则整个事务执行失败\",{\"1\":{\"76\":1}}],[\"训练使用的设备\",{\"1\":{\"210\":1}}],[\"训练轮数\",{\"1\":{\"210\":1}}],[\"根据自己电脑性能设置\",{\"1\":{\"210\":1}}],[\"根据行为调整优先级\",{\"1\":{\"58\":1}}],[\"批处理大小\",{\"1\":{\"210\":1}}],[\"像素\",{\"1\":{\"210\":1}}],[\"像是幻觉\",{\"1\":{\"86\":1}}],[\"各参数信息\",{\"1\":{\"210\":1}}],[\"缺省部分修改为存放该数据集的路径\",{\"1\":{\"208\":1}}],[\"缺点\",{\"0\":{\"108\":1,\"114\":1},\"1\":{\"60\":1}}],[\"增加\",{\"1\":{\"208\":1}}],[\"刚刚下载的数据集解压到\",{\"1\":{\"208\":1}}],[\"环境\",{\"1\":{\"204\":1}}],[\"运行后输出如下图即环境正常\",{\"1\":{\"203\":1}}],[\"运算符栈\",{\"1\":{\"151\":1}}],[\"加载刚刚训练完的模型\",{\"1\":{\"211\":1}}],[\"加载预训练模型\",{\"1\":{\"210\":1}}],[\"加载模型\",{\"1\":{\"203\":1,\"211\":1}}],[\"加法\",{\"1\":{\"151\":1}}],[\"添加新的本地解释器\",{\"1\":{\"202\":1}}],[\"添加到暂存区\",{\"1\":{\"16\":1}}],[\"首先下载源代码压缩包并解压\",{\"1\":{\"201\":1}}],[\"首先测试一下\",{\"1\":{\"16\":1}}],[\"耐心等待安装完成\",{\"1\":{\"198\":1}}],[\"替换完成后即cudnn安装完成\",{\"1\":{\"195\":1}}],[\"替换为\",{\"1\":{\"41\":1}}],[\"全选复制进cuda的文件夹中进行覆盖替换\",{\"1\":{\"195\":1}}],[\"全局变量\",{\"1\":{\"46\":1}}],[\"建议和本教程一致\",{\"1\":{\"194\":1}}],[\"建议将一方\",{\"1\":{\"39\":1}}],[\"官方目前主要支持\",{\"1\":{\"194\":1}}],[\"重要\",{\"1\":{\"194\":1}}],[\"打开\",{\"1\":{\"197\":1,\"198\":1,\"204\":1,\"208\":1}}],[\"打开命令行\",{\"1\":{\"194\":1}}],[\"打开刚刚下载下来的\",{\"1\":{\"13\":1}}],[\"往下滑\",{\"1\":{\"192\":1}}],[\"速度较快\",{\"1\":{\"192\":1}}],[\"安装1\",{\"1\":{\"204\":1}}],[\"安装完成后打开cmd\",{\"1\":{\"194\":1}}],[\"安装pycharm可以直接去官网下载\",{\"1\":{\"192\":1}}],[\"安装路径不建议安装到\",{\"1\":{\"191\":1}}],[\"点击图示位置进入下载\",{\"1\":{\"207\":1}}],[\"点击下图所示位置\",{\"1\":{\"207\":1}}],[\"点击下载\",{\"1\":{\"201\":1}}],[\"点击下一步后\",{\"1\":{\"191\":1}}],[\"点击查看👇\",{\"1\":{\"20\":1}}],[\"选\",{\"1\":{\"191\":1}}],[\"选择yolov11格式的数据集\",{\"1\":{\"207\":1}}],[\"选择一个合适的数据集\",{\"1\":{\"207\":1}}],[\"选择一些默认的配置\",{\"1\":{\"12\":1}}],[\"选择与cuda相匹配版本\",{\"1\":{\"195\":1}}],[\"选择精简安装即可\",{\"1\":{\"194\":1}}],[\"选择带有\",{\"1\":{\"191\":1}}],[\"选择\",{\"1\":{\"17\":1}}],[\"选择你想使用的源\",{\"1\":{\"12\":1}}],[\"选择包管理器\",{\"1\":{\"12\":1}}],[\"推荐通过清华镜像源安装\",{\"1\":{\"191\":1}}],[\"本教程cuda最高版本达到11\",{\"1\":{\"194\":1}}],[\"本教程适用于有独立显卡的电脑\",{\"1\":{\"189\":1}}],[\"本地通信通用\",{\"1\":{\"64\":1}}],[\"本地分支名称可以在这里查看\",{\"1\":{\"16\":1}}],[\"笔试\",{\"0\":{\"188\":1}}],[\"笔记\",{\"0\":{\"2\":1}}],[\"跑三层循环剪枝一下就过了\",{\"1\":{\"186\":1}}],[\"范围不大\",{\"1\":{\"186\":1}}],[\"范围查找\",{\"1\":{\"107\":1}}],[\"yaml\",{\"1\":{\"208\":1,\"210\":2}}],[\"yolo11\",{\"0\":{\"214\":1},\"1\":{\"210\":1}}],[\"yolo11n\",{\"1\":{\"203\":1}}],[\"yolo11环境配置\",{\"0\":{\"189\":1}}],[\"yolo\",{\"1\":{\"203\":2,\"210\":2,\"211\":2}}],[\"yolov11\",{\"1\":{\"197\":1,\"198\":1,\"204\":2}}],[\"y\",{\"1\":{\"185\":1,\"187\":3}}],[\"yes\",{\"1\":{\"12\":1}}],[\"星际探险\",{\"0\":{\"184\":1}}],[\"模拟2048游戏的运行结果\",{\"1\":{\"181\":1}}],[\"模拟实现\",{\"0\":{\"31\":1,\"34\":1,\"37\":1}}],[\"贪心\",{\"1\":{\"178\":1}}],[\"求最大收益\",{\"1\":{\"177\":1}}],[\"求a串中有几个子序列是b串\",{\"1\":{\"116\":1}}],[\"支股票\",{\"1\":{\"177\":1}}],[\"天\",{\"1\":{\"177\":1}}],[\"股神小易\",{\"0\":{\"176\":1}}],[\"芳芳想知道谁拿到了最后一个特产\",{\"1\":{\"166\":1}}],[\"获胜的人先拿\",{\"1\":{\"166\":1}}],[\"获取线程的唯一\",{\"1\":{\"25\":1}}],[\"由芳芳给出x的数值\",{\"1\":{\"166\":1}}],[\"由于\",{\"1\":{\"151\":1}}],[\"由于答案可能过大\",{\"1\":{\"119\":1,\"133\":1}}],[\"由于数据按照索引顺序存储\",{\"1\":{\"108\":1}}],[\"由于数据储存在索引的叶子节点中\",{\"1\":{\"107\":1}}],[\"由于数据和索引一起存储\",{\"1\":{\"106\":1}}],[\"由于进程是独立内存空间\",{\"1\":{\"63\":1}}],[\"由于一个个安装容易导致依赖冲突\",{\"1\":{\"13\":1}}],[\"公平起见\",{\"1\":{\"166\":1}}],[\"他们都认为最后的特产才是最好的\",{\"1\":{\"166\":1}}],[\"轮流拿取特产\",{\"1\":{\"166\":1}}],[\"小连拿到最后一个特产则输出一行\",{\"1\":{\"168\":1}}],[\"小连和小张猜拳决定拿取顺序\",{\"1\":{\"166\":1}}],[\"小连和小张规定了一种分配方式\",{\"1\":{\"166\":1}}],[\"小连和小张都是芳芳的好队友\",{\"1\":{\"166\":1}}],[\"小张拿到最后一个特产则输出一行\",{\"1\":{\"168\":1}}],[\"小鸡明白\",{\"1\":{\"142\":1}}],[\"小鸡发誓要夺回属于她的一切\",{\"1\":{\"142\":1}}],[\"小鸡计算器\",{\"0\":{\"140\":1}}],[\"小鸡自信地认为无人能破解密码\",{\"1\":{\"131\":1}}],[\"小鸡大惊失色\",{\"1\":{\"117\":1}}],[\"小鸡的朋友们✨\",{\"1\":{\"0\":1}}],[\"x\",{\"1\":{\"163\":6,\"185\":1,\"187\":4}}],[\"xxx\",{\"1\":{\"97\":2}}],[\"按照本教程下载的cuda文件夹默认在\",{\"1\":{\"195\":1}}],[\"按下图选择环境后点击确定即可\",{\"1\":{\"202\":1}}],[\"按下\",{\"1\":{\"194\":1}}],[\"按序号从小到大输出所有小组长的序号\",{\"1\":{\"157\":1}}],[\"按主键查询非常高效\",{\"1\":{\"106\":1}}],[\"接下来n行每行一个数字\",{\"1\":{\"156\":1}}],[\"幸运的是纸条的顺序还没有被打乱\",{\"1\":{\"155\":1}}],[\"拿出她的小组长名单准备了解每一组的学习情况\",{\"1\":{\"155\":1}}],[\"老师在包里翻找了半天\",{\"1\":{\"155\":1}}],[\"老师照常的走进教室\",{\"1\":{\"155\":1}}],[\"老师们都热衷于分组学习\",{\"1\":{\"155\":1}}],[\"善良的老师愿意满足每个人的小心愿\",{\"1\":{\"155\":1}}],[\"毫无意外\",{\"1\":{\"155\":1}}],[\"从1到n\",{\"1\":{\"155\":1}}],[\"从而提高查询效率\",{\"1\":{\"98\":1}}],[\"从而节省存储空间并提高查询效率\",{\"1\":{\"94\":1}}],[\"从而形成循环引用\",{\"1\":{\"38\":1}}],[\"从而防止重复释放\",{\"1\":{\"33\":1}}],[\"众所周知\",{\"1\":{\"155\":1}}],[\"9\",{\"1\":{\"152\":3}}],[\"998244353\",{\"1\":{\"133\":1}}],[\"除法\",{\"1\":{\"151\":1}}],[\"乘法\",{\"1\":{\"151\":1}}],[\"减法\",{\"1\":{\"151\":1}}],[\"减少了写操作和磁盘空间的开销\",{\"1\":{\"96\":1}}],[\"减少冗余\",{\"1\":{\"53\":1}}],[\"为了有趣\",{\"1\":{\"166\":1}}],[\"为了不让同学们发现老师弄丢了小组长名单\",{\"1\":{\"155\":1}}],[\"为空\",{\"1\":{\"151\":1}}],[\"为什么操作系统需要\",{\"0\":{\"53\":1}}],[\"为什么使用多线程\",{\"0\":{\"21\":1}}],[\"处理剩余的运算\",{\"1\":{\"151\":1}}],[\"处理到当前字符时\",{\"1\":{\"125\":1}}],[\"然后弹出\",{\"1\":{\"151\":1}}],[\"然而\",{\"1\":{\"30\":1,\"142\":1}}],[\"依次执行\",{\"1\":{\"151\":1}}],[\"整数\",{\"1\":{\"151\":1}}],[\"整个进程阻塞\",{\"1\":{\"60\":1}}],[\"默认训练结果会保存在\",{\"1\":{\"210\":1}}],[\"默认分母为\",{\"1\":{\"151\":1}}],[\"默认构造函数\",{\"0\":{\"26\":1}}],[\"默认构造\",{\"1\":{\"25\":1}}],[\"存储当前的操作符\",{\"1\":{\"151\":1}}],[\"存储当前的数值\",{\"1\":{\"151\":1}}],[\"640\",{\"1\":{\"210\":2}}],[\"6\",{\"1\":{\"146\":1}}],[\"请用最简分数表示\",{\"1\":{\"144\":1}}],[\"请对\",{\"1\":{\"133\":1}}],[\"请对998244353\",{\"1\":{\"119\":1}}],[\"保证表达式合法并且数字不含负数\",{\"1\":{\"143\":1}}],[\"找回属于她的宝藏\",{\"1\":{\"142\":1}}],[\"激活法宝\",{\"1\":{\"142\":1}}],[\"破解谜题\",{\"1\":{\"142\":1}}],[\"助她一臂之力\",{\"1\":{\"142\":1}}],[\"她需要在上课之前根据纸条上的信息找到所有的小组长\",{\"1\":{\"155\":1}}],[\"她决定寻求善良的你的帮助\",{\"1\":{\"142\":1}}],[\"她翻开珍藏的魔法书\",{\"1\":{\"142\":1}}],[\"于是决定让每一组序号最小的同学担任小组长\",{\"1\":{\"155\":1}}],[\"于是\",{\"1\":{\"142\":1}}],[\"长时间没有动脑筋的小鸡\",{\"1\":{\"142\":1}}],[\"才能彻底激活法宝\",{\"1\":{\"142\":1}}],[\"只会合并成\",{\"1\":{\"182\":1}}],[\"只有正确解出所有的算式\",{\"1\":{\"142\":1}}],[\"只允许一个事务看到其他事务已经提交的修改\",{\"1\":{\"89\":1}}],[\"法宝周围浮现出一串串神秘的数字算式\",{\"1\":{\"142\":1}}],[\"赐予了一个能够帮助她找回丢失宝藏的神奇法宝\",{\"1\":{\"142\":1}}],[\"神明被她的执着打动\",{\"1\":{\"142\":1}}],[\"虔诚地召唤出伟大的神明\",{\"1\":{\"142\":1}}],[\"给定一个包含+\",{\"1\":{\"141\":1}}],[\"给定两个串a\",{\"1\":{\"116\":1}}],[\"遇到运算符\",{\"1\":{\"151\":1}}],[\"遇到数字\",{\"1\":{\"151\":1}}],[\"遇到\",{\"1\":{\"138\":3,\"151\":2}}],[\"统计\",{\"1\":{\"138\":4}}],[\"我不想当组长\",{\"0\":{\"153\":1}}],[\"我们维护两个栈\",{\"1\":{\"151\":1}}],[\"我们根据不同的字符进行如下转移\",{\"1\":{\"138\":1}}],[\"我们用\",{\"1\":{\"138\":1}}],[\"我便甘拜下风\",{\"1\":{\"117\":1}}],[\"聪明的你可以打开小鸡的宝箱吗\",{\"1\":{\"131\":1}}],[\"那么\",{\"1\":{\"131\":1}}],[\"正是开启这个宝箱的关键密码\",{\"1\":{\"131\":1}}],[\"正在cpu上执行\",{\"1\":{\"47\":1}}],[\"正在创建中的进程\",{\"1\":{\"47\":1}}],[\"锈迹斑驳的箱体上篆刻着一串神秘的小写字母字符串\",{\"1\":{\"131\":1}}],[\"竟将解锁线索大大方方刻在了宝箱表面\",{\"1\":{\"131\":1}}],[\"意外在小鸡留下的神秘宝箱前驻足\",{\"1\":{\"131\":1}}],[\"字样的进行下载\",{\"1\":{\"191\":1}}],[\"字符串中有多少子序列是scpc\",{\"1\":{\"130\":1}}],[\"字段用不到索引\",{\"1\":{\"101\":1}}],[\"字段能用到索引\",{\"1\":{\"101\":1}}],[\"zhang\",{\"1\":{\"168\":1,\"174\":2}}],[\"z\",{\"1\":{\"127\":1,\"185\":1,\"187\":2}}],[\"参考程序\",{\"0\":{\"127\":1,\"139\":1,\"152\":1,\"163\":1,\"174\":1,\"179\":1,\"183\":1,\"187\":1}}],[\"采用倒序更新\",{\"1\":{\"126\":1}}],[\"采用引用计数机制管理资源\",{\"1\":{\"36\":1}}],[\"自增\",{\"1\":{\"126\":1}}],[\"自行修改\",{\"1\":{\"16\":1}}],[\"恰好等于\",{\"1\":{\"126\":1}}],[\"贡献而来\",{\"1\":{\"126\":1}}],[\"遍历结束后\",{\"1\":{\"151\":1}}],[\"遍历字符串时\",{\"1\":{\"138\":1}}],[\"遍历\",{\"1\":{\"126\":1}}],[\"代表当前在\",{\"1\":{\"126\":1}}],[\"代码段\",{\"1\":{\"51\":1}}],[\"其中\",{\"1\":{\"126\":1,\"138\":1}}],[\"数值栈\",{\"1\":{\"151\":1}}],[\"数组\",{\"1\":{\"126\":1}}],[\"数据集配置文件的路径\",{\"1\":{\"210\":1}}],[\"数据首先按照\",{\"1\":{\"99\":1}}],[\"数据越安全\",{\"1\":{\"87\":1}}],[\"数据库\",{\"0\":{\"92\":1}}],[\"数据库的完整性约束没有被破坏\",{\"1\":{\"79\":1}}],[\"数据库中的事务是指对数据库执行的一批操作\",{\"1\":{\"76\":1}}],[\"数据库系统\",{\"1\":{\"65\":1}}],[\"数据库缓存\",{\"1\":{\"64\":1}}],[\"数据段\",{\"1\":{\"46\":1,\"51\":1}}],[\"维护\",{\"1\":{\"126\":1}}],[\"结果的保存路径\",{\"1\":{\"203\":1,\"211\":1}}],[\"结果可能为\",{\"1\":{\"25\":1}}],[\"结尾的匹配子序列个数\",{\"1\":{\"125\":1}}],[\"以下内容\",{\"1\":{\"208\":1}}],[\"以下是小鸡的数据库学习笔记\",{\"1\":{\"92\":1}}],[\"以下是小鸡的操作系统学习笔记\",{\"1\":{\"42\":1}}],[\"以下是小鸡的c++学习笔记\",{\"1\":{\"18\":1}}],[\"以\",{\"1\":{\"125\":1}}],[\"令\",{\"1\":{\"125\":1}}],[\"说明\",{\"0\":{\"123\":1,\"137\":1,\"150\":1,\"161\":1,\"172\":1}}],[\"取模\",{\"1\":{\"119\":1,\"133\":1}}],[\"输入图像的尺寸\",{\"1\":{\"210\":1}}],[\"输入以下命令\",{\"1\":{\"204\":1}}],[\"输入以下命令后耐心等待即可\",{\"1\":{\"199\":1}}],[\"输入以下指令进入yolov11环境\",{\"1\":{\"198\":1}}],[\"输入以下指令创建一个名为yolov11\",{\"1\":{\"197\":1}}],[\"输入下方命令即可安装pytorch\",{\"1\":{\"198\":1}}],[\"输入\",{\"0\":{\"121\":1,\"135\":1,\"146\":1,\"148\":1,\"159\":1,\"170\":1},\"1\":{\"194\":3}}],[\"输入输出样例\",{\"0\":{\"120\":1,\"134\":1,\"145\":1,\"158\":1,\"169\":1}}],[\"输入描述\",{\"0\":{\"118\":1,\"132\":1,\"143\":1,\"156\":1,\"167\":1}}],[\"输出每天买卖情况\",{\"1\":{\"177\":1}}],[\"输出运算结果\",{\"1\":{\"141\":1}}],[\"输出\",{\"0\":{\"122\":1,\"136\":1,\"147\":1,\"149\":1,\"160\":1,\"171\":1}}],[\"输出描述\",{\"0\":{\"119\":1,\"133\":1,\"144\":1,\"157\":1,\"168\":1}}],[\"输出1\",{\"1\":{\"36\":1}}],[\"输出2\",{\"1\":{\"36\":1}}],[\"子序列是指通过从原始序列中删除某些元素\",{\"1\":{\"117\":1,\"131\":1}}],[\"注释掉\",{\"1\":{\"208\":1}}],[\"注册登录后进入如下页面\",{\"1\":{\"207\":1}}],[\"注\",{\"1\":{\"117\":1,\"131\":1}}],[\"注意事项\",{\"0\":{\"99\":1}}],[\"宝箱的最终命运掌握在你手中\",{\"1\":{\"117\":1}}],[\"宝箱表面刻着两串小写字母\",{\"1\":{\"117\":1}}],[\"现在\",{\"1\":{\"117\":1}}],[\"信心十足地摆在了所有参赛者面前\",{\"1\":{\"117\":1}}],[\"信号量\",{\"1\":{\"64\":1}}],[\"信号\",{\"1\":{\"47\":1,\"64\":1}}],[\"并保证最简分数表示\",{\"1\":{\"151\":1}}],[\"并且栈顶运算符的优先级不低于当前运算符\",{\"1\":{\"151\":1}}],[\"并附言\",{\"1\":{\"117\":1}}],[\"并重新将宝箱锁好\",{\"1\":{\"117\":1}}],[\"并发事务是指在数据库系统中\",{\"1\":{\"82\":1}}],[\"并发事务问题\",{\"0\":{\"82\":1}}],[\"并发事务的数据库之间是独立的\",{\"1\":{\"80\":1}}],[\"并发访问数据库时\",{\"1\":{\"80\":1}}],[\"连夜更换了密码的生成规则\",{\"1\":{\"117\":1}}],[\"连接到远程仓库\",{\"1\":{\"16\":1}}],[\"题目只保证初始表达式中不含负数\",{\"1\":{\"150\":1}}],[\"题面\",{\"0\":{\"117\":1,\"131\":1,\"142\":1,\"155\":1,\"166\":1,\"177\":1,\"181\":1,\"185\":1}}],[\"题解\",{\"0\":{\"3\":1}}],[\"简要题面\",{\"0\":{\"116\":1,\"130\":1,\"141\":1,\"154\":1,\"165\":1}}],[\"简单理解就是对数据在某个时刻的状态记录下来\",{\"1\":{\"74\":1}}],[\"占用更多磁盘空间\",{\"1\":{\"114\":1}}],[\"额外存储\",{\"1\":{\"114\":1}}],[\"再去聚簇索引查找实际数据\",{\"1\":{\"114\":1}}],[\"再次查询时\",{\"1\":{\"86\":1}}],[\"再次查询该条数据\",{\"1\":{\"85\":1}}],[\"灵活性高\",{\"1\":{\"113\":1}}],[\"尤其是对经常作为查询条件的列建立非聚簇索引\",{\"1\":{\"113\":1}}],[\"回表\",{\"1\":{\"112\":1}}],[\"回滚指针\",{\"1\":{\"73\":1}}],[\"行号或主键\",{\"1\":{\"110\":1}}],[\"性能下降\",{\"1\":{\"108\":1}}],[\"性能最高\",{\"1\":{\"88\":1}}],[\"大字段影响性能\",{\"1\":{\"108\":1}}],[\"大大减少了随机\",{\"1\":{\"97\":1}}],[\"插入新数据时可能需要调整数据存储位置来维护顺序\",{\"1\":{\"108\":1}}],[\"插入和更新代价高\",{\"1\":{\"108\":1}}],[\"插入了一条新数据\",{\"1\":{\"86\":1}}],[\"某些查询只需要使用聚簇索引就能完成\",{\"1\":{\"107\":1}}],[\"特别是范围查询效率高\",{\"1\":{\"107\":1}}],[\"特点\",{\"0\":{\"105\":1,\"111\":1},\"1\":{\"64\":1}}],[\"优点\",{\"0\":{\"107\":1,\"113\":1}}],[\"优势\",{\"0\":{\"95\":1}}],[\"查询效率低\",{\"1\":{\"114\":1}}],[\"查询效率高\",{\"1\":{\"107\":1}}],[\"查询非常快\",{\"1\":{\"107\":1}}],[\"查询过程就是遍历聚簇索引找到数据的过程\",{\"1\":{\"106\":1}}],[\"查询时从\",{\"1\":{\"74\":1}}],[\"工作原理\",{\"0\":{\"106\":1,\"112\":1}}],[\"定义\",{\"0\":{\"104\":1,\"110\":1}}],[\"聚簇索引的叶子节点存储的是完整的数据\",{\"1\":{\"106\":1}}],[\"聚簇索引是指数据表中的数据按照索引的顺序排列\",{\"1\":{\"104\":1}}],[\"聚簇索引\",{\"0\":{\"102\":1,\"103\":1}}],[\"<=\",{\"1\":{\"152\":3}}],[\"<\",{\"1\":{\"101\":1}}],[\"<<0<<\",{\"1\":{\"187\":1}}],[\"<<tmp\",{\"1\":{\"187\":1}}],[\"<<k<<\",{\"1\":{\"187\":2}}],[\"<<j<<\",{\"1\":{\"187\":2}}],[\"<<ans\",{\"1\":{\"152\":1,\"179\":1}}],[\"<<\",{\"1\":{\"31\":3,\"34\":3,\"36\":4,\"37\":6,\"38\":3,\"41\":7,\"127\":1,\"139\":1,\"183\":1}}],[\"避免更新\",{\"1\":{\"126\":1}}],[\"避免二次查找\",{\"1\":{\"107\":2}}],[\"避免范围查询中断\",{\"0\":{\"101\":1}}],[\"避免了悬空指针和资源泄露\",{\"1\":{\"41\":1}}],[\"而你敏锐地发现\",{\"1\":{\"131\":1}}],[\"而不是直接存储数据\",{\"1\":{\"111\":1}}],[\"而\",{\"1\":{\"99\":1}}],[\"因此在使用非聚簇索引时\",{\"1\":{\"112\":1}}],[\"因此插入效率比非聚簇索引低\",{\"1\":{\"108\":1}}],[\"因此通过聚簇索引进行查询时\",{\"1\":{\"106\":1}}],[\"因此b字段用不上索引\",{\"1\":{\"101\":1}}],[\"因此我们可以看到\",{\"1\":{\"99\":1}}],[\"因为聚簇索引中包含完整数据\",{\"1\":{\"107\":1}}],[\"因为数据物理上按顺序存储\",{\"1\":{\"107\":1}}],[\"因为数据物理上只能有一种排列顺序\",{\"1\":{\"104\":1}}],[\"因为\",{\"1\":{\"101\":1}}],[\"因为后面的字段全局无序\",{\"1\":{\"100\":1}}],[\"因为有专门的线程处理用户输入\",{\"1\":{\"53\":1}}],[\"因为总有一些场景需要进行拷贝\",{\"1\":{\"33\":1}}],[\"排序\",{\"1\":{\"99\":1}}],[\"段建立索引\",{\"1\":{\"99\":1}}],[\"假如我们对\",{\"1\":{\"99\":1}}],[\"筛选效率\",{\"0\":{\"98\":1}}],[\"操作\",{\"1\":{\"97\":1}}],[\"操作系统自身\",{\"1\":{\"65\":1}}],[\"操作系统维护消息缓冲区\",{\"1\":{\"64\":1}}],[\"操作系统中\",{\"1\":{\"54\":1}}],[\"操作系统中的进程与线程\",{\"0\":{\"20\":1},\"1\":{\"20\":1}}],[\"操作系统内保存该进程的元信息\",{\"1\":{\"46\":1}}],[\"操作系统会为它分配专属的资源\",{\"1\":{\"45\":1}}],[\"操作系统\",{\"0\":{\"42\":1}}],[\"无法确定则输出一行\",{\"1\":{\"168\":1}}],[\"无法利用多核\",{\"1\":{\"22\":1}}],[\"无需回表\",{\"1\":{\"97\":1}}],[\"覆盖索引\",{\"0\":{\"97\":1}}],[\"覆盖了\",{\"1\":{\"83\":1}}],[\"索引的叶子节点储存的不仅是索引列的值\",{\"1\":{\"104\":1}}],[\"索引可能不会被有效利用\",{\"1\":{\"100\":1}}],[\"索引\",{\"1\":{\"96\":1}}],[\"空间和性能优化\",{\"0\":{\"96\":1}}],[\"概念\",{\"0\":{\"94\":1}}],[\"联合索引可以使得通过索引筛选出来的数据更少\",{\"1\":{\"98\":1}}],[\"联合索引的优势在于它可以通过一个索引实现多个字段的索引效果\",{\"1\":{\"94\":1}}],[\"联合索引\",{\"0\":{\"93\":1},\"1\":{\"94\":1}}],[\"使得它们按顺序执行\",{\"1\":{\"91\":1}}],[\"使用yolo11训练模型\",{\"0\":{\"205\":1}}],[\"使用以下命令可以查看当前的numpy版本\",{\"1\":{\"204\":1}}],[\"使用方式\",{\"1\":{\"65\":1}}],[\"使用率\",{\"1\":{\"23\":1}}],[\"使用\",{\"0\":{\"39\":1},\"1\":{\"12\":1,\"41\":2}}],[\"使用vuepress搭建个人博客\",{\"0\":{\"5\":1}}],[\"确保如果一个事务中执行多次相同的\",{\"1\":{\"90\":1}}],[\"确保资源仅被释放一次\",{\"1\":{\"30\":1}}],[\"允许脏读\",{\"1\":{\"88\":1}}],[\"发现多了一条数据\",{\"1\":{\"86\":1}}],[\"发布站点\",{\"0\":{\"17\":1}}],[\"却发现其他事务插入了满足查询条件的新数据\",{\"1\":{\"86\":1}}],[\"幻读\",{\"0\":{\"86\":1}}],[\"两次查询的结果不同\",{\"1\":{\"85\":1}}],[\"此刻\",{\"1\":{\"142\":1}}],[\"此后\",{\"1\":{\"85\":1}}],[\"此时b事务访问了该条数据读到的就是\",{\"1\":{\"84\":1}}],[\"此时\",{\"1\":{\"83\":2}}],[\"先查询某条数据\",{\"1\":{\"85\":1}}],[\"引起事务中多次查询结果不一致\",{\"1\":{\"85\":1}}],[\"造成了数据不一致\",{\"1\":{\"84\":1}}],[\"脏读\",{\"0\":{\"84\":1}}],[\"脏写\",{\"0\":{\"83\":1}}],[\"第二天全部卖出\",{\"1\":{\"178\":1}}],[\"第二行一个字符串\",{\"1\":{\"118\":1}}],[\"第二类更新丢失\",{\"1\":{\"83\":1}}],[\"第一行输入n\",{\"1\":{\"156\":1}}],[\"第一行一个字符串\",{\"1\":{\"118\":1}}],[\"第一类更新丢失\",{\"1\":{\"83\":1}}],[\"更精确的缩小结果集的范围\",{\"1\":{\"98\":1}}],[\"更新的数据也回滚\",{\"1\":{\"83\":1}}],[\"更新丢失\",{\"0\":{\"83\":1}}],[\"更改的数据\",{\"1\":{\"83\":1}}],[\"更改并提交\",{\"1\":{\"83\":1}}],[\"更改失败回滚\",{\"1\":{\"83\":1}}],[\"更改完成还没提交\",{\"1\":{\"83\":2}}],[\"持久性\",{\"0\":{\"81\":1}}],[\"串行化\",{\"0\":{\"91\":1},\"1\":{\"80\":1}}],[\"表示启用\",{\"1\":{\"210\":1}}],[\"表示单类别检测\",{\"1\":{\"210\":1}}],[\"表示多类别检测\",{\"1\":{\"210\":1}}],[\"表示使用第一个\",{\"1\":{\"210\":1}}],[\"表示是否缓存数据\",{\"1\":{\"210\":1}}],[\"表示每位同学最好的朋友的序号\",{\"1\":{\"156\":1}}],[\"表示学生人数\",{\"1\":{\"156\":1}}],[\"表示形成前\",{\"1\":{\"138\":1}}],[\"表示\",{\"1\":{\"125\":1}}],[\"表示这个版本是由将来启动的事务生成的\",{\"1\":{\"74\":1}}],[\"表示这个版本已经是已提交的事务生成的\",{\"1\":{\"74\":1}}],[\"表面事务必须是独立的\",{\"1\":{\"80\":1}}],[\"对于更高版本的支持可能较为有限\",{\"1\":{\"194\":1}}],[\"对于特定列的查询查找速度快\",{\"1\":{\"113\":1}}],[\"对于同时允许的多个事务\",{\"1\":{\"82\":1}}],[\"对数据进行修改的所有并发事务是彼此隔离的\",{\"1\":{\"80\":1}}],[\"对象可能会相互引用\",{\"1\":{\"38\":1}}],[\"对象\",{\"1\":{\"26\":1}}],[\"对象分离\",{\"1\":{\"25\":1}}],[\"隔离性\",{\"0\":{\"80\":1}}],[\"隔离级别\",{\"1\":{\"80\":1}}],[\"隔离级别中\",{\"1\":{\"74\":2}}],[\"隔离级别都是由\",{\"1\":{\"74\":1}}],[\"隔离级别的实现\",{\"1\":{\"74\":1}}],[\"防止了部分操作成功部分操作失败的情况\",{\"1\":{\"78\":1}}],[\"要么全部不执行\",{\"1\":{\"78\":1}}],[\"要么全部失败\",{\"1\":{\"76\":1}}],[\"语句得到的都是相同的结果\",{\"1\":{\"90\":1}}],[\"语句都复用这个\",{\"1\":{\"74\":1}}],[\"语句时生成一个\",{\"1\":{\"74\":1}}],[\"语句时都生成一个\",{\"1\":{\"74\":1}}],[\"区别在于\",{\"1\":{\"74\":1}}],[\"则表示使用\",{\"1\":{\"210\":1}}],[\"则先计算栈顶运算\",{\"1\":{\"151\":1}}],[\"则\",{\"1\":{\"84\":1,\"126\":2}}],[\"则整个事务失败\",{\"1\":{\"78\":1}}],[\"则此条记录可读\",{\"1\":{\"74\":1}}],[\"则此条记录不可读\",{\"1\":{\"74\":1}}],[\"则分为两种情况\",{\"1\":{\"74\":1}}],[\"若为\",{\"1\":{\"210\":1}}],[\"若没有达到则需要更新显卡驱动\",{\"1\":{\"194\":1}}],[\"若运算符栈\",{\"1\":{\"151\":1}}],[\"若结果不为整数\",{\"1\":{\"144\":1}}],[\"若你能算清\",{\"1\":{\"117\":1}}],[\"若\",{\"1\":{\"84\":1,\"126\":1}}],[\"若当前记录的事务\",{\"1\":{\"74\":2}}],[\"若线程仍可\",{\"1\":{\"25\":1}}],[\"落在中间部分\",{\"1\":{\"74\":1}}],[\"落在右侧部分\",{\"1\":{\"74\":1}}],[\"落在左侧部分\",{\"1\":{\"74\":1}}],[\"判断记录某个版本是否可见的规则如下\",{\"1\":{\"74\":1}}],[\"做对比\",{\"1\":{\"74\":1}}],[\"快照\",{\"1\":{\"74\":1}}],[\"会自动隐式生成一个\",{\"1\":{\"105\":1}}],[\"会自动将主键列作为聚簇索引\",{\"1\":{\"105\":1}}],[\"会尝试使用一个唯一的非空索引作为聚簇索引\",{\"1\":{\"105\":1}}],[\"会一直向右匹配直到遇到范围查询\",{\"1\":{\"101\":1}}],[\"会首先匹配最左边的字段\",{\"1\":{\"100\":1}}],[\"会将\",{\"1\":{\"83\":1}}],[\"会导致数据不一致和丢失更新的问题\",{\"1\":{\"83\":1}}],[\"会生成一致性视图\",{\"1\":{\"74\":1}}],[\"会调用\",{\"1\":{\"25\":1}}],[\"值不是有序的\",{\"1\":{\"101\":1}}],[\"值\",{\"1\":{\"74\":1}}],[\"下滑找到yolo11n\",{\"1\":{\"201\":1}}],[\"下一个要生成的事务\",{\"1\":{\"74\":1}}],[\"下载zip格式的数据集\",{\"1\":{\"207\":1}}],[\"下载windows版本的压缩包文件\",{\"1\":{\"195\":1}}],[\"下载cuda前需要先查看显卡支持的cuda版本最高是多少\",{\"1\":{\"194\":1}}],[\"下载免费的社区版就够用了\",{\"1\":{\"192\":1}}],[\"下载完成后开始安装\",{\"1\":{\"192\":1}}],[\"下载完成后执行以下命令即可在本地打开博客\",{\"1\":{\"13\":1}}],[\"下载完成之后打开anaconda3进行安装\",{\"1\":{\"191\":1}}],[\"下载地址\",{\"1\":{\"7\":1}}],[\"里最小的值\",{\"1\":{\"74\":1}}],[\"里面的内容不要改\",{\"1\":{\"13\":1}}],[\"个字符的部分子序列数量\",{\"1\":{\"138\":1}}],[\"个字符的子序列数量\",{\"1\":{\"126\":1}}],[\"个\",{\"1\":{\"74\":1}}],[\"读提交\",{\"1\":{\"74\":1}}],[\"时影响\",{\"1\":{\"126\":1}}],[\"时\",{\"1\":{\"74\":1,\"101\":1}}],[\"时用到的一致性读视图\",{\"1\":{\"74\":1}}],[\"时间到就切换\",{\"1\":{\"55\":1}}],[\"时间片轮转调度\",{\"0\":{\"55\":1}}],[\"时间等\",{\"1\":{\"45\":1}}],[\"链条进行连接\",{\"1\":{\"73\":1}}],[\"版本之间通过\",{\"1\":{\"73\":1}}],[\"指向之前生成的\",{\"1\":{\"73\":1}}],[\"指针\",{\"1\":{\"39\":1}}],[\"记录最近一次更新这条数据的事务\",{\"1\":{\"73\":1}}],[\"记录当前有多少个\",{\"1\":{\"36\":1}}],[\"事务隔离级别越高\",{\"1\":{\"87\":1}}],[\"事务隔离级别\",{\"0\":{\"87\":1}}],[\"事务对同一数据修改并提交\",{\"1\":{\"85\":1}}],[\"事务读到的就是脏数据\",{\"1\":{\"84\":1}}],[\"事务回滚\",{\"1\":{\"84\":1}}],[\"事务修改了某条数据但还未提交\",{\"1\":{\"84\":1}}],[\"事务提交造成的覆盖丢失\",{\"1\":{\"83\":1}}],[\"事务撤销造成的撤销丢失\",{\"1\":{\"83\":1}}],[\"事务同时操作一个数据\",{\"1\":{\"83\":2,\"84\":1,\"85\":1}}],[\"事务一旦提交\",{\"1\":{\"81\":1}}],[\"事务之间的操作不会互相影响\",{\"1\":{\"80\":1}}],[\"事务前后数据的完整性必须保持一致\",{\"1\":{\"79\":1}}],[\"事务中的所有元素必须作为一个整体提交或回滚\",{\"1\":{\"78\":1}}],[\"事务中的操作要么全部执行\",{\"1\":{\"78\":1}}],[\"事务的各元素是不可分的\",{\"1\":{\"78\":1}}],[\"事务的四大特性acid\",{\"0\":{\"77\":1}}],[\"事务是一个完整的操作\",{\"1\":{\"78\":1}}],[\"事务是一个不可分割的工作单位\",{\"1\":{\"78\":1}}],[\"事务是\",{\"1\":{\"76\":1}}],[\"事务\",{\"1\":{\"73\":1,\"86\":3}}],[\"原子性\",{\"0\":{\"78\":1}}],[\"原则来决定数据是否显示\",{\"1\":{\"72\":1}}],[\"原来的对象指针被置为\",{\"1\":{\"30\":1}}],[\"来排序\",{\"1\":{\"99\":1}}],[\"来实现管理\",{\"1\":{\"72\":1}}],[\"来保存数据的历史版本\",{\"1\":{\"72\":1}}],[\"实现\",{\"1\":{\"74\":1}}],[\"实现多版本的管理\",{\"1\":{\"72\":1}}],[\"实例共享该资源\",{\"1\":{\"36\":1}}],[\"比如\",{\"1\":{\"97\":1}}],[\"比如每个连接都开线程\",{\"1\":{\"70\":1}}],[\"比如点击按钮后\",{\"1\":{\"53\":1}}],[\"永远得不到执行机会\",{\"1\":{\"69\":1}}],[\"饥饿\",{\"0\":{\"69\":1}}],[\"活锁\",{\"0\":{\"69\":1}}],[\"互相卡死\",{\"1\":{\"68\":1}}],[\"又等\",{\"1\":{\"68\":1}}],[\"等\",{\"1\":{\"101\":1}}],[\"等线程\",{\"1\":{\"68\":1}}],[\"等待训练完成\",{\"1\":{\"210\":1}}],[\"等待事件\",{\"1\":{\"47\":1}}],[\"等待被调度运行\",{\"1\":{\"47\":1}}],[\"等待网络\",{\"1\":{\"22\":1}}],[\"等待自动部署完成后在当前页面即可访问站点\",{\"1\":{\"17\":1}}],[\"等待自动下载\",{\"1\":{\"13\":1}}],[\"死锁\",{\"0\":{\"68\":1}}],[\"未提交读\",{\"0\":{\"88\":1},\"1\":{\"80\":1}}],[\"未加锁导致数据混乱\",{\"1\":{\"67\":1}}],[\"未处理\",{\"1\":{\"25\":1}}],[\"竞态条件\",{\"0\":{\"67\":1}}],[\"八\",{\"0\":{\"66\":1}}],[\"守护进程\",{\"1\":{\"65\":1}}],[\"渲染线程\",{\"1\":{\"65\":1}}],[\"播放线程\",{\"1\":{\"65\":1}}],[\"视频播放器\",{\"1\":{\"65\":1}}],[\"视频共享\",{\"1\":{\"64\":1}}],[\"浏览器\",{\"1\":{\"65\":1}}],[\"场景\",{\"1\":{\"65\":1}}],[\"七\",{\"0\":{\"65\":1}}],[\"闹钟\",{\"1\":{\"64\":1}}],[\"异步事件通知\",{\"1\":{\"64\":1}}],[\"服务端模型\",{\"1\":{\"64\":1}}],[\"客户端\",{\"1\":{\"64\":1}}],[\"最好纯英文路径\",{\"1\":{\"191\":1}}],[\"最后的才是最好的\",{\"0\":{\"164\":1}}],[\"最后只找到了写着每一位同学最好的朋友序号的小纸条\",{\"1\":{\"155\":1}}],[\"最下方的纸条是n号同学写的\",{\"1\":{\"155\":1}}],[\"最上方的纸条是1号同学写的\",{\"1\":{\"155\":1}}],[\"最大公因数\",{\"1\":{\"151\":1}}],[\"最终找回失落的宝藏\",{\"1\":{\"142\":1}}],[\"最终答案\",{\"1\":{\"138\":1}}],[\"最左匹配原则\",{\"0\":{\"100\":1}}],[\"最灵活\",{\"1\":{\"64\":1}}],[\"最快\",{\"1\":{\"64\":1}}],[\"网络\",{\"1\":{\"64\":1}}],[\"套接字\",{\"1\":{\"64\":1}}],[\"共享内存问题\",{\"1\":{\"82\":1}}],[\"共享内存\",{\"1\":{\"64\":1}}],[\"共享进程的内存空间\",{\"1\":{\"52\":1}}],[\"控制访问共享资源\",{\"1\":{\"64\":1}}],[\"消息队列\",{\"1\":{\"64\":1}}],[\"系统资源耗尽\",{\"1\":{\"70\":1}}],[\"系统服务通信\",{\"1\":{\"64\":1}}],[\"系统开销\",{\"1\":{\"52\":1}}],[\"路径为项目根目录\",{\"1\":{\"208\":1}}],[\"路径下\",{\"1\":{\"208\":1,\"210\":1}}],[\"路径命名\",{\"1\":{\"64\":1}}],[\"路径信息为\",{\"1\":{\"15\":1}}],[\"命名管道\",{\"1\":{\"64\":1}}],[\"单向\",{\"1\":{\"64\":1}}],[\"单线程的局限\",{\"0\":{\"22\":1}}],[\"管道\",{\"1\":{\"64\":1}}],[\"管理的对象\",{\"1\":{\"41\":1}}],[\"举例用途\",{\"1\":{\"64\":1}}],[\"方式\",{\"1\":{\"64\":1}}],[\"方法可以将\",{\"1\":{\"41\":1}}],[\"六\",{\"0\":{\"63\":1}}],[\"混合模型\",{\"0\":{\"62\":1}}],[\"开销大\",{\"1\":{\"61\":1}}],[\"适配多核\",{\"1\":{\"61\":1}}],[\"真正的并行性\",{\"1\":{\"61\":1}}],[\"内核线程\",{\"1\":{\"65\":1}}],[\"内核调度轻量线程\",{\"1\":{\"62\":1}}],[\"内核级线程\",{\"0\":{\"61\":1}}],[\"内存共享\",{\"1\":{\"64\":1}}],[\"内存空间\",{\"1\":{\"52\":1}}],[\"内存\",{\"1\":{\"45\":1}}],[\"非主键索引在\",{\"1\":{\"111\":1}}],[\"非聚簇索引需要额外创建索引树\",{\"1\":{\"114\":1}}],[\"非聚簇索引查询时需要通过索引找到主键\",{\"1\":{\"114\":1}}],[\"非聚簇索引可以加速对索引列的查找\",{\"1\":{\"113\":1}}],[\"非聚簇索引的叶子节点存储的时索引列的值和指向数据的指针\",{\"1\":{\"112\":1}}],[\"非聚簇索引的叶子节点存储的是索引列的值和指向实际数据的指针\",{\"1\":{\"110\":1}}],[\"非聚簇索引是指索引和数据时分开存储的\",{\"1\":{\"110\":1}}],[\"非聚簇索引\",{\"0\":{\"102\":1,\"109\":1}}],[\"非操作系统\",{\"1\":{\"60\":1}}],[\"非抢占式调度\",{\"0\":{\"57\":1}}],[\"五\",{\"0\":{\"59\":1}}],[\"放弃控制权才切换\",{\"1\":{\"57\":1}}],[\"高优先级任务会中断低优先级任务\",{\"1\":{\"56\":1}}],[\"抢占式调度\",{\"0\":{\"56\":1}}],[\"每天选择一支收益最大的全买\",{\"1\":{\"178\":1}}],[\"每人每次最多拿m个特产\",{\"1\":{\"166\":1}}],[\"每行一个序号\",{\"1\":{\"157\":1}}],[\"每位同学都有一个独一无二的序号\",{\"1\":{\"155\":1}}],[\"每张表只能有一个聚簇索引\",{\"1\":{\"104\":1}}],[\"每一条数据都有多个版本\",{\"1\":{\"73\":1}}],[\"每条数据都有两个隐藏字段\",{\"1\":{\"73\":1}}],[\"每个人都想和自己最好的朋友在同一个小组\",{\"1\":{\"155\":1}}],[\"每个索引都有自己的存储顺序\",{\"1\":{\"110\":1}}],[\"每个标签页一个进程\",{\"1\":{\"65\":1}}],[\"每个进程\",{\"1\":{\"55\":1}}],[\"每块资源关联一个引用计数\",{\"1\":{\"36\":1}}],[\"调度是关键\",{\"1\":{\"54\":1}}],[\"四\",{\"0\":{\"54\":1}}],[\"稳定性低\",{\"1\":{\"52\":1}}],[\"稳定性高\",{\"1\":{\"52\":1}}],[\"稳定性\",{\"1\":{\"52\":1}}],[\"同一事务中后面的所有\",{\"1\":{\"74\":1}}],[\"同一进程内通信非常简单\",{\"1\":{\"52\":1}}],[\"同时针对不同的隔离级别\",{\"1\":{\"72\":1}}],[\"同步或互斥控制\",{\"1\":{\"64\":1}}],[\"同样实现线程对象所有权转移\",{\"1\":{\"25\":1}}],[\"需要注意关闭加速软件否则会下载失败\",{\"1\":{\"198\":1}}],[\"需要注意以下情况\",{\"1\":{\"182\":1}}],[\"需要选择添加到环境变量\",{\"1\":{\"191\":1}}],[\"需要合并成\",{\"1\":{\"182\":1}}],[\"需要实现分数的四则运算\",{\"1\":{\"151\":1}}],[\"需要依次弹出执行\",{\"1\":{\"151\":1}}],[\"需要逐一解开才能激活\",{\"1\":{\"142\":1}}],[\"需要回表\",{\"1\":{\"114\":1}}],[\"需要先通过非聚簇索引找到主键值\",{\"1\":{\"112\":1}}],[\"需要借助操作系统机制来通信\",{\"1\":{\"63\":1}}],[\"需要借助操作系统\",{\"1\":{\"52\":1}}],[\"需要修改\",{\"1\":{\"15\":1}}],[\"切换慢\",{\"1\":{\"61\":1}}],[\"切换快\",{\"1\":{\"60\":1}}],[\"切换开销较小\",{\"1\":{\"52\":1}}],[\"切换开销较大\",{\"1\":{\"52\":1}}],[\"切换到\",{\"1\":{\"12\":1}}],[\"切换到想要放置项目的路径\",{\"1\":{\"12\":1}}],[\"拥有独立的内存空间\",{\"1\":{\"52\":1}}],[\"独立的运行单位\",{\"1\":{\"52\":1}}],[\"基本概念\",{\"1\":{\"52\":1}}],[\"基本原理\",{\"0\":{\"30\":1,\"33\":1,\"36\":1,\"41\":1}}],[\"线程安全问题\",{\"1\":{\"82\":1}}],[\"线程池处理查询请求\",{\"1\":{\"65\":1}}],[\"线程由操作系统内核调度\",{\"1\":{\"61\":1}}],[\"线程由用户库管理\",{\"1\":{\"60\":1}}],[\"线程模型与实现方式\",{\"0\":{\"59\":1}}],[\"线程获得一段时间\",{\"1\":{\"55\":1}}],[\"线程可以在多核\",{\"1\":{\"53\":1}}],[\"线程\",{\"0\":{\"53\":1,\"66\":1},\"1\":{\"52\":1,\"68\":1}}],[\"线程对比\",{\"0\":{\"52\":1}}],[\"线程是系统调度的最小单位\",{\"1\":{\"49\":1}}],[\"寄存器\",{\"1\":{\"50\":1}}],[\"也可以直接点此下载\",{\"1\":{\"194\":1}}],[\"也可以修改到其他路径\",{\"1\":{\"191\":1}}],[\"也称为复合索引或组合索引\",{\"1\":{\"94\":1}}],[\"也称为轻量级进程\",{\"1\":{\"49\":1}}],[\"也就是最大事务\",{\"1\":{\"74\":1}}],[\"也就实现了不同的隔离级别\",{\"1\":{\"72\":1}}],[\"也不要下载这个插件\",{\"1\":{\"13\":1}}],[\"但占用更多内存\",{\"1\":{\"210\":1}}],[\"但她突然发现名单不见了\",{\"1\":{\"155\":1}}],[\"但不改变剩余元素的相对位置所形成的新序列\",{\"1\":{\"117\":1,\"131\":1}}],[\"但不能完全防止幻读\",{\"1\":{\"90\":1}}],[\"但不能防止可重复读和幻读\",{\"1\":{\"89\":1}}],[\"但性能最差\",{\"1\":{\"91\":1}}],[\"但一致性最差\",{\"1\":{\"88\":1}}],[\"但是她不想等待漫长的分配过程\",{\"1\":{\"166\":1}}],[\"但是性能越差\",{\"1\":{\"87\":1}}],[\"但是没有提交\",{\"1\":{\"74\":1}}],[\"但需同步手段\",{\"1\":{\"64\":1}}],[\"但每个线程也有自己的执行状态\",{\"1\":{\"49\":1}}],[\"但防拷贝其实也不是一个很好的办法\",{\"1\":{\"33\":1}}],[\"什么是事务\",{\"0\":{\"76\":1}}],[\"什么是线程\",{\"0\":{\"48\":1}}],[\"什么是进程\",{\"0\":{\"44\":1}}],[\"终止\",{\"1\":{\"47\":1}}],[\"阻塞\",{\"1\":{\"47\":1}}],[\"阻塞当前线程\",{\"1\":{\"25\":1}}],[\"就根据回滚指针回滚到上一条记录继续比较\",{\"1\":{\"74\":1}}],[\"就是\",{\"1\":{\"74\":1}}],[\"就是通过\",{\"1\":{\"72\":1}}],[\"就绪\",{\"1\":{\"47\":1}}],[\"就需要用到\",{\"1\":{\"33\":1}}],[\"新建\",{\"1\":{\"47\":1}}],[\"新建仓库的时候不要创建\",{\"1\":{\"15\":1}}],[\"返回地址等\",{\"1\":{\"46\":1}}],[\"返回系统建议的并发线程数\",{\"1\":{\"25\":1}}],[\"局部变量\",{\"1\":{\"46\":1}}],[\"栈中可能仍有运算符\",{\"1\":{\"151\":1}}],[\"栈中的运算\",{\"1\":{\"151\":1}}],[\"栈\",{\"1\":{\"46\":1,\"151\":2}}],[\"动态分配内存\",{\"1\":{\"46\":1}}],[\"堆栈\",{\"1\":{\"50\":1}}],[\"堆\",{\"1\":{\"46\":1,\"51\":1}}],[\"静态变量等\",{\"1\":{\"46\":1}}],[\"静态函数\",{\"1\":{\"25\":1}}],[\"可能会产生分数\",{\"1\":{\"151\":1}}],[\"可能一个\",{\"1\":{\"117\":1,\"131\":1}}],[\"可读\",{\"1\":{\"74\":1}}],[\"可重复读\",{\"0\":{\"90\":1},\"1\":{\"74\":1,\"80\":1}}],[\"可执行指令\",{\"1\":{\"46\":1}}],[\"可以自行搜索\",{\"1\":{\"210\":1}}],[\"可以在官网挑选下载\",{\"1\":{\"194\":1}}],[\"可以在需要时临时提升为\",{\"1\":{\"41\":1}}],[\"可以由\",{\"1\":{\"126\":1}}],[\"可以由一个或者多个sql语句构成\",{\"1\":{\"76\":1}}],[\"可以得到子序列\",{\"1\":{\"117\":1,\"131\":1}}],[\"可以加速不同类型的查询\",{\"1\":{\"113\":1}}],[\"可以大大提高查询性能\",{\"1\":{\"113\":1}}],[\"可以直接复制粘贴修改到\",{\"1\":{\"191\":1}}],[\"可以直接从索引中找到需要的数据\",{\"1\":{\"106\":1}}],[\"可以直接读写进程数据段\",{\"1\":{\"52\":1}}],[\"可以将一方的\",{\"1\":{\"41\":1}}],[\"可以打破循环引用链\",{\"1\":{\"39\":1}}],[\"可以后续再赋值移动进其他线程\",{\"1\":{\"26\":1}}],[\"可以提高程序在多核\",{\"1\":{\"21\":1}}],[\"可以换\",{\"1\":{\"12\":1}}],[\"程序执行的基本单位\",{\"1\":{\"52\":1}}],[\"程序计数器\",{\"1\":{\"50\":1}}],[\"程序代码\",{\"1\":{\"46\":1}}],[\"程序结束时资源也不会被释放\",{\"1\":{\"38\":1}}],[\"描述\",{\"1\":{\"46\":1,\"47\":1}}],[\"组成部分\",{\"1\":{\"46\":1}}],[\"✅多个线程共享的资源\",{\"0\":{\"51\":1}}],[\"✅每个线程独有的资源\",{\"0\":{\"50\":1}}],[\"✅进程的生命周期\",{\"0\":{\"47\":1}}],[\"✅组成结构\",{\"0\":{\"46\":1}}],[\"✅定义\",{\"0\":{\"45\":1,\"49\":1}}],[\"进行推理\",{\"1\":{\"203\":1,\"211\":1}}],[\"进程可能遇到的问题\",{\"0\":{\"66\":1}}],[\"进程间通信\",{\"0\":{\"63\":1}}],[\"进程间通信较复杂\",{\"1\":{\"52\":1}}],[\"进程中的执行单位\",{\"1\":{\"52\":1}}],[\"进程\",{\"0\":{\"52\":1},\"1\":{\"52\":1}}],[\"进程控制块\",{\"1\":{\"46\":1}}],[\"进程是操作系统资源分配的最小单位\",{\"1\":{\"45\":1}}],[\"进程与线程的世纪应用\",{\"0\":{\"65\":1}}],[\"进程与线程的调度机制\",{\"0\":{\"54\":1}}],[\"进程与线程\",{\"0\":{\"43\":1}}],[\"进入当前页面搜索自己想要的数据集\",{\"1\":{\"207\":1}}],[\"进入roboflow官网\",{\"1\":{\"207\":1}}],[\"进入源码地址进行下载\",{\"1\":{\"201\":1}}],[\"进入cudnn官网\",{\"1\":{\"195\":1}}],[\"进入\",{\"1\":{\"12\":1,\"204\":1,\"211\":1}}],[\"弱引用\",{\"1\":{\"41\":1}}],[\"成功提升为\",{\"1\":{\"41\":1}}],[\"成员函数\",{\"1\":{\"25\":4}}],[\"升级为\",{\"1\":{\"41\":1}}],[\"观察一个由\",{\"1\":{\"41\":1}}],[\"它们存储在叶子节点中会导致索引体积变大\",{\"1\":{\"108\":1}}],[\"它对数据库中数据的更改就是永久性的\",{\"1\":{\"81\":1}}],[\"它决定哪个任务被\",{\"1\":{\"54\":1}}],[\"它不拥有资源的所有权\",{\"1\":{\"41\":1}}],[\"它更加轻质量\",{\"1\":{\"21\":1}}],[\"父子进程通信\",{\"1\":{\"64\":1}}],[\"父\",{\"1\":{\"39\":1}}],[\"通信方式\",{\"1\":{\"52\":1}}],[\"通常是\",{\"1\":{\"39\":1}}],[\"通过删除元素\",{\"1\":{\"117\":1,\"131\":1}}],[\"通过\",{\"1\":{\"41\":1,\"72\":1}}],[\"通过禁止拷贝的方式确保资源的唯一拥有权\",{\"1\":{\"33\":1}}],[\"通过管理权转移的方式避免资源重复释放\",{\"1\":{\"30\":1}}],[\"解压后得到下图三个文件夹\",{\"1\":{\"195\":1}}],[\"解四元一次方程\",{\"1\":{\"185\":1}}],[\"解析完整数字后\",{\"1\":{\"151\":1}}],[\"解法\",{\"0\":{\"124\":1,\"138\":1,\"151\":1,\"162\":1,\"173\":1,\"178\":1,\"182\":1,\"186\":1}}],[\"解锁线索更加复杂\",{\"1\":{\"117\":1}}],[\"解码线程\",{\"1\":{\"65\":1}}],[\"解决方法\",{\"0\":{\"39\":1}}],[\"解耦复杂逻辑\",{\"1\":{\"23\":1}}],[\"导致它们的引用计数始终不为\",{\"1\":{\"38\":1}}],[\"导致引用计数无法归零\",{\"1\":{\"38\":1}}],[\"相关信息\",{\"1\":{\"189\":1}}],[\"相等的情况下才会按照\",{\"1\":{\"99\":1}}],[\"相当于同时创建了索引\",{\"1\":{\"96\":1}}],[\"相互引用\",{\"1\":{\"38\":1}}],[\"相比多进程\",{\"1\":{\"21\":1}}],[\"例如\",{\"1\":{\"117\":1,\"131\":1}}],[\"例如索引\",{\"1\":{\"94\":1}}],[\"例如双向链表节点\",{\"1\":{\"38\":1}}],[\"例如要切换到\",{\"1\":{\"12\":1}}],[\"资源利用率高\",{\"1\":{\"53\":1}}],[\"资源分配和拥有的基本单位\",{\"1\":{\"52\":1}}],[\"资源已释放\",{\"1\":{\"41\":1}}],[\"资源泄露\",{\"1\":{\"38\":1}}],[\"资源自动释放\",{\"1\":{\"36\":1}}],[\"多版本链\",{\"0\":{\"73\":1},\"1\":{\"72\":1}}],[\"多版本并发控制\",{\"1\":{\"72\":1}}],[\"多任务控制中心\",{\"1\":{\"64\":1}}],[\"多级反馈队列调度\",{\"0\":{\"58\":1}}],[\"多个或不删除\",{\"1\":{\"117\":1,\"131\":1}}],[\"多个事务同时对数据库进行读写和修改的过程\",{\"1\":{\"82\":1}}],[\"多个线程共享资源\",{\"1\":{\"53\":1}}],[\"多个线程共享进程的资源\",{\"1\":{\"49\":1}}],[\"多个\",{\"1\":{\"38\":1}}],[\"多线程并发\",{\"1\":{\"82\":1}}],[\"多线程同时访问数据\",{\"1\":{\"67\":1}}],[\"多线程响应请求\",{\"1\":{\"65\":1}}],[\"多线程的优势\",{\"0\":{\"23\":1}}],[\"多线程是一种允许程序并发执行多个任务的技术\",{\"1\":{\"21\":1}}],[\"多线程编程\",{\"0\":{\"19\":1}}],[\"+s\",{\"1\":{\"139\":1}}],[\"+dp\",{\"1\":{\"127\":1,\"139\":3}}],[\"+=\",{\"1\":{\"126\":2,\"138\":4}}],[\"+\",{\"1\":{\"45\":1,\"65\":3,\"72\":1,\"143\":1,\"151\":2,\"152\":4,\"185\":3}}],[\"++\",{\"1\":{\"37\":2}}],[\"+1\",{\"1\":{\"36\":1,\"127\":1,\"139\":1}}],[\"当你正专注解题时\",{\"1\":{\"131\":1}}],[\"当查询\",{\"1\":{\"101\":1}}],[\"当这些事务访问数据库中的相同数据时\",{\"1\":{\"82\":1}}],[\"当不同的事务同时操作相同的数据时\",{\"1\":{\"80\":1}}],[\"当一个事务第一次执行查询\",{\"1\":{\"74\":1}}],[\"当引用计数降为\",{\"1\":{\"36\":1}}],[\"当前事务\",{\"1\":{\"74\":1}}],[\"当前能不能正确的静态部署\",{\"1\":{\"16\":1}}],[\"当前源\",{\"1\":{\"12\":1}}],[\"析构或重新赋值时\",{\"1\":{\"36\":1}}],[\"析构函数\",{\"1\":{\"25\":1}}],[\"拷贝时引用计数\",{\"1\":{\"36\":1}}],[\"禁止拷贝构造与赋值\",{\"1\":{\"34\":1}}],[\"了\",{\"1\":{\"33\":1}}],[\"编译错误\",{\"1\":{\"33\":1}}],[\">tmp\",{\"1\":{\"179\":1}}],[\">=mp\",{\"1\":{\"152\":1}}],[\">=\",{\"1\":{\"152\":3}}],[\">m\",{\"1\":{\"38\":2}}],[\">\",{\"1\":{\"31\":1,\"34\":1,\"37\":1,\"101\":2}}],[\"~point\",{\"1\":{\"38\":1,\"41\":1}}],[\"~shared\",{\"1\":{\"37\":1}}],[\"~unique\",{\"1\":{\"34\":1}}],[\"~auto\",{\"1\":{\"31\":1}}],[\"~thread\",{\"1\":{\"25\":1}}],[\"所以聪明的你可以告诉她吗\",{\"1\":{\"166\":1}}],[\"所以他们都会想方设法拿到最后一个特产\",{\"1\":{\"166\":1}}],[\"所以老师让每一位同学把自己最好的朋友的序号写在纸上按顺序交给她\",{\"1\":{\"155\":1}}],[\"所以直接一步到位\",{\"1\":{\"13\":1}}],[\"所有sql语句都执行成功时整个事务成功\",{\"1\":{\"76\":1}}],[\"所取代\",{\"1\":{\"30\":1}}],[\"被聪明的参赛者们打开了第一个宝箱后\",{\"1\":{\"142\":1}}],[\"被\",{\"1\":{\"30\":1}}],[\"后\",{\"1\":{\"30\":1}}],[\"后台运行\",{\"1\":{\"25\":1}}],[\"很多公司已禁止使用\",{\"1\":{\"30\":1}}],[\"这一天芳芳旅游回来给他们俩带了n个特产让他们自己分\",{\"1\":{\"166\":1}}],[\"这一天芳芳来到了一个有n位同学的新班级\",{\"1\":{\"155\":1}}],[\"这一天\",{\"1\":{\"155\":1}}],[\"这一次\",{\"1\":{\"117\":1}}],[\"这里加载是的上一次训练了100轮的模型\",{\"1\":{\"210\":1}}],[\"这里使用\",{\"1\":{\"208\":1}}],[\"这里放一些做过的笔试题\",{\"1\":{\"188\":1}}],[\"这里放一些校赛自己出的题目\",{\"1\":{\"128\":1}}],[\"这里的\",{\"1\":{\"12\":1,\"16\":1}}],[\"这个库包含了几乎全部运行yolov11所需的环境\",{\"1\":{\"199\":1}}],[\"这个班的老师也要求分组学习\",{\"1\":{\"155\":1}}],[\"这个法宝被施加了层层禁制\",{\"1\":{\"142\":1}}],[\"这个字符串中所有能组合成\",{\"1\":{\"131\":1}}],[\"这个过程比直接使用聚簇索引慢\",{\"1\":{\"114\":1}}],[\"这个指针就是该行对应的主键值\",{\"1\":{\"112\":1}}],[\"这个资源集合\",{\"1\":{\"45\":1}}],[\"这些索引的叶子节点存储的是索引列的值以及对应的主键值\",{\"1\":{\"111\":1}}],[\"这些操作要么全部执行成功\",{\"1\":{\"76\":1}}],[\"这会导致索引的后续部分无法被利用\",{\"1\":{\"101\":1}}],[\"这样一个索引就能起到多个索引的作用\",{\"1\":{\"96\":1}}],[\"这种索引考虑了字段间的顺序\",{\"1\":{\"94\":1}}],[\"这种隔离级别最高\",{\"1\":{\"91\":1}}],[\"这种隔离级别最低\",{\"1\":{\"88\":1}}],[\"这种隔离级别可以防止脏读和不可重复读\",{\"1\":{\"90\":1}}],[\"这种隔离级别可以防止脏读\",{\"1\":{\"89\":1}}],[\"这种隐式的资源转移容易导致悬空指针或程序崩溃\",{\"1\":{\"30\":1}}],[\"这确保了事务的完整性\",{\"1\":{\"78\":1}}],[\"已经对这些数字感到力不从心\",{\"1\":{\"142\":1}}],[\"已经为\",{\"1\":{\"30\":1}}],[\"已废弃\",{\"0\":{\"29\":1}}],[\"=a\",{\"1\":{\"183\":4}}],[\"=tmp\",{\"1\":{\"179\":1}}],[\"=j\",{\"1\":{\"179\":2}}],[\"=ni\",{\"1\":{\"163\":1}}],[\"=nt\",{\"1\":{\"163\":2}}],[\"=i\",{\"1\":{\"163\":1}}],[\"=find\",{\"1\":{\"163\":1}}],[\"=fa\",{\"1\":{\"163\":1}}],[\"=2\",{\"1\":{\"152\":1,\"183\":4}}],[\"=10\",{\"1\":{\"152\":1}}],[\"=1\",{\"1\":{\"152\":1,\"183\":4}}],[\"=0\",{\"1\":{\"152\":1,\"183\":9}}],[\"=mp\",{\"1\":{\"152\":3}}],[\"=gcd\",{\"1\":{\"152\":8}}],[\"==2\",{\"1\":{\"183\":1}}],[\"==a\",{\"1\":{\"183\":4}}],[\"==0\",{\"1\":{\"183\":9}}],[\"==1\",{\"1\":{\"174\":1,\"183\":1}}],[\"==b\",{\"1\":{\"127\":1}}],[\"==\",{\"1\":{\"37\":2,\"126\":1,\"139\":3,\"152\":11,\"203\":1,\"210\":1,\"211\":1}}],[\"=\",{\"1\":{\"30\":2,\"31\":7,\"33\":1,\"34\":5,\"36\":1,\"37\":8,\"38\":4,\"41\":3,\"101\":1,\"127\":2,\"139\":4,\"152\":1,\"185\":1,\"203\":1,\"210\":2,\"211\":1}}],[\"变量范围0\",{\"1\":{\"185\":1}}],[\"变量值为刚刚的安装路径\",{\"1\":{\"9\":1}}],[\"变为\",{\"1\":{\"30\":1}}],[\"常见ipc方式如下\",{\"0\":{\"64\":1}}],[\"常见于现代系统\",{\"1\":{\"62\":1}}],[\"常见的智能指针包括\",{\"1\":{\"28\":1}}],[\"常用函数\",{\"0\":{\"25\":1}}],[\"能够有效防止资源泄漏和重复释放问题\",{\"1\":{\"28\":1}}],[\"能够正确显示版本号说明安装成功\",{\"1\":{\"9\":1}}],[\"主键索引就是聚簇索引\",{\"1\":{\"105\":1}}],[\"主要是堆内存\",{\"1\":{\"28\":1}}],[\"主题提供的脚手架工具创建项目\",{\"1\":{\"12\":1}}],[\"智能指针是用于自动管理动态资源\",{\"1\":{\"28\":1}}],[\"智能指针\",{\"0\":{\"28\":1}}],[\"构造一个空的\",{\"1\":{\"26\":1}}],[\"构造函数\",{\"1\":{\"25\":2}}],[\"创建一个联合索引\",{\"1\":{\"96\":1}}],[\"创建一个不绑定任何任务的空线程对象\",{\"1\":{\"26\":1}}],[\"创建过多线程\",{\"0\":{\"70\":1}}],[\"创建\",{\"1\":{\"52\":2}}],[\"创建线程\",{\"0\":{\"27\":1}}],[\"创建线程并异步执行函数\",{\"1\":{\"25\":1}}],[\"核心数\",{\"1\":{\"25\":1}}],[\"即可查看\",{\"1\":{\"194\":1}}],[\"即统计\",{\"1\":{\"138\":1}}],[\"即允许一个事务看到其他事务未提交的修改\",{\"1\":{\"88\":1}}],[\"即使系统发生故障也不会丢失\",{\"1\":{\"81\":1}}],[\"即\",{\"1\":{\"25\":1,\"74\":1,\"126\":2,\"138\":3}}],[\"移动赋值操作\",{\"1\":{\"25\":1}}],[\"移动赋值\",{\"1\":{\"25\":1}}],[\"移动构造函数\",{\"1\":{\"25\":1}}],[\"移动构造\",{\"1\":{\"25\":1}}],[\"转移\",{\"1\":{\"25\":1}}],[\"用pycharm打开刚刚的项目源码\",{\"1\":{\"202\":1}}],[\"用动态规划来维护子序列的计数\",{\"1\":{\"138\":1}}],[\"用来表示\",{\"1\":{\"74\":1}}],[\"用于支持\",{\"1\":{\"74\":1}}],[\"用于实现读已提交和可重复读隔离级别\",{\"1\":{\"72\":1}}],[\"用于调试或标识线程\",{\"1\":{\"25\":1}}],[\"用户管理线程池\",{\"1\":{\"62\":1}}],[\"用户级线程\",{\"0\":{\"60\":1}}],[\"用管理员模式在项目根目录执行以下命令\",{\"1\":{\"13\":1}}],[\"用管理员模式打开\",{\"1\":{\"10\":1,\"12\":1}}],[\"状态图\",{\"0\":{\"47\":1}}],[\"状态\",{\"1\":{\"25\":1,\"47\":1}}],[\"检查线程是否处于可\",{\"1\":{\"25\":1}}],[\"直接运行代码\",{\"1\":{\"210\":1,\"211\":1}}],[\"直接安装\",{\"1\":{\"194\":1}}],[\"直接全选安装即可\",{\"1\":{\"191\":1}}],[\"直接模拟即可\",{\"1\":{\"182\":1}}],[\"直接入\",{\"1\":{\"151\":1}}],[\"直接复制粘贴就好\",{\"1\":{\"13\":1}}],[\"直到\",{\"1\":{\"151\":1}}],[\"直到匹配到\",{\"1\":{\"151\":1}}],[\"直到遇到低优先级的运算符或\",{\"1\":{\"151\":1}}],[\"直到得到符合条件的查询结果\",{\"1\":{\"74\":1}}],[\"直到任务完成\",{\"1\":{\"57\":1}}],[\"直到该线程执行完毕并回收资源\",{\"1\":{\"25\":1}}],[\"jpg\",{\"1\":{\"203\":1,\"211\":2}}],[\"just\",{\"1\":{\"191\":1}}],[\"j>=1\",{\"1\":{\"183\":1}}],[\"j=0\",{\"1\":{\"187\":1}}],[\"j=n\",{\"1\":{\"183\":1}}],[\"j=1\",{\"1\":{\"179\":2,\"183\":6}}],[\"jj+1\",{\"1\":{\"183\":6}}],[\"jj++\",{\"1\":{\"183\":1}}],[\"jj<n\",{\"1\":{\"183\":1}}],[\"jj\",{\"1\":{\"183\":15}}],[\"jj>1\",{\"1\":{\"183\":1}}],[\"jj=j\",{\"1\":{\"183\":2}}],[\"j<=2500\",{\"1\":{\"187\":1}}],[\"j<=n\",{\"1\":{\"183\":6}}],[\"j<=m\",{\"1\":{\"179\":2}}],[\"j++\",{\"1\":{\"179\":2,\"183\":6,\"187\":1}}],[\"j\",{\"1\":{\"126\":10,\"127\":4,\"179\":5,\"183\":28,\"187\":2}}],[\"join\",{\"1\":{\"25\":3}}],[\"joinable\",{\"1\":{\"25\":2}}],[\"json\",{\"1\":{\"13\":1}}],[\"js\",{\"0\":{\"7\":1},\"1\":{\"7\":1}}],[\"销毁线程对象\",{\"1\":{\"25\":1}}],[\"不过\",{\"1\":{\"142\":1}}],[\"不需要额外查找步骤\",{\"1\":{\"106\":1}}],[\"不需要管\",{\"1\":{\"13\":1}}],[\"不是固定的\",{\"1\":{\"101\":1}}],[\"不以任何方式依赖或影响其他事务\",{\"1\":{\"80\":1}}],[\"不会存在部分成功的情况\",{\"1\":{\"76\":1}}],[\"不会影响引用计数\",{\"1\":{\"41\":1}}],[\"不在未提交事务的数组中\",{\"1\":{\"74\":1}}],[\"不可以不拿\",{\"1\":{\"166\":1}}],[\"不可重复读\",{\"0\":{\"85\":1}}],[\"不可读\",{\"1\":{\"74\":1}}],[\"不可再\",{\"1\":{\"25\":1}}],[\"不相关进程通信\",{\"1\":{\"64\":1}}],[\"不依赖内核\",{\"1\":{\"60\":1}}],[\"不影响引用计数\",{\"1\":{\"41\":1}}],[\"不启动任何线程\",{\"1\":{\"25\":1}}],[\"功能简介\",{\"1\":{\"25\":1}}],[\"类别\",{\"1\":{\"25\":1}}],[\"类来进行多线程编程\",{\"1\":{\"24\":1}}],[\"函数调用\",{\"1\":{\"46\":1}}],[\"函数\",{\"1\":{\"25\":1}}],[\"🎯\",{\"0\":{\"25\":1}}],[\"标准库引入了\",{\"1\":{\"24\":1}}],[\"之后再将当前运算符入栈\",{\"1\":{\"151\":1}}],[\"之后获取某时刻的数据就是还原记录的状态\",{\"1\":{\"74\":1}}],[\"之后\",{\"1\":{\"24\":1}}],[\"三个相同数字合并时\",{\"1\":{\"182\":1}}],[\"三\",{\"0\":{\"24\":1,\"52\":1}}],[\"分完组后老师发现没有人愿意当小组长\",{\"1\":{\"155\":1}}],[\"分母>\",{\"1\":{\"151\":1}}],[\"分数形式\",{\"1\":{\"151\":1}}],[\"分离\",{\"1\":{\"23\":1}}],[\"分支\",{\"1\":{\"17\":1}}],[\"计算后需求\",{\"1\":{\"151\":1}}],[\"计算规则\",{\"1\":{\"151\":1}}],[\"计算表达式时\",{\"1\":{\"151\":1}}],[\"计算过程中可能出现负数\",{\"1\":{\"150\":1}}],[\"计算\",{\"1\":{\"23\":1}}],[\"界面不卡顿\",{\"1\":{\"53\":1}}],[\"界面\",{\"1\":{\"23\":1}}],[\"提示\",{\"0\":{\"123\":1,\"137\":1,\"150\":1,\"161\":1,\"172\":1},\"1\":{\"87\":1,\"194\":1}}],[\"提交读\",{\"0\":{\"89\":1},\"1\":{\"80\":1}}],[\"提交信息\",{\"1\":{\"16\":1}}],[\"提升会失败\",{\"1\":{\"41\":1}}],[\"提高系统效率\",{\"1\":{\"53\":1}}],[\"提高并发性\",{\"1\":{\"53\":1}}],[\"提高\",{\"1\":{\"23\":1}}],[\"响应快又能防饿死\",{\"1\":{\"58\":1}}],[\"响应更快\",{\"1\":{\"23\":1,\"53\":1}}],[\"响应慢\",{\"1\":{\"22\":1}}],[\"任务并发执行\",{\"1\":{\"23\":1}}],[\"效率低\",{\"1\":{\"22\":1}}],[\"如linux\",{\"1\":{\"62\":1}}],[\"如io\",{\"1\":{\"47\":1}}],[\"如\",{\"1\":{\"46\":1,\"101\":1}}],[\"如下图所示即安装成功\",{\"1\":{\"194\":1}}],[\"如下图所示\",{\"1\":{\"99\":1}}],[\"如下改写双向链表的例子\",{\"1\":{\"41\":1}}],[\"如下所示\",{\"1\":{\"41\":1}}],[\"如下例\",{\"1\":{\"33\":1}}],[\"如下例所示\",{\"1\":{\"30\":1}}],[\"如读取文件\",{\"1\":{\"22\":1}}],[\"如果不需要可以去掉\",{\"1\":{\"210\":1}}],[\"如果不符合比较规则\",{\"1\":{\"74\":1}}],[\"如果提示numpy版本不兼容相关的错误\",{\"1\":{\"204\":1}}],[\"如果\",{\"1\":{\"126\":1}}],[\"如果表中包含大字段\",{\"1\":{\"108\":1}}],[\"如果表中没有主键或者唯一非空索引\",{\"1\":{\"105\":1}}],[\"如果没有定义主键\",{\"1\":{\"105\":1}}],[\"如果没有采取必要的隔离机制就会导致各种并发问题\",{\"1\":{\"82\":1}}],[\"如果查询条件中跳过了最左边的字段\",{\"1\":{\"100\":1}}],[\"如果查询语句中的选择列完全由联合索引覆盖\",{\"1\":{\"97\":1}}],[\"如果事务中的任何元素失败\",{\"1\":{\"78\":1}}],[\"如果当前记录的事务\",{\"1\":{\"74\":3}}],[\"如果资源已释放\",{\"1\":{\"41\":1}}],[\"如果想要共享资源\",{\"1\":{\"33\":1}}],[\"如果本地分支不是\",{\"1\":{\"16\":1}}],[\"如果出现有关crlf\",{\"1\":{\"16\":1}}],[\"如果使用的仓库名与用户名不相同\",{\"1\":{\"15\":1}}],[\"上图红框位置显示即为cuda最高支持版本\",{\"1\":{\"194\":1}}],[\"上并行执行\",{\"1\":{\"53\":1}}],[\"上述代码中\",{\"1\":{\"38\":1}}],[\"上的执行效率\",{\"1\":{\"21\":1}}],[\"上一步完成推送后\",{\"1\":{\"17\":1}}],[\"二\",{\"0\":{\"21\":1,\"48\":1}}],[\"一般指定为\",{\"1\":{\"210\":1}}],[\"一直点下一步\",{\"1\":{\"191\":1,\"192\":1}}],[\"一直被抢占或让出\",{\"1\":{\"69\":1}}],[\"一行输入三个整数n\",{\"1\":{\"167\":1}}],[\"一行一个数字表示表达式的值\",{\"1\":{\"144\":1}}],[\"一行一个数字表示答案\",{\"1\":{\"119\":1,\"133\":1}}],[\"一行一个包含\",{\"1\":{\"143\":1}}],[\"一行一个字符串\",{\"1\":{\"132\":1}}],[\"一张表可以有多个非聚簇索引\",{\"1\":{\"110\":1,\"113\":1}}],[\"一致性最好\",{\"1\":{\"91\":1}}],[\"一致性\",{\"0\":{\"79\":1}}],[\"一个事务按相同查询条件重新读取以前检索过的数据\",{\"1\":{\"86\":1}}],[\"一个事务读到了另一个事务已经提交的更新数据\",{\"1\":{\"85\":1}}],[\"一个事务读到了另一个事务还未提交的数据\",{\"1\":{\"84\":1}}],[\"一个事务修改了另一个事务已经修改但还没有提交的数据\",{\"1\":{\"83\":1}}],[\"一个事务必须使数据库从一个一致性状态变成另一个一致性状态\",{\"1\":{\"79\":1}}],[\"一个用户的事务不被其他事务干扰\",{\"1\":{\"80\":1}}],[\"一个原子操作\",{\"1\":{\"76\":1}}],[\"一个线程阻塞\",{\"1\":{\"60\":1}}],[\"一个线程崩溃可能影响整个进程\",{\"1\":{\"52\":1}}],[\"一个线程属于某个进程\",{\"1\":{\"49\":1}}],[\"一个进程崩溃不影响其他进程\",{\"1\":{\"52\":1}}],[\"一个进程通常包括\",{\"1\":{\"46\":1}}],[\"一个程序在执行时\",{\"1\":{\"45\":1}}],[\"一\",{\"0\":{\"20\":1,\"44\":1}}],[\"作为存放所有数据集的路径\",{\"1\":{\"208\":1}}],[\"作为聚簇索引\",{\"1\":{\"105\":1}}],[\"作为\",{\"1\":{\"17\":1}}],[\"前往\",{\"1\":{\"17\":1}}],[\"应该会自动生成\",{\"1\":{\"17\":1}}],[\"准备进行下一次提交\",{\"1\":{\"16\":1}}],[\"包括新增\",{\"1\":{\"16\":1}}],[\"将数据缓存到内存中可以加速训练\",{\"1\":{\"210\":1}}],[\"将下载的文件放到刚刚解压的源码根目录下\",{\"1\":{\"201\":1}}],[\"将压缩包进行解压\",{\"1\":{\"195\":1}}],[\"将安装路径换成c盘以外的其他文件夹\",{\"1\":{\"192\":1}}],[\"将分数化为最简形式\",{\"1\":{\"151\":1}}],[\"将其压入\",{\"1\":{\"151\":1}}],[\"将事务完全隔离\",{\"1\":{\"91\":1}}],[\"将线程所有权从\",{\"1\":{\"25\":1}}],[\"将线程与\",{\"1\":{\"25\":1}}],[\"将本地\",{\"1\":{\"16\":1}}],[\"将当前暂存区中的更改提交到本地\",{\"1\":{\"16\":1}}],[\"将当前目录下的所有更改\",{\"1\":{\"16\":1}}],[\"将用户变量的\",{\"1\":{\"9\":1}}],[\"org\",{\"1\":{\"198\":1}}],[\"origin\",{\"1\":{\"16\":2}}],[\"op非空\",{\"1\":{\"151\":1}}],[\"op\",{\"1\":{\"151\":4,\"152\":20,\"183\":4}}],[\"operator\",{\"1\":{\"31\":2,\"34\":2,\"37\":2}}],[\"operator=\",{\"1\":{\"25\":1,\"31\":1,\"34\":1,\"37\":1}}],[\"other\",{\"1\":{\"25\":3}}],[\"of\",{\"1\":{\"13\":1}}],[\"仓库的设置页面\",{\"1\":{\"17\":1}}],[\"仓库中的更改推送到远程仓库\",{\"1\":{\"16\":1}}],[\"仓库\",{\"1\":{\"16\":2}}],[\"初始化\",{\"1\":{\"16\":1}}],[\"你可以帮帮她吗\",{\"1\":{\"155\":1}}],[\"你的仓库地址\",{\"1\":{\"16\":1}}],[\"你的仓库名\",{\"1\":{\"15\":1}}],[\"你想要创建什么类型的项目\",{\"1\":{\"12\":1}}],[\"img\",{\"1\":{\"211\":1}}],[\"imgsz\",{\"1\":{\"210\":1}}],[\"imgsz=640\",{\"1\":{\"210\":1}}],[\"images\",{\"1\":{\"211\":1}}],[\"import\",{\"1\":{\"203\":1,\"210\":1,\"211\":1}}],[\"i>=1\",{\"1\":{\"183\":1}}],[\"i>0\",{\"1\":{\"152\":1}}],[\"ii+1\",{\"1\":{\"183\":6}}],[\"ii++\",{\"1\":{\"183\":1}}],[\"ii<m\",{\"1\":{\"183\":1}}],[\"ii\",{\"1\":{\"183\":15}}],[\"ii>1\",{\"1\":{\"183\":1}}],[\"ii=i\",{\"1\":{\"183\":2}}],[\"it\",{\"1\":{\"168\":2,\"171\":1,\"174\":4}}],[\"i<s\",{\"1\":{\"139\":1,\"152\":1}}],[\"i<a\",{\"1\":{\"127\":1}}],[\"i<=2500\",{\"1\":{\"187\":1}}],[\"i<=m\",{\"1\":{\"183\":6}}],[\"i<=c\",{\"1\":{\"183\":1}}],[\"i<=n\",{\"1\":{\"163\":3,\"179\":3}}],[\"i<=\",{\"1\":{\"127\":1}}],[\"i<b\",{\"1\":{\"127\":1}}],[\"i=m\",{\"1\":{\"183\":1}}],[\"i=2\",{\"1\":{\"179\":1}}],[\"i==find\",{\"1\":{\"163\":1}}],[\"i=0\",{\"1\":{\"127\":2,\"152\":1,\"187\":1}}],[\"i=1\",{\"1\":{\"127\":1,\"139\":1,\"163\":3,\"179\":2,\"183\":7}}],[\"i++\",{\"1\":{\"127\":3,\"139\":1,\"152\":1,\"163\":3,\"179\":3,\"183\":7,\"187\":1}}],[\"i\",{\"1\":{\"125\":2,\"126\":3,\"127\":6,\"138\":2,\"139\":3,\"152\":10,\"163\":3,\"168\":1,\"179\":9,\"183\":29,\"187\":3}}],[\"ipc\",{\"0\":{\"63\":1}}],[\"if\",{\"1\":{\"31\":2,\"34\":1,\"37\":5,\"41\":1,\"127\":1,\"139\":3,\"152\":16,\"163\":4,\"174\":3,\"179\":1,\"183\":19,\"187\":12,\"203\":1,\"210\":1,\"211\":1}}],[\"ids\",{\"1\":{\"74\":2}}],[\"id\",{\"1\":{\"25\":2,\"73\":3,\"74\":11,\"105\":1}}],[\"ios\",{\"1\":{\"127\":1,\"152\":1}}],[\"io\",{\"1\":{\"23\":1,\"97\":1}}],[\"isolation\",{\"0\":{\"80\":1}}],[\"is\",{\"1\":{\"13\":1}}],[\"index\",{\"1\":{\"198\":1}}],[\"include<bits\",{\"1\":{\"127\":1,\"139\":1,\"152\":1,\"163\":1,\"174\":1,\"179\":1,\"183\":1,\"187\":1}}],[\"innodb\",{\"1\":{\"74\":1,\"105\":4,\"111\":1,\"112\":1}}],[\"int>\",{\"1\":{\"152\":1}}],[\"int\",{\"1\":{\"30\":2,\"33\":1,\"36\":1,\"37\":3,\"38\":3,\"41\":3,\"127\":4,\"139\":2,\"152\":2,\"163\":10,\"174\":1,\"179\":8,\"183\":26,\"187\":5}}],[\"installed\",{\"1\":{\"13\":1}}],[\"install\",{\"1\":{\"13\":1,\"198\":1,\"199\":1,\"204\":1}}],[\"init\",{\"1\":{\"12\":1,\"16\":1}}],[\"✖\",{\"1\":{\"13\":1}}],[\"^2\",{\"1\":{\"13\":1}}],[\"^3\",{\"1\":{\"13\":1}}],[\"8即可\",{\"1\":{\"194\":1}}],[\"8\",{\"1\":{\"13\":1,\"148\":1,\"194\":2,\"195\":1}}],[\"length\",{\"1\":{\"139\":1,\"152\":3}}],[\"level\",{\"0\":{\"60\":1,\"61\":1}}],[\"ll>\",{\"1\":{\"152\":19}}],[\"ll>>\",{\"1\":{\"152\":1}}],[\"ll\",{\"1\":{\"127\":3,\"139\":3,\"152\":14,\"174\":2,\"183\":2,\"187\":3}}],[\"lwp\",{\"1\":{\"49\":1}}],[\"load\",{\"1\":{\"210\":2}}],[\"loader\",{\"1\":{\"13\":1}}],[\"long\",{\"1\":{\"127\":2,\"139\":2,\"152\":2,\"174\":2,\"183\":2,\"187\":2}}],[\"log\",{\"0\":{\"73\":1},\"1\":{\"72\":2,\"73\":2,\"74\":1}}],[\"lock\",{\"1\":{\"41\":2}}],[\"lf之类换行符的报错\",{\"1\":{\"16\":1}}],[\"lian\",{\"1\":{\"168\":1,\"171\":1,\"174\":2}}],[\"lightweight\",{\"1\":{\"49\":1}}],[\"lib\",{\"1\":{\"13\":1}}],[\"license\",{\"1\":{\"13\":1}}],[\"k<=2500\",{\"1\":{\"187\":1}}],[\"k<=c\",{\"1\":{\"183\":1}}],[\"k=0\",{\"1\":{\"187\":1}}],[\"k=1\",{\"1\":{\"183\":1}}],[\"k++\",{\"1\":{\"183\":1,\"187\":1}}],[\"k\",{\"1\":{\"179\":3,\"183\":3,\"187\":1}}],[\"know\",{\"1\":{\"168\":1}}],[\"kill\",{\"1\":{\"64\":1}}],[\"kernel\",{\"0\":{\"61\":1}}],[\"kotlin\",{\"1\":{\"13\":1}}],[\"katex\",{\"1\":{\"13\":2}}],[\"found\",{\"1\":{\"212\":1}}],[\"for\",{\"1\":{\"127\":4,\"139\":1,\"152\":1,\"163\":3,\"179\":5,\"183\":20,\"187\":3}}],[\"flag=1\",{\"1\":{\"187\":2}}],[\"flag=0\",{\"1\":{\"187\":1}}],[\"flag\",{\"1\":{\"187\":3}}],[\"flowchart\",{\"1\":{\"13\":1}}],[\"false\",{\"1\":{\"210\":1}}],[\"fa\",{\"1\":{\"163\":6}}],[\"fm\",{\"1\":{\"152\":12}}],[\"fm=a\",{\"1\":{\"152\":4}}],[\"fz\",{\"1\":{\"152\":12}}],[\"fz=a\",{\"1\":{\"152\":4}}],[\"files\",{\"1\":{\"195\":1}}],[\"find\",{\"1\":{\"163\":1}}],[\"first<<\",{\"1\":{\"152\":2}}],[\"first=\",{\"1\":{\"152\":1}}],[\"first\",{\"1\":{\"152\":9}}],[\"fifo\",{\"1\":{\"64\":1}}],[\"from\",{\"1\":{\"97\":1,\"203\":1,\"210\":1,\"211\":1}}],[\"ff\",{\"1\":{\"31\":1,\"34\":1,\"37\":1}}],[\"f\",{\"1\":{\"25\":2}}],[\"fn\",{\"1\":{\"25\":1}}],[\"feed\",{\"1\":{\"13\":1}}],[\"5版本的numpy\",{\"1\":{\"204\":1}}],[\"50\",{\"1\":{\"183\":1}}],[\"56\",{\"1\":{\"13\":1}}],[\"54\",{\"1\":{\"13\":4}}],[\"5\",{\"1\":{\"13\":2,\"139\":1,\"146\":1,\"159\":2,\"204\":1}}],[\"3+8\",{\"1\":{\"146\":1}}],[\"30\",{\"1\":{\"13\":1,\"127\":1,\"179\":2}}],[\"3\",{\"0\":{\"57\":1,\"62\":1,\"69\":1,\"184\":1},\"1\":{\"13\":5,\"138\":3,\"139\":3,\"148\":1,\"159\":1,\"170\":1,\"179\":1}}],[\"35025\",{\"1\":{\"9\":1}}],[\"win+r\",{\"1\":{\"194\":1}}],[\"windows\",{\"1\":{\"191\":1}}],[\"with\",{\"1\":{\"127\":1,\"152\":1}}],[\"w<<\",{\"1\":{\"187\":1}}],[\"w==0\",{\"1\":{\"187\":1}}],[\"w==1\",{\"1\":{\"174\":2}}],[\"w表示猜拳的结果\",{\"1\":{\"167\":1}}],[\"w\",{\"1\":{\"167\":1,\"174\":1,\"185\":1,\"187\":5}}],[\"whl\",{\"1\":{\"198\":1}}],[\"while\",{\"1\":{\"152\":3,\"183\":1}}],[\"where\",{\"1\":{\"97\":1}}],[\"wp\",{\"1\":{\"41\":2}}],[\"weights\",{\"1\":{\"210\":1,\"211\":1}}],[\"web服务器\",{\"1\":{\"65\":1}}],[\"webpack\",{\"1\":{\"13\":1}}],[\"weak\",{\"0\":{\"40\":1},\"1\":{\"28\":1,\"39\":2,\"41\":6}}],[\"wordcloud\",{\"1\":{\"13\":1}}],[\"waline\",{\"1\":{\"13\":1}}],[\"https\",{\"1\":{\"198\":1}}],[\"h>\",{\"1\":{\"127\":1,\"139\":1,\"152\":1,\"163\":1,\"174\":1,\"179\":1,\"183\":1,\"187\":1}}],[\"hybrid\",{\"0\":{\"62\":1}}],[\"heap\",{\"1\":{\"46\":1}}],[\"helper\",{\"1\":{\"13\":1}}],[\"hardware\",{\"1\":{\"25\":1}}],[\"hope\",{\"1\":{\"12\":2,\"13\":4}}],[\"home\",{\"1\":{\"9\":4}}],[\"1aa0dc9a8d69f838ea9e725080b5d2b8\",{\"1\":{\"211\":1}}],[\"1+cu118\",{\"1\":{\"198\":1}}],[\"120135\",{\"1\":{\"211\":1}}],[\"12\",{\"1\":{\"194\":1}}],[\"1<<\",{\"1\":{\"179\":2}}],[\"1<=m<=n\",{\"1\":{\"167\":1}}],[\"1<=n<=10^18\",{\"1\":{\"167\":1}}],[\"1表示小连获胜\",{\"1\":{\"167\":1}}],[\"1≤∣s∣≤107\",{\"1\":{\"132\":1}}],[\"1≤∣b∣≤103\",{\"1\":{\"118\":1}}],[\"1≤∣a∣≤105\",{\"1\":{\"118\":1}}],[\"10的虚拟环境\",{\"1\":{\"197\":1}}],[\"100005\",{\"1\":{\"163\":1}}],[\"1005\",{\"1\":{\"127\":1}}],[\"10\",{\"1\":{\"30\":1,\"41\":1,\"170\":1,\"197\":1}}],[\"17\",{\"1\":{\"13\":3}}],[\"1\",{\"0\":{\"22\":1,\"26\":1,\"55\":1,\"60\":1,\"67\":1,\"121\":1,\"122\":1,\"135\":1,\"136\":1,\"146\":1,\"147\":1,\"159\":1,\"160\":1,\"170\":1,\"171\":1,\"176\":1},\"1\":{\"13\":8,\"30\":1,\"36\":2,\"37\":1,\"38\":1,\"101\":1,\"126\":4,\"127\":2,\"138\":4,\"139\":3,\"149\":1,\"151\":1,\"152\":6,\"159\":1,\"160\":1,\"170\":1,\"179\":5,\"182\":4,\"183\":12,\"187\":1,\"194\":1}}],[\"11\",{\"1\":{\"13\":4,\"194\":2,\"210\":1}}],[\"15\",{\"1\":{\"13\":3,\"198\":1}}],[\"16\",{\"1\":{\"13\":3}}],[\"404\",{\"1\":{\"212\":1}}],[\"40\",{\"1\":{\"183\":4}}],[\"4lf\",{\"1\":{\"179\":1}}],[\"48\",{\"1\":{\"13\":1}}],[\"47\",{\"1\":{\"13\":2}}],[\"4\",{\"0\":{\"58\":1,\"70\":1},\"1\":{\"13\":2,\"74\":1,\"138\":2,\"139\":3,\"147\":1,\"159\":1,\"182\":3}}],[\"rf\",{\"1\":{\"211\":1}}],[\"rr\",{\"1\":{\"74\":3}}],[\"race\",{\"0\":{\"67\":1}}],[\"roboflow\",{\"0\":{\"207\":1},\"1\":{\"208\":1}}],[\"robin\",{\"0\":{\"55\":1}}],[\"row\",{\"1\":{\"105\":1}}],[\"roll\",{\"1\":{\"73\":1}}],[\"round\",{\"0\":{\"55\":1}}],[\"roaming\",{\"1\":{\"9\":1}}],[\"runs\",{\"1\":{\"203\":1,\"210\":2,\"211\":3}}],[\"run\",{\"1\":{\"13\":1,\"16\":1}}],[\"results\",{\"1\":{\"210\":1}}],[\"repeatable\",{\"1\":{\"74\":1,\"80\":1}}],[\"repl\",{\"1\":{\"13\":1}}],[\"read\",{\"1\":{\"74\":8,\"80\":3}}],[\"readview\",{\"0\":{\"74\":1},\"1\":{\"72\":4,\"74\":4}}],[\"readme\",{\"1\":{\"15\":1}}],[\"return\",{\"1\":{\"30\":1,\"31\":3,\"33\":1,\"34\":2,\"36\":1,\"37\":4,\"38\":1,\"41\":1,\"127\":1,\"139\":1,\"152\":5,\"163\":3,\"174\":1,\"179\":1,\"183\":1,\"187\":1}}],[\"renormalize\",{\"1\":{\"16\":1}}],[\"remote\",{\"1\":{\"16\":1}}],[\"redirect\",{\"1\":{\"13\":1}}],[\"revealjs\",{\"1\":{\"13\":1}}],[\"rc\",{\"1\":{\"13\":11,\"74\":3}}],[\"79\",{\"1\":{\"13\":1}}],[\"7\",{\"1\":{\"13\":2}}],[\"ultralytics\",{\"1\":{\"199\":1,\"203\":2,\"208\":2,\"210\":2,\"211\":1}}],[\"url\",{\"1\":{\"198\":1}}],[\"using\",{\"1\":{\"127\":1,\"139\":1,\"152\":1,\"163\":1,\"174\":1,\"179\":1,\"183\":1,\"187\":1}}],[\"use\",{\"1\":{\"36\":2,\"37\":1}}],[\"user\",{\"0\":{\"60\":1},\"1\":{\"9\":1}}],[\"uno\",{\"1\":{\"208\":1,\"210\":1,\"211\":1}}],[\"uncommitted\",{\"1\":{\"80\":1}}],[\"undo\",{\"0\":{\"73\":1},\"1\":{\"72\":2,\"73\":2,\"74\":1}}],[\"unique<int>\",{\"1\":{\"33\":1}}],[\"unique\",{\"0\":{\"32\":1},\"1\":{\"28\":1,\"30\":1,\"33\":3,\"34\":6}}],[\"up\",{\"1\":{\"34\":2}}],[\"up2\",{\"1\":{\"33\":1}}],[\"up1\",{\"1\":{\"33\":2}}],[\"update\",{\"1\":{\"13\":2}}],[\"best\",{\"1\":{\"210\":1,\"211\":1}}],[\"begin\",{\"1\":{\"127\":1}}],[\"break\",{\"1\":{\"183\":12,\"187\":7}}],[\"bool\",{\"1\":{\"174\":1}}],[\"batch\",{\"1\":{\"210\":1}}],[\"batch=16\",{\"1\":{\"210\":1}}],[\"ba​÷dc​=b×ca×d​\",{\"1\":{\"151\":1}}],[\"ba​×dc​=b×da×c​\",{\"1\":{\"151\":1}}],[\"ba​−dc​=b×da×d−b×c​\",{\"1\":{\"151\":1}}],[\"ba​+dc​=b×da×d+b×c​\",{\"1\":{\"151\":1}}],[\"back\",{\"1\":{\"127\":1}}],[\"base\",{\"1\":{\"15\":2}}],[\"b=num\",{\"1\":{\"152\":3}}],[\"b=\",{\"1\":{\"97\":1}}],[\"b\",{\"1\":{\"68\":2,\"83\":4,\"84\":2,\"85\":2,\"86\":1,\"94\":2,\"96\":3,\"97\":1,\"99\":3,\"101\":3,\"116\":1,\"117\":2,\"118\":1,\"125\":1,\"126\":3,\"127\":3,\"152\":26}}],[\"bus\",{\"1\":{\"203\":1}}],[\"bundler\",{\"1\":{\"13\":2}}],[\"build\",{\"1\":{\"13\":2,\"16\":1}}],[\"blogs\",{\"1\":{\"12\":2,\"13\":1}}],[\"me\",{\"1\":{\"191\":1}}],[\"mermaid\",{\"1\":{\"13\":1}}],[\"m+1\",{\"1\":{\"174\":1}}],[\"m表示每人每次最多可以拿取的数量\",{\"1\":{\"167\":1}}],[\"mul\",{\"1\":{\"152\":4}}],[\"mp\",{\"1\":{\"152\":5}}],[\"mixed\",{\"1\":{\"210\":1}}],[\"min\",{\"1\":{\"74\":1}}],[\"mit\",{\"1\":{\"12\":1,\"13\":1}}],[\"mysql可以直接通过遍历索引获取数据\",{\"1\":{\"97\":1}}],[\"mysql默认\",{\"0\":{\"90\":1}}],[\"mysql事务\",{\"0\":{\"75\":1}}],[\"mysql\",{\"1\":{\"74\":1,\"100\":1,\"101\":1,\"112\":1}}],[\"mysql中的可重复读如何实现\",{\"0\":{\"71\":1}}],[\"mv\",{\"1\":{\"72\":1}}],[\"mvcc\",{\"0\":{\"72\":1},\"1\":{\"72\":2,\"74\":2}}],[\"mod\",{\"1\":{\"127\":2,\"139\":4}}],[\"mod=998244353\",{\"1\":{\"127\":1,\"139\":1}}],[\"models\",{\"1\":{\"210\":1}}],[\"model=r\",{\"1\":{\"203\":1,\"211\":1}}],[\"model\",{\"0\":{\"62\":1},\"1\":{\"203\":2,\"210\":4,\"211\":2}}],[\"module\",{\"1\":{\"13\":1}}],[\"mlfq\",{\"0\":{\"58\":1}}],[\"map<char\",{\"1\":{\"152\":1}}],[\"max\",{\"1\":{\"74\":1}}],[\"malloc\",{\"1\":{\"46\":1}}],[\"make\",{\"1\":{\"33\":1,\"36\":1,\"38\":2,\"41\":1}}],[\"main\",{\"1\":{\"16\":3,\"30\":1,\"33\":1,\"36\":1,\"38\":1,\"41\":1,\"127\":1,\"139\":1,\"152\":1,\"163\":1,\"174\":1,\"179\":1,\"183\":1,\"187\":1,\"203\":1,\"208\":2,\"210\":1,\"211\":1}}],[\"markmap\",{\"1\":{\"13\":3}}],[\"m\",{\"1\":{\"16\":1,\"31\":15,\"34\":8,\"37\":31,\"38\":7,\"41\":7,\"74\":2,\"167\":1,\"174\":1,\"177\":1,\"179\":1,\"183\":1}}],[\"md\",{\"1\":{\"13\":1,\"15\":1}}],[\"0+cu118\",{\"1\":{\"198\":1}}],[\"0表示小张获胜\",{\"1\":{\"167\":1}}],[\"0<=w<=1\",{\"1\":{\"167\":1}}],[\"0\",{\"1\":{\"13\":37,\"25\":1,\"30\":1,\"33\":2,\"36\":2,\"37\":2,\"38\":2,\"41\":1,\"126\":3,\"127\":7,\"139\":1,\"152\":8,\"163\":1,\"174\":1,\"179\":1,\"182\":6,\"183\":1,\"187\":1,\"198\":1,\"210\":2}}],[\"23\",{\"1\":{\"204\":2}}],[\"2500<tmp\",{\"1\":{\"187\":3}}],[\"2500+y\",{\"1\":{\"187\":1}}],[\"2500+z\",{\"1\":{\"187\":2}}],[\"2500\",{\"1\":{\"185\":1}}],[\"28\",{\"1\":{\"122\":1,\"136\":1}}],[\"20241104\",{\"1\":{\"211\":1}}],[\"20250322网易互娱游戏研发\",{\"0\":{\"175\":1}}],[\"2048\",{\"0\":{\"180\":1}}],[\"20005\",{\"1\":{\"179\":1}}],[\"20\",{\"1\":{\"30\":1}}],[\"2\",{\"0\":{\"23\":1,\"27\":1,\"56\":1,\"61\":1,\"68\":1,\"148\":1,\"149\":1,\"180\":1},\"1\":{\"13\":16,\"38\":1,\"101\":1,\"138\":3,\"139\":3,\"146\":1,\"148\":1,\"149\":1,\"159\":1,\"160\":1,\"179\":2,\"182\":3}}],[\"amp\",{\"1\":{\"210\":2}}],[\"amp=true\",{\"1\":{\"210\":1}}],[\"assets\",{\"1\":{\"203\":1}}],[\"activate\",{\"1\":{\"198\":1,\"204\":1}}],[\"anaconda\",{\"1\":{\"197\":1,\"198\":1,\"204\":1}}],[\"anaconda3\",{\"1\":{\"191\":2}}],[\"anaconda3由于是国外网站下载较慢\",{\"1\":{\"191\":1}}],[\"ans\",{\"1\":{\"152\":6,\"179\":3}}],[\"ans=num\",{\"1\":{\"152\":1}}],[\"and\",{\"1\":{\"97\":1,\"101\":1}}],[\"a=num\",{\"1\":{\"152\":3}}],[\"a=\",{\"1\":{\"97\":1}}],[\"atomicity\",{\"0\":{\"78\":1}}],[\"ap\",{\"1\":{\"31\":7}}],[\"ap2\",{\"1\":{\"30\":3}}],[\"ap1\",{\"1\":{\"30\":6}}],[\"appdate\",{\"1\":{\"9\":1}}],[\"automatic\",{\"1\":{\"210\":1}}],[\"auto\",{\"0\":{\"29\":1},\"1\":{\"28\":1,\"30\":4,\"31\":6,\"41\":1,\"127\":1}}],[\"autocrlf\",{\"1\":{\"16\":1}}],[\"args\",{\"1\":{\"25\":3}}],[\"artplayer\",{\"1\":{\"13\":1}}],[\"add\",{\"1\":{\"16\":3,\"152\":4}}],[\"a\",{\"1\":{\"13\":1,\"68\":2,\"83\":6,\"84\":4,\"85\":3,\"86\":2,\"94\":2,\"96\":4,\"97\":1,\"99\":4,\"101\":3,\"117\":3,\"118\":1,\"125\":1,\"126\":5,\"127\":6,\"131\":1,\"152\":17,\"179\":4,\"183\":29}}],[\"tmp<0\",{\"1\":{\"187\":3}}],[\"tmp\",{\"1\":{\"187\":2}}],[\"tmp==0\",{\"1\":{\"187\":1}}],[\"tmp=n\",{\"1\":{\"187\":3}}],[\"tmp=a\",{\"1\":{\"179\":1}}],[\"tmp=1\",{\"1\":{\"179\":1}}],[\"torchvision==0\",{\"1\":{\"198\":1}}],[\"torch==2\",{\"1\":{\"198\":1}}],[\"toolkit\",{\"1\":{\"195\":1}}],[\"toolbar\",{\"1\":{\"13\":1}}],[\"top\",{\"1\":{\"152\":18}}],[\"tie\",{\"1\":{\"127\":2,\"152\":2}}],[\"table\",{\"1\":{\"97\":1}}],[\"train17\",{\"1\":{\"211\":1}}],[\"train16\",{\"1\":{\"210\":1}}],[\"train\",{\"1\":{\"208\":1,\"210\":2}}],[\"trx\",{\"1\":{\"73\":1,\"74\":3}}],[\"true\",{\"1\":{\"16\":1,\"210\":2}}],[\"t>\",{\"1\":{\"31\":1,\"34\":1,\"37\":1}}],[\"t\",{\"1\":{\"26\":1,\"31\":4,\"34\":4,\"37\":4,\"168\":1,\"183\":2}}],[\"test\",{\"1\":{\"208\":1,\"211\":2}}],[\"temp+=s\",{\"1\":{\"152\":1}}],[\"temp=0\",{\"1\":{\"152\":2}}],[\"temp\",{\"1\":{\"41\":2,\"152\":3,\"163\":2}}],[\"template<class\",{\"1\":{\"31\":1,\"34\":1,\"37\":1}}],[\"template\",{\"1\":{\"13\":1}}],[\"terminate\",{\"1\":{\"25\":1}}],[\"this\",{\"1\":{\"31\":2,\"37\":1}}],[\"thread\",{\"0\":{\"48\":1,\"60\":1,\"61\":1},\"1\":{\"24\":1,\"25\":7,\"26\":2,\"65\":1}}],[\"theme\",{\"1\":{\"12\":2,\"13\":4}}],[\"ts\",{\"1\":{\"13\":1,\"15\":1}}],[\"typedef\",{\"1\":{\"127\":1,\"139\":1,\"152\":1,\"174\":1,\"183\":1,\"187\":1}}],[\"types\",{\"1\":{\"13\":1}}],[\"type\",{\"1\":{\"13\":1}}],[\"smi\",{\"1\":{\"194\":1}}],[\"sub\",{\"1\":{\"152\":4}}],[\"s=\",{\"1\":{\"139\":1}}],[\"s\",{\"1\":{\"132\":1,\"138\":4,\"139\":5,\"152\":14}}],[\"source是要推理的图片路径这里使用数据集提供的图片\",{\"1\":{\"211\":1}}],[\"source是要推理的图片路径这里使用yolo自带的图片\",{\"1\":{\"203\":1}}],[\"source=r\",{\"1\":{\"203\":1,\"211\":1}}],[\"sort\",{\"1\":{\"127\":1}}],[\"socket\",{\"1\":{\"64\":1}}],[\"single\",{\"1\":{\"210\":2}}],[\"size\",{\"1\":{\"127\":3}}],[\"signal\",{\"1\":{\"64\":1}}],[\"sync\",{\"1\":{\"127\":1,\"152\":1}}],[\"sc\",{\"1\":{\"138\":3}}],[\"scp\",{\"1\":{\"138\":3}}],[\"scppcsscpspccsp\",{\"1\":{\"121\":1,\"135\":1}}],[\"scpc\",{\"0\":{\"129\":1},\"1\":{\"117\":1,\"121\":1,\"131\":2,\"138\":2}}],[\"scripts\",{\"1\":{\"13\":1}}],[\"sql\",{\"1\":{\"74\":1}}],[\"show\",{\"1\":{\"204\":1}}],[\"show=true\",{\"1\":{\"203\":1,\"211\":1}}],[\"shell管道\",{\"1\":{\"64\":1}}],[\"shared<point>\",{\"1\":{\"38\":2}}],[\"shared<int>\",{\"1\":{\"36\":1,\"41\":1}}],[\"shared\",{\"0\":{\"35\":1,\"38\":1},\"1\":{\"13\":1,\"28\":1,\"33\":1,\"36\":4,\"37\":6,\"38\":5,\"41\":8}}],[\"string\",{\"1\":{\"127\":1,\"139\":1,\"152\":1}}],[\"struct\",{\"1\":{\"38\":1,\"41\":1}}],[\"stack<char>\",{\"1\":{\"152\":1}}],[\"stack<pair<ll\",{\"1\":{\"152\":1}}],[\"stack\",{\"1\":{\"46\":1,\"50\":1}}],[\"stdio\",{\"1\":{\"127\":1,\"152\":1}}],[\"stdc++\",{\"1\":{\"127\":1,\"139\":1,\"152\":1,\"163\":1,\"174\":1,\"179\":1,\"183\":1,\"187\":1}}],[\"std\",{\"0\":{\"38\":1},\"1\":{\"24\":1,\"25\":5,\"26\":1,\"30\":2,\"31\":2,\"33\":3,\"34\":2,\"36\":7,\"37\":4,\"38\":8,\"39\":1,\"41\":12,\"127\":1,\"139\":1,\"152\":1,\"163\":1,\"174\":1,\"179\":1,\"183\":1,\"187\":1}}],[\"sp\",{\"1\":{\"37\":7,\"41\":2}}],[\"sp2\",{\"1\":{\"36\":1,\"38\":4}}],[\"sp1\",{\"1\":{\"36\":4,\"38\":4}}],[\"second<<\",{\"1\":{\"152\":1}}],[\"second<0\",{\"1\":{\"152\":1}}],[\"second==1\",{\"1\":{\"152\":1}}],[\"second=\",{\"1\":{\"152\":1}}],[\"second+a\",{\"1\":{\"152\":1}}],[\"second\",{\"1\":{\"152\":12}}],[\"serializable\",{\"1\":{\"80\":1}}],[\"select\",{\"1\":{\"74\":3,\"90\":1,\"97\":1}}],[\"semaphore\",{\"1\":{\"64\":1}}],[\"search\",{\"1\":{\"13\":1}}],[\"set\",{\"1\":{\"10\":2}}],[\"save=true\",{\"1\":{\"203\":1,\"211\":1}}],[\"sacpc\",{\"1\":{\"117\":1,\"131\":1}}],[\"sass\",{\"1\":{\"13\":2}}],[\"sandpack\",{\"1\":{\"13\":1}}],[\"src\",{\"1\":{\"13\":4,\"15\":1}}],[\"修改过后的数据\",{\"1\":{\"84\":1}}],[\"修改数据的事务可以在另一个使用相同数据的事务开始之前或结束之后访问这些数据\",{\"1\":{\"80\":1}}],[\"修改或删除的文件\",{\"1\":{\"16\":1}}],[\"修改\",{\"1\":{\"13\":1}}],[\"的\",{\"1\":{\"208\":1}}],[\"的表达式\",{\"1\":{\"141\":1,\"143\":1}}],[\"的个数\",{\"1\":{\"138\":3}}],[\"的个数增加\",{\"1\":{\"138\":3}}],[\"的出现次数\",{\"1\":{\"138\":1}}],[\"的数量\",{\"1\":{\"138\":4}}],[\"的子序列数量\",{\"1\":{\"131\":1}}],[\"的值\",{\"1\":{\"126\":1}}],[\"的值此时是一个范围\",{\"1\":{\"101\":1}}],[\"的第\",{\"1\":{\"126\":1}}],[\"的生成策略不同\",{\"1\":{\"72\":1}}],[\"的核心就是\",{\"1\":{\"72\":1}}],[\"的资源\",{\"1\":{\"68\":1}}],[\"的循环引用问题而引入的辅助智能指针\",{\"1\":{\"41\":1}}],[\"的所有权被转移给\",{\"1\":{\"30\":1}}],[\"的对象\",{\"1\":{\"28\":1}}],[\"的源\",{\"1\":{\"17\":1}}],[\"的报错是正常的\",{\"1\":{\"13\":1}}],[\"的工作流\",{\"1\":{\"12\":1}}],[\"的路径\",{\"1\":{\"9\":1}}],[\"gpu版\",{\"0\":{\"198\":1}}],[\"gpu\",{\"1\":{\"195\":1,\"210\":1}}],[\"gcd=\",{\"1\":{\"152\":4}}],[\"gcd\",{\"1\":{\"151\":1,\"152\":4}}],[\"greater<int>\",{\"1\":{\"127\":1}}],[\"get\",{\"1\":{\"25\":1,\"168\":2,\"171\":1,\"174\":4}}],[\"gh\",{\"1\":{\"17\":2}}],[\"git\",{\"1\":{\"16\":10}}],[\"github\",{\"0\":{\"17\":1},\"1\":{\"12\":1,\"17\":2}}],[\"global\",{\"1\":{\"8\":1,\"9\":3,\"10\":2,\"16\":1}}],[\"是否启用自动混合精度训练\",{\"1\":{\"210\":1}}],[\"是否为单类别检测\",{\"1\":{\"210\":1}}],[\"是否在推理结束后显示结果\",{\"1\":{\"203\":1,\"211\":1}}],[\"是否在推理结束后保存结果\",{\"1\":{\"203\":1,\"211\":1}}],[\"是否需要一个自动部署文档到\",{\"1\":{\"12\":1}}],[\"是有序的\",{\"1\":{\"99\":1}}],[\"是两个不同的联合索引\",{\"1\":{\"94\":1}}],[\"是在数据库中对多个字段同时建立的索引\",{\"1\":{\"94\":1}}],[\"是在第一次执行\",{\"1\":{\"74\":1}}],[\"是每次执行\",{\"1\":{\"74\":1}}],[\"是不会变的\",{\"1\":{\"74\":1}}],[\"是\",{\"1\":{\"74\":1}}],[\"是通过\",{\"1\":{\"72\":1}}],[\"是程序的一个执行流\",{\"1\":{\"49\":1}}],[\"是一种全局无序局部有序的状态\",{\"1\":{\"99\":1}}],[\"是一种不拥有资源的智能指针\",{\"1\":{\"39\":1}}],[\"是一个最小执行单元\",{\"1\":{\"76\":1}}],[\"是一个正在运行的程序实例\",{\"1\":{\"45\":1}}],[\"是为了解决\",{\"1\":{\"41\":1}}],[\"是本地分支名称\",{\"1\":{\"16\":1}}],[\"是你项目所在的文件夹名称\",{\"1\":{\"12\":1}}],[\"目录下\",{\"1\":{\"15\":1,\"195\":1}}],[\"目录下的\",{\"1\":{\"13\":1}}],[\"目录\",{\"1\":{\"12\":1}}],[\"盘\",{\"1\":{\"12\":1,\"191\":1}}],[\"执行完成或被杀死\",{\"1\":{\"47\":1}}],[\"执行状态就组成了一个进程\",{\"1\":{\"45\":1}}],[\"执行任务被阻塞\",{\"1\":{\"22\":1}}],[\"执行过程中出现\",{\"1\":{\"13\":1}}],[\"执行以下命令之一\",{\"1\":{\"16\":1}}],[\"执行以下命令\",{\"1\":{\"12\":1}}],[\"执行\",{\"1\":{\"12\":2,\"47\":1,\"54\":1}}],[\"epochs\",{\"1\":{\"210\":1}}],[\"epochs=100\",{\"1\":{\"210\":1}}],[\"extra\",{\"1\":{\"198\":1}}],[\"exe\",{\"1\":{\"191\":1}}],[\"empty\",{\"1\":{\"152\":2}}],[\"embedded\",{\"1\":{\"13\":1}}],[\"else\",{\"1\":{\"41\":1,\"139\":2,\"152\":13,\"163\":1,\"174\":3,\"183\":11,\"187\":1}}],[\"end\",{\"1\":{\"127\":1}}],[\"endl\",{\"1\":{\"31\":1,\"34\":1,\"36\":2,\"37\":2,\"38\":1,\"41\":3}}],[\"enhance\",{\"1\":{\"13\":1}}],[\"error\",{\"1\":{\"30\":1}}],[\"echarts\",{\"1\":{\"13\":1}}],[\"e\",{\"1\":{\"12\":3,\"208\":1}}],[\"py\",{\"1\":{\"203\":1,\"210\":1,\"211\":1}}],[\"python=3\",{\"1\":{\"197\":1}}],[\"python版本为3\",{\"1\":{\"197\":1}}],[\"pytorch\",{\"1\":{\"194\":1,\"198\":1}}],[\"pt\",{\"1\":{\"201\":1,\"203\":1,\"210\":1,\"211\":1}}],[\"ptr的循环引用问题\",{\"0\":{\"38\":1}}],[\"ptr<point>\",{\"1\":{\"38\":4,\"41\":2}}],[\"ptr<t>\",{\"1\":{\"31\":3,\"34\":3,\"37\":3}}],[\"ptr<int>\",{\"1\":{\"30\":2,\"33\":2,\"36\":2,\"41\":2}}],[\"ptr\",{\"0\":{\"29\":1,\"32\":1,\"35\":1,\"40\":1},\"1\":{\"28\":4,\"30\":3,\"31\":21,\"33\":2,\"34\":14,\"36\":2,\"37\":23,\"38\":1,\"39\":2,\"41\":10}}],[\"pip\",{\"1\":{\"198\":1,\"199\":1,\"204\":2}}],[\"pipe\",{\"1\":{\"64\":1}}],[\"pop\",{\"1\":{\"152\":10}}],[\"pointer\",{\"1\":{\"73\":1}}],[\"point\",{\"1\":{\"38\":2,\"41\":2}}],[\"p\",{\"1\":{\"138\":1,\"139\":1}}],[\"pc\",{\"1\":{\"50\":1}}],[\"pcb\",{\"1\":{\"46\":1}}],[\"public\",{\"1\":{\"31\":1,\"34\":1,\"37\":1}}],[\"push\",{\"1\":{\"16\":1,\"127\":1,\"152\":16}}],[\"playground\",{\"1\":{\"13\":1}}],[\"plugin\",{\"1\":{\"13\":6}}],[\"pair<ll\",{\"1\":{\"152\":19}}],[\"pair<分子\",{\"1\":{\"151\":1}}],[\"package\",{\"1\":{\"13\":2}}],[\"pages\",{\"0\":{\"17\":1},\"1\":{\"12\":1,\"17\":3}}],[\"path\",{\"1\":{\"9\":2,\"208\":1}}],[\"printf\",{\"1\":{\"179\":1}}],[\"private\",{\"1\":{\"31\":1,\"34\":1,\"37\":1}}],[\"press\",{\"0\":{\"213\":1}}],[\"precision\",{\"1\":{\"210\":1}}],[\"predict\",{\"1\":{\"203\":1,\"211\":1}}],[\"prev\",{\"1\":{\"38\":3,\"41\":2}}],[\"prefix\",{\"1\":{\"10\":1}}],[\"prompt\",{\"1\":{\"197\":1,\"198\":1,\"204\":1}}],[\"program\",{\"1\":{\"195\":1}}],[\"process\",{\"0\":{\"44\":1},\"1\":{\"49\":1,\"65\":1}}],[\"pro\",{\"1\":{\"13\":1}}],[\"project=\",{\"1\":{\"203\":1,\"211\":1}}],[\"project\",{\"1\":{\"12\":3,\"13\":1}}],[\"设置协议\",{\"1\":{\"12\":1}}],[\"设置全局模块的安装路径到\",{\"1\":{\"10\":1}}],[\"设置缓存到\",{\"1\":{\"10\":1}}],[\"窗口\",{\"1\":{\"12\":1}}],[\"窗口执行以下指令\",{\"1\":{\"10\":1}}],[\"窗口输入\",{\"1\":{\"9\":1}}],[\"val\",{\"1\":{\"203\":1,\"208\":1}}],[\"value\",{\"1\":{\"38\":5,\"41\":5}}],[\"v11\",{\"1\":{\"195\":1}}],[\"vec\",{\"1\":{\"127\":4}}],[\"vector<int>vec\",{\"1\":{\"127\":1}}],[\"version\",{\"1\":{\"13\":1}}],[\"vs\",{\"0\":{\"52\":1}}],[\"view\",{\"1\":{\"13\":1,\"74\":6}}],[\"vite\",{\"1\":{\"13\":4}}],[\"vue3\",{\"1\":{\"13\":1}}],[\"vueuse\",{\"1\":{\"13\":1}}],[\"vue\",{\"0\":{\"213\":1},\"1\":{\"13\":2}}],[\"vuepress\",{\"1\":{\"12\":2,\"13\":18}}],[\"vp\",{\"1\":{\"13\":1}}],[\"v\",{\"1\":{\"9\":2,\"183\":10,\"194\":1}}],[\"改为\",{\"1\":{\"9\":1,\"39\":1}}],[\"nvcc\",{\"1\":{\"194\":1}}],[\"nvidia\",{\"1\":{\"194\":1,\"195\":1}}],[\"n表示特产数量\",{\"1\":{\"167\":1}}],[\"nt\",{\"1\":{\"163\":1}}],[\"nt=find\",{\"1\":{\"163\":1}}],[\"ni<nt\",{\"1\":{\"163\":1}}],[\"ni\",{\"1\":{\"163\":2}}],[\"ni=find\",{\"1\":{\"163\":1}}],[\"numpy\",{\"1\":{\"204\":1}}],[\"numpy==1\",{\"1\":{\"204\":1}}],[\"num\",{\"1\":{\"151\":2,\"152\":21}}],[\"nullptr\",{\"1\":{\"30\":3,\"31\":5,\"34\":3,\"37\":5,\"38\":2,\"41\":1}}],[\"n\",{\"1\":{\"127\":1,\"139\":1,\"152\":2,\"163\":2,\"174\":6,\"177\":1,\"179\":3,\"183\":2,\"185\":1,\"187\":3,\"197\":1}}],[\"next\",{\"1\":{\"38\":3,\"41\":2}}],[\"new\",{\"1\":{\"30\":1,\"37\":1,\"46\":1}}],[\"nptl\",{\"1\":{\"62\":1}}],[\"npx\",{\"1\":{\"13\":1}}],[\"npm\",{\"1\":{\"9\":2,\"10\":2,\"12\":2,\"13\":2,\"16\":1}}],[\"namespace\",{\"1\":{\"31\":1,\"34\":1,\"37\":1,\"127\":1,\"139\":1,\"152\":1,\"163\":1,\"174\":1,\"179\":1,\"183\":1,\"187\":1}}],[\"name\",{\"1\":{\"13\":1,\"203\":1,\"210\":1,\"211\":1}}],[\"not\",{\"1\":{\"13\":1,\"212\":1}}],[\"no\",{\"1\":{\"12\":1}}],[\"nodejs\",{\"1\":{\"9\":2,\"10\":2}}],[\"node\",{\"1\":{\"7\":1,\"8\":2,\"9\":9,\"10\":4}}],[\"cfg\",{\"1\":{\"210\":1}}],[\"cu118\",{\"1\":{\"198\":1}}],[\"cuda\",{\"1\":{\"194\":3,\"195\":1}}],[\"create\",{\"1\":{\"197\":1}}],[\"creator\",{\"1\":{\"74\":1}}],[\"cin>>x>>y>>z>>w>>n\",{\"1\":{\"187\":1}}],[\"cin>>m>>n\",{\"1\":{\"183\":1}}],[\"cin>>op\",{\"1\":{\"183\":1}}],[\"cin>>c\",{\"1\":{\"183\":1}}],[\"cin>>t\",{\"1\":{\"183\":1}}],[\"cin>>temp\",{\"1\":{\"163\":1}}],[\"cin>>a\",{\"1\":{\"179\":1,\"183\":1}}],[\"cin>>a>>b\",{\"1\":{\"127\":1}}],[\"cin>>n>>m>>k\",{\"1\":{\"179\":1}}],[\"cin>>n>>m>>w\",{\"1\":{\"174\":1}}],[\"cin>>n\",{\"1\":{\"163\":1}}],[\"cin>>s\",{\"1\":{\"139\":1,\"152\":1}}],[\"cin\",{\"1\":{\"127\":1,\"152\":1}}],[\"cpcs\",{\"0\":{\"115\":1}}],[\"cpu\",{\"1\":{\"21\":1,\"22\":1,\"23\":1,\"25\":1,\"45\":1,\"53\":1,\"54\":1,\"210\":2}}],[\"cc\",{\"1\":{\"72\":1}}],[\"c++11\",{\"1\":{\"24\":1,\"30\":1}}],[\"c++中的多线程\",{\"0\":{\"24\":1}}],[\"c++\",{\"0\":{\"18\":1},\"1\":{\"28\":1}}],[\"cls\",{\"1\":{\"210\":1}}],[\"cls=false\",{\"1\":{\"210\":1}}],[\"class\",{\"1\":{\"31\":1,\"34\":1,\"37\":1}}],[\"client\",{\"1\":{\"13\":1}}],[\"clean\",{\"1\":{\"13\":2}}],[\"count\",{\"1\":{\"36\":2,\"37\":15}}],[\"cout<<a\",{\"1\":{\"183\":1}}],[\"cout<<ans\",{\"1\":{\"152\":2,\"179\":1}}],[\"cout<<\",{\"1\":{\"174\":4,\"183\":1,\"187\":1}}],[\"cout<<i<<\",{\"1\":{\"163\":1,\"187\":2}}],[\"cout<<dp\",{\"1\":{\"127\":1,\"139\":1}}],[\"cout\",{\"1\":{\"31\":1,\"34\":1,\"36\":2,\"37\":2,\"38\":1,\"41\":3,\"127\":1,\"152\":1}}],[\"conda\",{\"1\":{\"197\":1,\"198\":1,\"204\":1}}],[\"condition\",{\"0\":{\"67\":1}}],[\"continue\",{\"1\":{\"183\":4,\"187\":3}}],[\"const\",{\"1\":{\"127\":1,\"139\":1}}],[\"consistency\",{\"0\":{\"79\":1}}],[\"consistant\",{\"1\":{\"74\":1}}],[\"concurrency\",{\"1\":{\"25\":1}}],[\"config\",{\"1\":{\"10\":2,\"15\":1,\"16\":1}}],[\"computing\",{\"1\":{\"195\":1}}],[\"components\",{\"1\":{\"13\":1}}],[\"committed\",{\"1\":{\"74\":1,\"80\":1}}],[\"commit\",{\"1\":{\"16\":1}}],[\"core\",{\"1\":{\"13\":1,\"16\":1}}],[\"cd\",{\"1\":{\"12\":1}}],[\"cmd\",{\"1\":{\"9\":1,\"10\":1,\"12\":1,\"194\":1}}],[\"c\",{\"1\":{\"9\":1,\"94\":2,\"96\":2,\"97\":1,\"138\":1,\"139\":1,\"183\":1,\"191\":1,\"195\":1}}],[\"cache=false\",{\"1\":{\"210\":1}}],[\"cache\",{\"1\":{\"8\":1,\"9\":1,\"10\":3,\"13\":1,\"210\":1}}],[\"中南民族大学第七届程序设计竞赛火热进行中\",{\"1\":{\"131\":1}}],[\"中南民族大学程序设计竞赛\",{\"0\":{\"128\":1}}],[\"中的每个字符\",{\"1\":{\"126\":1}}],[\"中匹配\",{\"1\":{\"126\":1}}],[\"中有多少子序列等于\",{\"1\":{\"117\":1}}],[\"中就是非聚簇索引\",{\"1\":{\"111\":1}}],[\"中\",{\"1\":{\"105\":1,\"112\":1}}],[\"中最新的一条记录开始跟\",{\"1\":{\"74\":1}}],[\"中哪些事务正在执行\",{\"1\":{\"74\":1}}],[\"中比较重要的字段有\",{\"1\":{\"74\":1}}],[\"中默认的\",{\"1\":{\"9\":1}}],[\"中添加\",{\"1\":{\"9\":1}}],[\"data=\",{\"1\":{\"210\":1}}],[\"data\",{\"1\":{\"208\":1,\"210\":2}}],[\"dataset\",{\"1\":{\"208\":2,\"210\":1,\"211\":1}}],[\"download\",{\"1\":{\"198\":1,\"208\":1}}],[\"double\",{\"1\":{\"179\":3}}],[\"don\",{\"1\":{\"168\":1}}],[\"docs\",{\"1\":{\"12\":1,\"13\":5,\"16\":1}}],[\"div\",{\"1\":{\"152\":4}}],[\"dp\",{\"1\":{\"125\":1,\"126\":11,\"127\":5,\"138\":12,\"139\":9}}],[\"durability\",{\"0\":{\"81\":1}}],[\"detect\",{\"1\":{\"203\":1,\"210\":2,\"211\":3}}],[\"detach\",{\"1\":{\"25\":1}}],[\"deadlock\",{\"0\":{\"68\":1}}],[\"delete\",{\"1\":{\"31\":3,\"34\":4,\"37\":6,\"38\":1,\"41\":1}}],[\"device\",{\"1\":{\"210\":1}}],[\"device=\",{\"1\":{\"210\":1}}],[\"devdependencies\",{\"1\":{\"13\":2}}],[\"dev\",{\"1\":{\"13\":5}}],[\"description\",{\"1\":{\"13\":1}}],[\"d\",{\"1\":{\"9\":2,\"10\":2,\"191\":1}}],[\"在项目根目录下新建\",{\"1\":{\"210\":1,\"211\":1}}],[\"在项目根目录下新建一个文件夹用来存放导入的数据集\",{\"1\":{\"208\":1}}],[\"在源码根目录下新建\",{\"1\":{\"203\":1}}],[\"在被成功破解上一个宝箱密码后\",{\"1\":{\"117\":1}}],[\"在通过主键值回到聚簇索引找到实际数据\",{\"1\":{\"112\":1}}],[\"在这个范围内\",{\"1\":{\"101\":1}}],[\"在使用联合索引时\",{\"1\":{\"100\":1,\"101\":1}}],[\"在操作一堆数据的时候\",{\"1\":{\"86\":1}}],[\"在事务未结束时\",{\"1\":{\"85\":1}}],[\"在事务开始之前和事务结束以后\",{\"1\":{\"79\":1}}],[\"在并发环境中\",{\"1\":{\"80\":1}}],[\"在同一个事务当中\",{\"1\":{\"76\":2}}],[\"在未提交事务的数组中\",{\"1\":{\"74\":1}}],[\"在实现\",{\"1\":{\"74\":1}}],[\"在解决循环引用时\",{\"1\":{\"41\":1}}],[\"在设计结构中\",{\"1\":{\"39\":1}}],[\"在某些场景中\",{\"1\":{\"38\":1}}],[\"在拷贝时将资源的所有权从一个对象转移给另一个对象\",{\"1\":{\"30\":1}}],[\"在另一篇里介绍过了\",{\"1\":{\"20\":1}}],[\"在\",{\"1\":{\"9\":1,\"24\":1,\"99\":1,\"105\":1,\"112\":1}}],[\"在系统变量的\",{\"1\":{\"9\":1}}],[\"在系统变量里新建\",{\"1\":{\"9\":1}}],[\"在安装路径的根目录下新建\",{\"1\":{\"8\":1}}],[\"文件并修改对应信息\",{\"1\":{\"208\":1}}],[\"文件描述符等\",{\"1\":{\"51\":1}}],[\"文件描述符\",{\"1\":{\"45\":1}}],[\"文件\",{\"1\":{\"15\":1,\"203\":1,\"210\":1,\"211\":1}}],[\"文件中的\",{\"1\":{\"15\":1}}],[\"文件为以下内容\",{\"1\":{\"13\":1}}],[\"文件夹查看训练结果\",{\"1\":{\"211\":1}}],[\"文件夹\",{\"1\":{\"8\":1,\"10\":2,\"13\":1}}],[\"文档\",{\"0\":{\"1\":1}}],[\"和括号\",{\"1\":{\"151\":1}}],[\"和索引\",{\"1\":{\"94\":1,\"96\":1}}],[\"和\",{\"1\":{\"8\":1,\"9\":1,\"28\":1,\"38\":1,\"74\":2,\"117\":1,\"194\":1}}],[\"📌模型训练\",{\"0\":{\"209\":1}}],[\"📌数据集\",{\"0\":{\"206\":1}}],[\"📌验证环境\",{\"0\":{\"203\":1}}],[\"📌源码及使用环境\",{\"0\":{\"200\":1}}],[\"📌安装环境\",{\"0\":{\"193\":1,\"196\":1}}],[\"📌安装所需软件\",{\"0\":{\"190\":1}}],[\"📌std\",{\"0\":{\"29\":1,\"32\":1,\"35\":1,\"40\":1}}],[\"📌作用\",{\"1\":{\"26\":1}}],[\"📌部署到github\",{\"0\":{\"14\":1}}],[\"📌搭建项目\",{\"0\":{\"11\":1}}],[\"📌准备工作\",{\"0\":{\"6\":1}}],[\"🔥测试代码\",{\"0\":{\"211\":1}}],[\"🔥训练代码\",{\"0\":{\"210\":1}}],[\"🔥导入数据集\",{\"0\":{\"208\":1}}],[\"🔥免费数据集网站\",{\"0\":{\"207\":1}}],[\"🔥numpy版本问题\",{\"0\":{\"204\":1}}],[\"🔥下载yolo11源码\",{\"0\":{\"201\":1}}],[\"🔥下载node\",{\"0\":{\"7\":1}}],[\"🔥安装ultralytics库\",{\"0\":{\"199\":1}}],[\"🔥安装pytorch\",{\"0\":{\"198\":1}}],[\"🔥安装依赖\",{\"0\":{\"13\":1}}],[\"🔥创建虚拟环境\",{\"0\":{\"197\":1}}],[\"🔥cudnn\",{\"0\":{\"195\":1}}],[\"🔥cuda\",{\"0\":{\"194\":1}}],[\"🔥pycharm导入环境\",{\"0\":{\"202\":1}}],[\"🔥pycharm\",{\"0\":{\"192\":1}}],[\"🔥anacoda3\",{\"0\":{\"191\":1}}],[\"🔥使用\",{\"0\":{\"17\":1}}],[\"🔥推送代码到github\",{\"0\":{\"16\":1}}],[\"🔥新建仓库\",{\"0\":{\"15\":1}}],[\"🔥初始化项目\",{\"0\":{\"12\":1}}],[\"🔥修改缓存目录和全局目录\",{\"0\":{\"10\":1}}],[\"🔥环境变量\",{\"0\":{\"9\":1}}],[\"🔥添加两个文件夹\",{\"0\":{\"8\":1}}],[\"项目需要用到多语言么\",{\"1\":{\"12\":1}}],[\"项目\",{\"0\":{\"4\":1}}],[\"欢迎来到小鸡的项目笔记✨\",{\"1\":{\"4\":1}}],[\"欢迎来到小鸡的题解专题✨\",{\"1\":{\"3\":1}}],[\"欢迎来到小鸡的学习笔记✨\",{\"1\":{\"2\":1}}],[\"欢迎来到小鸡的个人文档✨\",{\"1\":{\"1\":1}}],[\"友链\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
